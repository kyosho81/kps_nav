message("----------cross compile setting----------")
INCLUDE(CMakeForceCompiler)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}  -std=c++0x -fpic")  
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -fpic")  
#-mfloat-abi=hard -mfpu=vfp

#set(CMAKE_C_COMPILER "arm-xilinx-linux-gnueabi-gcc" ${CMAKE_C_FLAGS})  
#set(CMAKE_CXX_COMPILER "arm-xilinx-linux-gnueabi-g++" ${CMAKE_CXX_FLAGS})
#CMAKE_FORCE_C_COMPILER(arm-linux-gnueabihf-gcc arm-linux-gnueabihf-gcc)
#CMAKE_FORCE_CXX_COMPILER(arm-linux-gnueabihf-g++ arm-linux-gnueabihf-g++)

#CMAKE_FORCE_C_COMPILER(arm-cortexa9-linux-gnueabihf-gcc arm-cortexa9-linux-gnueabihf-gcc)
#CMAKE_FORCE_CXX_COMPILER(arm-cortexa9-linux-gnueabihf-g++ arm-cortexa9-linux-gnueabihf-g++)

#set(CMAKE_FIND_ROOT_PATH /home/arm/Work/tx2/gcc-linaro-5.4.1-2017.05-x86_64_aarch64-linux-gnu)
#set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
#set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
set(CMAKE_C_COMPILER /home/arm/Work/tx2/gcc-linaro-5.4.1-2017.05-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-gcc)
set(CMAKE_CXX_COMPILER /home/arm/Work/tx2/gcc-linaro-5.4.1-2017.05-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-g++)

#message(${CMAKE_C_FLAGS})
#message(${CMAKE_CXX_FLAGS})
message(${CMAKE_C_COMPILER})
message(${CMAKE_CXX_COMPILER})

message("CMAKE_C_FLAGS:")
message("${CMAKE_C_FLAGS}")

message("CMAKE_CXX_FLAGS:")
message("${CMAKE_CXX_FLAGS}")

SET(CMAKE_INSTALL_PREFIX "/home/arm/N_KPS_Arm_new")
IF(BUILD_SDK)
ELSE()
link_directories("/home/arm/N_KPS_Arm_new/lib")
ENDIF(BUILD_SDK)
message(${CMAKE_INSTALL_PREFIX})

#link thirdparty
link_directories(${KPS_ARM_THIRD_PARTY_PATH}/arm/)

message("----------use arm boost----------")

#SET(BOOST_ROOT "/home/arm/Downloads/boost_1_58_0")
SET(BOOST_ROOT "/home/arm/Downloads/boost_1_68_0")
set(Boost_USE_STATIC_LIBS   ON)
set(Boost_USE_MULTITHREADED ON)

find_package(Boost 1.68.0 COMPONENTS thread date_time program_options filesystem system signals chrono REQUIRED)
#find_package(Boost 1.64.0 COMPONENTS thread date_time program_options filesystem system signals REQUIRED)
if(Boost_FOUND)
  include_directories(${Boost_INCLUDE_DIRS})
  link_directories(${Boost_LIBRARY_DIRS})
  #message(${CMAKE_MODULE_PATH})
  #message(${Boost_ROOT})
  message(${Boost_INCLUDE_DIRS})
  message(${Boost_LIBRARY_DIRS})
  message(${Boost_LIBRARIES})
  message("boost found")
  
else()
  message("boost not found")
endif()



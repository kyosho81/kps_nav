#include "math.h"
#include "Comm/linde_crc16.h"


/*
###############################################################################
# CRC-16-DNP          x16+   x13+ x12+ x11+  x10+  x8+   x6+ x5+      x2+  1
#          0x3D65 =   b      1    1    1     1   0 1  0  1   1  0 0   1  0 1
#
#( expression is normal, MSB-first code, high-order bit is not mentioned)
#
#
#  Name   : "CRC-16/DNP"
#  Width  : 16
#  Poly   : 0x3D65
#  Init   : 0xFFFF
#  RefIn  : FALSE
#  RefOut : FALSE
#  XorOut : 0x0000
#  Check  : 0xBBB6
*/

static const U16 crc16_table[256] =
{
	U16(0x0000), U16(0x3D65), U16(0x7ACA), U16(0x47AF), U16(0xF594), U16(0xC8F1), U16(0x8F5E), U16(0xB23B),
	U16(0xD64D), U16(0xEB28), U16(0xAC87), U16(0x91E2), U16(0x23D9), U16(0x1EBC), U16(0x5913), U16(0x6476),
	U16(0x91FF), U16(0xAC9A), U16(0xEB35), U16(0xD650), U16(0x646B), U16(0x590E), U16(0x1EA1), U16(0x23C4),
	U16(0x47B2), U16(0x7AD7), U16(0x3D78), U16(0x001D), U16(0xB226), U16(0x8F43), U16(0xC8EC), U16(0xF589),
	U16(0x1E9B), U16(0x23FE), U16(0x6451), U16(0x5934), U16(0xEB0F), U16(0xD66A), U16(0x91C5), U16(0xACA0),
	U16(0xC8D6), U16(0xF5B3), U16(0xB21C), U16(0x8F79), U16(0x3D42), U16(0x0027), U16(0x4788), U16(0x7AED),
	U16(0x8F64), U16(0xB201), U16(0xF5AE), U16(0xC8CB), U16(0x7AF0), U16(0x4795), U16(0x003A), U16(0x3D5F),
	U16(0x5929), U16(0x644C), U16(0x23E3), U16(0x1E86), U16(0xACBD), U16(0x91D8), U16(0xD677), U16(0xEB12),
	U16(0x3D36), U16(0x0053), U16(0x47FC), U16(0x7A99), U16(0xC8A2), U16(0xF5C7), U16(0xB268), U16(0x8F0D),
	U16(0xEB7B), U16(0xD61E), U16(0x91B1), U16(0xACD4), U16(0x1EEF), U16(0x238A), U16(0x6425), U16(0x5940),
	U16(0xACC9), U16(0x91AC), U16(0xD603), U16(0xEB66), U16(0x595D), U16(0x6438), U16(0x2397), U16(0x1EF2),
	U16(0x7A84), U16(0x47E1), U16(0x004E), U16(0x3D2B), U16(0x8F10), U16(0xB275), U16(0xF5DA), U16(0xC8BF),
	U16(0x23AD), U16(0x1EC8), U16(0x5967), U16(0x6402), U16(0xD639), U16(0xEB5C), U16(0xACF3), U16(0x9196),
	U16(0xF5E0), U16(0xC885), U16(0x8F2A), U16(0xB24F), U16(0x0074), U16(0x3D11), U16(0x7ABE), U16(0x47DB),
	U16(0xB252), U16(0x8F37), U16(0xC898), U16(0xF5FD), U16(0x47C6), U16(0x7AA3), U16(0x3D0C), U16(0x0069),
	U16(0x641F), U16(0x597A), U16(0x1ED5), U16(0x23B0), U16(0x918B), U16(0xACEE), U16(0xEB41), U16(0xD624),
	U16(0x7A6C), U16(0x4709), U16(0x00A6), U16(0x3DC3), U16(0x8FF8), U16(0xB29D), U16(0xF532), U16(0xC857),
	U16(0xAC21), U16(0x9144), U16(0xD6EB), U16(0xEB8E), U16(0x59B5), U16(0x64D0), U16(0x237F), U16(0x1E1A),
	U16(0xEB93), U16(0xD6F6), U16(0x9159), U16(0xAC3C), U16(0x1E07), U16(0x2362), U16(0x64CD), U16(0x59A8),
	U16(0x3DDE), U16(0x00BB), U16(0x4714), U16(0x7A71), U16(0xC84A), U16(0xF52F), U16(0xB280), U16(0x8FE5),
	U16(0x64F7), U16(0x5992), U16(0x1E3D), U16(0x2358), U16(0x9163), U16(0xAC06), U16(0xEBA9), U16(0xD6CC),
	U16(0xB2BA), U16(0x8FDF), U16(0xC870), U16(0xF515), U16(0x472E), U16(0x7A4B), U16(0x3DE4), U16(0x0081),
	U16(0xF508), U16(0xC86D), U16(0x8FC2), U16(0xB2A7), U16(0x009C), U16(0x3DF9), U16(0x7A56), U16(0x4733),
	U16(0x2345), U16(0x1E20), U16(0x598F), U16(0x64EA), U16(0xD6D1), U16(0xEBB4), U16(0xAC1B), U16(0x917E),
	U16(0x475A), U16(0x7A3F), U16(0x3D90), U16(0x00F5), U16(0xB2CE), U16(0x8FAB), U16(0xC804), U16(0xF561),
	U16(0x9117), U16(0xAC72), U16(0xEBDD), U16(0xD6B8), U16(0x6483), U16(0x59E6), U16(0x1E49), U16(0x232C),
	U16(0xD6A5), U16(0xEBC0), U16(0xAC6F), U16(0x910A), U16(0x2331), U16(0x1E54), U16(0x59FB), U16(0x649E),
	U16(0x00E8), U16(0x3D8D), U16(0x7A22), U16(0x4747), U16(0xF57C), U16(0xC819), U16(0x8FB6), U16(0xB2D3),
	U16(0x59C1), U16(0x64A4), U16(0x230B), U16(0x1E6E), U16(0xAC55), U16(0x9130), U16(0xD69F), U16(0xEBFA),
	U16(0x8F8C), U16(0xB2E9), U16(0xF546), U16(0xC823), U16(0x7A18), U16(0x477D), U16(0x00D2), U16(0x3DB7),
	U16(0xC83E), U16(0xF55B), U16(0xB2F4), U16(0x8F91), U16(0x3DAA), U16(0x00CF), U16(0x4760), U16(0x7A05),
	U16(0x1E73), U16(0x2316), U16(0x64B9), U16(0x59DC), U16(0xEBE7), U16(0xD682), U16(0x912D), U16(0xAC48)
};

bool linde_crc16::cal_crc16( U16 &crc_value, U8* src, U32 len )
{
	crc_value = 0xffff;

	if ( !src || ( len < 1 ) ){
		return false;
	}
	U16 i;
	S8 *psrc = (S8*) src;

	for( int i = 0; i < len; i++ )
	{
		crc_value = ((crc_value << 8) & 0xFF00) ^ crc16_table[(crc_value >> 8) ^ (0xFF &*psrc)];
		psrc++;
	}
	return true;
}

bool linde_crc16::chk_crc16( U8* src, U32 len)
{
	if ( (!src) || ( len < 2 ) )
	{
		return false;
	}

	U16 crc = 0;

	if( !cal_crc16( crc, src , len - 2)){
		return false;
	}

	if(  (src[len - 2] != (crc & 0x00ff)>>0 ) || ( src[len - 1] != (crc & 0xff00)>>8 )){
		return false;
	}

	return true;
}

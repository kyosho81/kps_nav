// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "edge.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KPS {

namespace {

const ::google::protobuf::Descriptor* mp_edge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_edge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* mp_edge_Edge_Dir_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_edge_2eproto() {
  protobuf_AddDesc_edge_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "edge.proto");
  GOOGLE_CHECK(file != NULL);
  mp_edge_descriptor_ = file->message_type(0);
  static const int mp_edge_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_edge, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_edge, ref_node_one_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_edge, ref_node_two_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_edge, forward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_edge, backward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_edge, leftshift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_edge, rightshift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_edge, speed_forward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_edge, speed_backward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_edge, speed_leftshift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_edge, speed_rightshift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_edge, lab_),
  };
  mp_edge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_edge_descriptor_,
      mp_edge::default_instance_,
      mp_edge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_edge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_edge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_edge));
  mp_edge_Edge_Dir_Type_descriptor_ = mp_edge_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_edge_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_edge_descriptor_, &mp_edge::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_edge_2eproto() {
  delete mp_edge::default_instance_;
  delete mp_edge_reflection_;
}

void protobuf_AddDesc_edge_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::KPS::protobuf_AddDesc_base_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nedge.proto\022\003KPS\032\nbase.proto\"\302\003\n\007mp_edg"
    "e\022\037\n\004base\030\001 \002(\0132\021.KPS.mp_item_base\022\024\n\014re"
    "f_node_one\030\002 \002(\r\022\024\n\014ref_node_two\030\003 \002(\r\022+"
    "\n\007forward\030\004 \002(\0162\032.KPS.mp_edge.Edge_Dir_T"
    "ype\022,\n\010backward\030\005 \002(\0162\032.KPS.mp_edge.Edge"
    "_Dir_Type\022-\n\tleftshift\030\006 \001(\0162\032.KPS.mp_ed"
    "ge.Edge_Dir_Type\022.\n\nrightshift\030\007 \001(\0162\032.K"
    "PS.mp_edge.Edge_Dir_Type\022\025\n\rspeed_forwar"
    "d\030\010 \002(\002\022\026\n\016speed_backward\030\t \002(\002\022\027\n\017speed"
    "_leftshift\030\n \001(\002\022\030\n\020speed_rightshift\030\013 \001"
    "(\002\022\013\n\003lab\030\014 \001(\t\"A\n\rEdge_Dir_Type\022\010\n\004NONE"
    "\020\000\022\013\n\007ONE2TWO\020\001\022\013\n\007TWO2ONE\020\002\022\014\n\010BOTH_DIR"
    "\020\003", 482);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "edge.proto", &protobuf_RegisterTypes);
  mp_edge::default_instance_ = new mp_edge();
  mp_edge::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_edge_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_edge_2eproto {
  StaticDescriptorInitializer_edge_2eproto() {
    protobuf_AddDesc_edge_2eproto();
  }
} static_descriptor_initializer_edge_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* mp_edge_Edge_Dir_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_edge_Edge_Dir_Type_descriptor_;
}
bool mp_edge_Edge_Dir_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const mp_edge_Edge_Dir_Type mp_edge::NONE;
const mp_edge_Edge_Dir_Type mp_edge::ONE2TWO;
const mp_edge_Edge_Dir_Type mp_edge::TWO2ONE;
const mp_edge_Edge_Dir_Type mp_edge::BOTH_DIR;
const mp_edge_Edge_Dir_Type mp_edge::Edge_Dir_Type_MIN;
const mp_edge_Edge_Dir_Type mp_edge::Edge_Dir_Type_MAX;
const int mp_edge::Edge_Dir_Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string mp_edge::_default_lab_;
#ifndef _MSC_VER
const int mp_edge::kBaseFieldNumber;
const int mp_edge::kRefNodeOneFieldNumber;
const int mp_edge::kRefNodeTwoFieldNumber;
const int mp_edge::kForwardFieldNumber;
const int mp_edge::kBackwardFieldNumber;
const int mp_edge::kLeftshiftFieldNumber;
const int mp_edge::kRightshiftFieldNumber;
const int mp_edge::kSpeedForwardFieldNumber;
const int mp_edge::kSpeedBackwardFieldNumber;
const int mp_edge::kSpeedLeftshiftFieldNumber;
const int mp_edge::kSpeedRightshiftFieldNumber;
const int mp_edge::kLabFieldNumber;
#endif  // !_MSC_VER

mp_edge::mp_edge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_edge::InitAsDefaultInstance() {
  base_ = const_cast< ::KPS::mp_item_base*>(&::KPS::mp_item_base::default_instance());
}

mp_edge::mp_edge(const mp_edge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_edge::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ref_node_one_ = 0u;
  ref_node_two_ = 0u;
  forward_ = 0;
  backward_ = 0;
  leftshift_ = 0;
  rightshift_ = 0;
  speed_forward_ = 0;
  speed_backward_ = 0;
  speed_leftshift_ = 0;
  speed_rightshift_ = 0;
  lab_ = const_cast< ::std::string*>(&_default_lab_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_edge::~mp_edge() {
  SharedDtor();
}

void mp_edge::SharedDtor() {
  if (lab_ != &_default_lab_) {
    delete lab_;
  }
  if (this != default_instance_) {
    delete base_;
  }
}

void mp_edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_edge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_edge_descriptor_;
}

const mp_edge& mp_edge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_edge_2eproto();  return *default_instance_;
}

mp_edge* mp_edge::default_instance_ = NULL;

mp_edge* mp_edge::New() const {
  return new mp_edge;
}

void mp_edge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (base_ != NULL) base_->::KPS::mp_item_base::Clear();
    }
    ref_node_one_ = 0u;
    ref_node_two_ = 0u;
    forward_ = 0;
    backward_ = 0;
    leftshift_ = 0;
    rightshift_ = 0;
    speed_forward_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    speed_backward_ = 0;
    speed_leftshift_ = 0;
    speed_rightshift_ = 0;
    if (_has_bit(11)) {
      if (lab_ != &_default_lab_) {
        lab_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KPS.mp_item_base base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ref_node_one;
        break;
      }
      
      // required uint32 ref_node_one = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ref_node_one:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ref_node_one_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ref_node_two;
        break;
      }
      
      // required uint32 ref_node_two = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ref_node_two:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ref_node_two_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_forward;
        break;
      }
      
      // required .KPS.mp_edge.Edge_Dir_Type forward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forward:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KPS::mp_edge_Edge_Dir_Type_IsValid(value)) {
            set_forward(static_cast< ::KPS::mp_edge_Edge_Dir_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_backward;
        break;
      }
      
      // required .KPS.mp_edge.Edge_Dir_Type backward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_backward:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KPS::mp_edge_Edge_Dir_Type_IsValid(value)) {
            set_backward(static_cast< ::KPS::mp_edge_Edge_Dir_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_leftshift;
        break;
      }
      
      // optional .KPS.mp_edge.Edge_Dir_Type leftshift = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftshift:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KPS::mp_edge_Edge_Dir_Type_IsValid(value)) {
            set_leftshift(static_cast< ::KPS::mp_edge_Edge_Dir_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rightshift;
        break;
      }
      
      // optional .KPS.mp_edge.Edge_Dir_Type rightshift = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rightshift:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KPS::mp_edge_Edge_Dir_Type_IsValid(value)) {
            set_rightshift(static_cast< ::KPS::mp_edge_Edge_Dir_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_speed_forward;
        break;
      }
      
      // required float speed_forward = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed_forward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_forward_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_speed_backward;
        break;
      }
      
      // required float speed_backward = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed_backward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_backward_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_speed_leftshift;
        break;
      }
      
      // optional float speed_leftshift = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed_leftshift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_leftshift_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_speed_rightshift;
        break;
      }
      
      // optional float speed_rightshift = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed_rightshift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_rightshift_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_lab;
        break;
      }
      
      // optional string lab = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lab:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lab()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lab().data(), this->lab().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KPS.mp_item_base base = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // required uint32 ref_node_one = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ref_node_one(), output);
  }
  
  // required uint32 ref_node_two = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ref_node_two(), output);
  }
  
  // required .KPS.mp_edge.Edge_Dir_Type forward = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->forward(), output);
  }
  
  // required .KPS.mp_edge.Edge_Dir_Type backward = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->backward(), output);
  }
  
  // optional .KPS.mp_edge.Edge_Dir_Type leftshift = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->leftshift(), output);
  }
  
  // optional .KPS.mp_edge.Edge_Dir_Type rightshift = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->rightshift(), output);
  }
  
  // required float speed_forward = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->speed_forward(), output);
  }
  
  // required float speed_backward = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->speed_backward(), output);
  }
  
  // optional float speed_leftshift = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->speed_leftshift(), output);
  }
  
  // optional float speed_rightshift = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->speed_rightshift(), output);
  }
  
  // optional string lab = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lab().data(), this->lab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->lab(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_edge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KPS.mp_item_base base = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // required uint32 ref_node_one = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ref_node_one(), target);
  }
  
  // required uint32 ref_node_two = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ref_node_two(), target);
  }
  
  // required .KPS.mp_edge.Edge_Dir_Type forward = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->forward(), target);
  }
  
  // required .KPS.mp_edge.Edge_Dir_Type backward = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->backward(), target);
  }
  
  // optional .KPS.mp_edge.Edge_Dir_Type leftshift = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->leftshift(), target);
  }
  
  // optional .KPS.mp_edge.Edge_Dir_Type rightshift = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->rightshift(), target);
  }
  
  // required float speed_forward = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->speed_forward(), target);
  }
  
  // required float speed_backward = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->speed_backward(), target);
  }
  
  // optional float speed_leftshift = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->speed_leftshift(), target);
  }
  
  // optional float speed_rightshift = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->speed_rightshift(), target);
  }
  
  // optional string lab = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lab().data(), this->lab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->lab(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_edge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KPS.mp_item_base base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // required uint32 ref_node_one = 2;
    if (has_ref_node_one()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ref_node_one());
    }
    
    // required uint32 ref_node_two = 3;
    if (has_ref_node_two()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ref_node_two());
    }
    
    // required .KPS.mp_edge.Edge_Dir_Type forward = 4;
    if (has_forward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->forward());
    }
    
    // required .KPS.mp_edge.Edge_Dir_Type backward = 5;
    if (has_backward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->backward());
    }
    
    // optional .KPS.mp_edge.Edge_Dir_Type leftshift = 6;
    if (has_leftshift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leftshift());
    }
    
    // optional .KPS.mp_edge.Edge_Dir_Type rightshift = 7;
    if (has_rightshift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rightshift());
    }
    
    // required float speed_forward = 8;
    if (has_speed_forward()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float speed_backward = 9;
    if (has_speed_backward()) {
      total_size += 1 + 4;
    }
    
    // optional float speed_leftshift = 10;
    if (has_speed_leftshift()) {
      total_size += 1 + 4;
    }
    
    // optional float speed_rightshift = 11;
    if (has_speed_rightshift()) {
      total_size += 1 + 4;
    }
    
    // optional string lab = 12;
    if (has_lab()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lab());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_edge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_edge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_edge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_edge::MergeFrom(const mp_edge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_base()->::KPS::mp_item_base::MergeFrom(from.base());
    }
    if (from._has_bit(1)) {
      set_ref_node_one(from.ref_node_one());
    }
    if (from._has_bit(2)) {
      set_ref_node_two(from.ref_node_two());
    }
    if (from._has_bit(3)) {
      set_forward(from.forward());
    }
    if (from._has_bit(4)) {
      set_backward(from.backward());
    }
    if (from._has_bit(5)) {
      set_leftshift(from.leftshift());
    }
    if (from._has_bit(6)) {
      set_rightshift(from.rightshift());
    }
    if (from._has_bit(7)) {
      set_speed_forward(from.speed_forward());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_speed_backward(from.speed_backward());
    }
    if (from._has_bit(9)) {
      set_speed_leftshift(from.speed_leftshift());
    }
    if (from._has_bit(10)) {
      set_speed_rightshift(from.speed_rightshift());
    }
    if (from._has_bit(11)) {
      set_lab(from.lab());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_edge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_edge::CopyFrom(const mp_edge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_edge::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000019f) != 0x0000019f) return false;
  
  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void mp_edge::Swap(mp_edge* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(ref_node_one_, other->ref_node_one_);
    std::swap(ref_node_two_, other->ref_node_two_);
    std::swap(forward_, other->forward_);
    std::swap(backward_, other->backward_);
    std::swap(leftshift_, other->leftshift_);
    std::swap(rightshift_, other->rightshift_);
    std::swap(speed_forward_, other->speed_forward_);
    std::swap(speed_backward_, other->speed_backward_);
    std::swap(speed_leftshift_, other->speed_leftshift_);
    std::swap(speed_rightshift_, other->speed_rightshift_);
    std::swap(lab_, other->lab_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_edge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_edge_descriptor_;
  metadata.reflection = mp_edge_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

// @@protoc_insertion_point(global_scope)

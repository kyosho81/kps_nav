// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "node.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KPS {

namespace {

const ::google::protobuf::Descriptor* mp_node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_node_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_node_2eproto() {
  protobuf_AddDesc_node_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "node.proto");
  GOOGLE_CHECK(file != NULL);
  mp_node_descriptor_ = file->message_type(0);
  static const int mp_node_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_node, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_node, mp_ref_node_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_node, mp_ref_edge_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_node, lab_),
  };
  mp_node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_node_descriptor_,
      mp_node::default_instance_,
      mp_node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_node));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_node_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_node_descriptor_, &mp_node::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_node_2eproto() {
  delete mp_node::default_instance_;
  delete mp_node_reflection_;
}

void protobuf_AddDesc_node_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::KPS::protobuf_AddDesc_base_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nnode.proto\022\003KPS\032\nbase.proto\"k\n\007mp_node"
    "\022\037\n\004base\030\001 \002(\0132\021.KPS.mp_item_base\022\030\n\020mp_"
    "ref_node_list\030\002 \003(\r\022\030\n\020mp_ref_edge_list\030"
    "\003 \003(\r\022\013\n\003lab\030\004 \001(\t", 138);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "node.proto", &protobuf_RegisterTypes);
  mp_node::default_instance_ = new mp_node();
  mp_node::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_node_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_node_2eproto {
  StaticDescriptorInitializer_node_2eproto() {
    protobuf_AddDesc_node_2eproto();
  }
} static_descriptor_initializer_node_2eproto_;


// ===================================================================

const ::std::string mp_node::_default_lab_;
#ifndef _MSC_VER
const int mp_node::kBaseFieldNumber;
const int mp_node::kMpRefNodeListFieldNumber;
const int mp_node::kMpRefEdgeListFieldNumber;
const int mp_node::kLabFieldNumber;
#endif  // !_MSC_VER

mp_node::mp_node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_node::InitAsDefaultInstance() {
  base_ = const_cast< ::KPS::mp_item_base*>(&::KPS::mp_item_base::default_instance());
}

mp_node::mp_node(const mp_node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_node::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  lab_ = const_cast< ::std::string*>(&_default_lab_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_node::~mp_node() {
  SharedDtor();
}

void mp_node::SharedDtor() {
  if (lab_ != &_default_lab_) {
    delete lab_;
  }
  if (this != default_instance_) {
    delete base_;
  }
}

void mp_node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_node_descriptor_;
}

const mp_node& mp_node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();  return *default_instance_;
}

mp_node* mp_node::default_instance_ = NULL;

mp_node* mp_node::New() const {
  return new mp_node;
}

void mp_node::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (base_ != NULL) base_->::KPS::mp_item_base::Clear();
    }
    if (_has_bit(3)) {
      if (lab_ != &_default_lab_) {
        lab_->clear();
      }
    }
  }
  mp_ref_node_list_.Clear();
  mp_ref_edge_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KPS.mp_item_base base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mp_ref_node_list;
        break;
      }
      
      // repeated uint32 mp_ref_node_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp_ref_node_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_mp_ref_node_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mp_ref_node_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mp_ref_node_list;
        if (input->ExpectTag(24)) goto parse_mp_ref_edge_list;
        break;
      }
      
      // repeated uint32 mp_ref_edge_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp_ref_edge_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_mp_ref_edge_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mp_ref_edge_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mp_ref_edge_list;
        if (input->ExpectTag(34)) goto parse_lab;
        break;
      }
      
      // optional string lab = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lab:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lab()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lab().data(), this->lab().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KPS.mp_item_base base = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // repeated uint32 mp_ref_node_list = 2;
  for (int i = 0; i < this->mp_ref_node_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->mp_ref_node_list(i), output);
  }
  
  // repeated uint32 mp_ref_edge_list = 3;
  for (int i = 0; i < this->mp_ref_edge_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->mp_ref_edge_list(i), output);
  }
  
  // optional string lab = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lab().data(), this->lab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->lab(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KPS.mp_item_base base = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // repeated uint32 mp_ref_node_list = 2;
  for (int i = 0; i < this->mp_ref_node_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->mp_ref_node_list(i), target);
  }
  
  // repeated uint32 mp_ref_edge_list = 3;
  for (int i = 0; i < this->mp_ref_edge_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->mp_ref_edge_list(i), target);
  }
  
  // optional string lab = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lab().data(), this->lab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lab(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_node::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KPS.mp_item_base base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional string lab = 4;
    if (has_lab()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lab());
    }
    
  }
  // repeated uint32 mp_ref_node_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mp_ref_node_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mp_ref_node_list(i));
    }
    total_size += 1 * this->mp_ref_node_list_size() + data_size;
  }
  
  // repeated uint32 mp_ref_edge_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mp_ref_edge_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mp_ref_edge_list(i));
    }
    total_size += 1 * this->mp_ref_edge_list_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_node::MergeFrom(const mp_node& from) {
  GOOGLE_CHECK_NE(&from, this);
  mp_ref_node_list_.MergeFrom(from.mp_ref_node_list_);
  mp_ref_edge_list_.MergeFrom(from.mp_ref_edge_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_base()->::KPS::mp_item_base::MergeFrom(from.base());
    }
    if (from._has_bit(3)) {
      set_lab(from.lab());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_node::CopyFrom(const mp_node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void mp_node::Swap(mp_node* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    mp_ref_node_list_.Swap(&other->mp_ref_node_list_);
    mp_ref_edge_list_.Swap(&other->mp_ref_edge_list_);
    std::swap(lab_, other->lab_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_node_descriptor_;
  metadata.reflection = mp_node_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

// @@protoc_insertion_point(global_scope)

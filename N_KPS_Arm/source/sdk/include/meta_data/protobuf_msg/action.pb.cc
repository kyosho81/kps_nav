// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "action.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KPS {

namespace {

const ::google::protobuf::Descriptor* s_action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_action_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_action_2eproto() {
  protobuf_AddDesc_action_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "action.proto");
  GOOGLE_CHECK(file != NULL);
  s_action_descriptor_ = file->message_type(0);
  static const int s_action_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_action, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_action, action_type_nm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_action, action_name_para_),
  };
  s_action_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_action_descriptor_,
      s_action::default_instance_,
      s_action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_action, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_action, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_action));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_action_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_action_descriptor_, &s_action::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_action_2eproto() {
  delete s_action::default_instance_;
  delete s_action_reflection_;
}

void protobuf_AddDesc_action_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::KPS::protobuf_AddDesc_base_2eproto();
  ::KPS::protobuf_AddDesc_lab_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014action.proto\022\003KPS\032\nbase.proto\032\tlab.pro"
    "to\"]\n\010s_action\022\037\n\004base\030\001 \002(\0132\021.KPS.mp_it"
    "em_base\022\026\n\016action_type_nm\030\002 \002(\t\022\030\n\020actio"
    "n_name_para\030\003 \003(\t", 137);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "action.proto", &protobuf_RegisterTypes);
  s_action::default_instance_ = new s_action();
  s_action::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_action_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_action_2eproto {
  StaticDescriptorInitializer_action_2eproto() {
    protobuf_AddDesc_action_2eproto();
  }
} static_descriptor_initializer_action_2eproto_;


// ===================================================================

const ::std::string s_action::_default_action_type_nm_;
#ifndef _MSC_VER
const int s_action::kBaseFieldNumber;
const int s_action::kActionTypeNmFieldNumber;
const int s_action::kActionNameParaFieldNumber;
#endif  // !_MSC_VER

s_action::s_action()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_action::InitAsDefaultInstance() {
  base_ = const_cast< ::KPS::mp_item_base*>(&::KPS::mp_item_base::default_instance());
}

s_action::s_action(const s_action& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_action::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  action_type_nm_ = const_cast< ::std::string*>(&_default_action_type_nm_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_action::~s_action() {
  SharedDtor();
}

void s_action::SharedDtor() {
  if (action_type_nm_ != &_default_action_type_nm_) {
    delete action_type_nm_;
  }
  if (this != default_instance_) {
    delete base_;
  }
}

void s_action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_action_descriptor_;
}

const s_action& s_action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_action_2eproto();  return *default_instance_;
}

s_action* s_action::default_instance_ = NULL;

s_action* s_action::New() const {
  return new s_action;
}

void s_action::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (base_ != NULL) base_->::KPS::mp_item_base::Clear();
    }
    if (_has_bit(1)) {
      if (action_type_nm_ != &_default_action_type_nm_) {
        action_type_nm_->clear();
      }
    }
  }
  action_name_para_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KPS.mp_item_base base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_action_type_nm;
        break;
      }
      
      // required string action_type_nm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action_type_nm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_type_nm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action_type_nm().data(), this->action_type_nm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_action_name_para;
        break;
      }
      
      // repeated string action_name_para = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action_name_para:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_action_name_para()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action_name_para(0).data(), this->action_name_para(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_action_name_para;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KPS.mp_item_base base = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // required string action_type_nm = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_type_nm().data(), this->action_type_nm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->action_type_nm(), output);
  }
  
  // repeated string action_name_para = 3;
  for (int i = 0; i < this->action_name_para_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->action_name_para(i).data(), this->action_name_para(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->action_name_para(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_action::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KPS.mp_item_base base = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // required string action_type_nm = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_type_nm().data(), this->action_type_nm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->action_type_nm(), target);
  }
  
  // repeated string action_name_para = 3;
  for (int i = 0; i < this->action_name_para_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_name_para(i).data(), this->action_name_para(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->action_name_para(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_action::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KPS.mp_item_base base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // required string action_type_nm = 2;
    if (has_action_type_nm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action_type_nm());
    }
    
  }
  // repeated string action_name_para = 3;
  total_size += 1 * this->action_name_para_size();
  for (int i = 0; i < this->action_name_para_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->action_name_para(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_action::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_action* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_action*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_action::MergeFrom(const s_action& from) {
  GOOGLE_CHECK_NE(&from, this);
  action_name_para_.MergeFrom(from.action_name_para_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_base()->::KPS::mp_item_base::MergeFrom(from.base());
    }
    if (from._has_bit(1)) {
      set_action_type_nm(from.action_type_nm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_action::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_action::CopyFrom(const s_action& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_action::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void s_action::Swap(s_action* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(action_type_nm_, other->action_type_nm_);
    action_name_para_.Swap(&other->action_name_para_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_action_descriptor_;
  metadata.reflection = s_action_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pallet.proto

#ifndef PROTOBUF_pallet_2eproto__INCLUDED
#define PROTOBUF_pallet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "base.pb.h"
#include "cargo_type.pb.h"
#include "pallet_type.pb.h"
#include "pallet_cargo.pb.h"
// @@protoc_insertion_point(includes)

namespace KPS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pallet_2eproto();
void protobuf_AssignDesc_pallet_2eproto();
void protobuf_ShutdownFile_pallet_2eproto();

class mp_pallet;

// ===================================================================

class mp_pallet : public ::google::protobuf::Message {
 public:
  mp_pallet();
  virtual ~mp_pallet();
  
  mp_pallet(const mp_pallet& from);
  
  inline mp_pallet& operator=(const mp_pallet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mp_pallet& default_instance();
  
  void Swap(mp_pallet* other);
  
  // implements Message ----------------------------------------------
  
  mp_pallet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mp_pallet& from);
  void MergeFrom(const mp_pallet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .KPS.mp_item_base base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::KPS::mp_item_base& base() const;
  inline ::KPS::mp_item_base* mutable_base();
  
  // required string pallet_type_uuid = 2;
  inline bool has_pallet_type_uuid() const;
  inline void clear_pallet_type_uuid();
  static const int kPalletTypeUuidFieldNumber = 2;
  inline const ::std::string& pallet_type_uuid() const;
  inline void set_pallet_type_uuid(const ::std::string& value);
  inline void set_pallet_type_uuid(const char* value);
  inline void set_pallet_type_uuid(const char* value, size_t size);
  inline ::std::string* mutable_pallet_type_uuid();
  
  // optional .KPS.mp_pallet_cargo pallet_cargo = 3;
  inline bool has_pallet_cargo() const;
  inline void clear_pallet_cargo();
  static const int kPalletCargoFieldNumber = 3;
  inline const ::KPS::mp_pallet_cargo& pallet_cargo() const;
  inline ::KPS::mp_pallet_cargo* mutable_pallet_cargo();
  
  // optional bool full_ok = 4;
  inline bool has_full_ok() const;
  inline void clear_full_ok();
  static const int kFullOkFieldNumber = 4;
  inline bool full_ok() const;
  inline void set_full_ok(bool value);
  
  // optional bool empty_ok = 5;
  inline bool has_empty_ok() const;
  inline void clear_empty_ok();
  static const int kEmptyOkFieldNumber = 5;
  inline bool empty_ok() const;
  inline void set_empty_ok(bool value);
  
  // optional string cur_weight = 6;
  inline bool has_cur_weight() const;
  inline void clear_cur_weight();
  static const int kCurWeightFieldNumber = 6;
  inline const ::std::string& cur_weight() const;
  inline void set_cur_weight(const ::std::string& value);
  inline void set_cur_weight(const char* value);
  inline void set_cur_weight(const char* value, size_t size);
  inline ::std::string* mutable_cur_weight();
  
  // optional string cur_volume = 7;
  inline bool has_cur_volume() const;
  inline void clear_cur_volume();
  static const int kCurVolumeFieldNumber = 7;
  inline const ::std::string& cur_volume() const;
  inline void set_cur_volume(const ::std::string& value);
  inline void set_cur_volume(const char* value);
  inline void set_cur_volume(const char* value, size_t size);
  inline ::std::string* mutable_cur_volume();
  
  // @@protoc_insertion_point(class_scope:KPS.mp_pallet)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::KPS::mp_item_base* base_;
  ::std::string* pallet_type_uuid_;
  static const ::std::string _default_pallet_type_uuid_;
  ::KPS::mp_pallet_cargo* pallet_cargo_;
  bool full_ok_;
  bool empty_ok_;
  ::std::string* cur_weight_;
  static const ::std::string _default_cur_weight_;
  ::std::string* cur_volume_;
  static const ::std::string _default_cur_volume_;
  friend void  protobuf_AddDesc_pallet_2eproto();
  friend void protobuf_AssignDesc_pallet_2eproto();
  friend void protobuf_ShutdownFile_pallet_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static mp_pallet* default_instance_;
};
// ===================================================================


// ===================================================================

// mp_pallet

// required .KPS.mp_item_base base = 1;
inline bool mp_pallet::has_base() const {
  return _has_bit(0);
}
inline void mp_pallet::clear_base() {
  if (base_ != NULL) base_->::KPS::mp_item_base::Clear();
  _clear_bit(0);
}
inline const ::KPS::mp_item_base& mp_pallet::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::KPS::mp_item_base* mp_pallet::mutable_base() {
  _set_bit(0);
  if (base_ == NULL) base_ = new ::KPS::mp_item_base;
  return base_;
}

// required string pallet_type_uuid = 2;
inline bool mp_pallet::has_pallet_type_uuid() const {
  return _has_bit(1);
}
inline void mp_pallet::clear_pallet_type_uuid() {
  if (pallet_type_uuid_ != &_default_pallet_type_uuid_) {
    pallet_type_uuid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& mp_pallet::pallet_type_uuid() const {
  return *pallet_type_uuid_;
}
inline void mp_pallet::set_pallet_type_uuid(const ::std::string& value) {
  _set_bit(1);
  if (pallet_type_uuid_ == &_default_pallet_type_uuid_) {
    pallet_type_uuid_ = new ::std::string;
  }
  pallet_type_uuid_->assign(value);
}
inline void mp_pallet::set_pallet_type_uuid(const char* value) {
  _set_bit(1);
  if (pallet_type_uuid_ == &_default_pallet_type_uuid_) {
    pallet_type_uuid_ = new ::std::string;
  }
  pallet_type_uuid_->assign(value);
}
inline void mp_pallet::set_pallet_type_uuid(const char* value, size_t size) {
  _set_bit(1);
  if (pallet_type_uuid_ == &_default_pallet_type_uuid_) {
    pallet_type_uuid_ = new ::std::string;
  }
  pallet_type_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mp_pallet::mutable_pallet_type_uuid() {
  _set_bit(1);
  if (pallet_type_uuid_ == &_default_pallet_type_uuid_) {
    pallet_type_uuid_ = new ::std::string;
  }
  return pallet_type_uuid_;
}

// optional .KPS.mp_pallet_cargo pallet_cargo = 3;
inline bool mp_pallet::has_pallet_cargo() const {
  return _has_bit(2);
}
inline void mp_pallet::clear_pallet_cargo() {
  if (pallet_cargo_ != NULL) pallet_cargo_->::KPS::mp_pallet_cargo::Clear();
  _clear_bit(2);
}
inline const ::KPS::mp_pallet_cargo& mp_pallet::pallet_cargo() const {
  return pallet_cargo_ != NULL ? *pallet_cargo_ : *default_instance_->pallet_cargo_;
}
inline ::KPS::mp_pallet_cargo* mp_pallet::mutable_pallet_cargo() {
  _set_bit(2);
  if (pallet_cargo_ == NULL) pallet_cargo_ = new ::KPS::mp_pallet_cargo;
  return pallet_cargo_;
}

// optional bool full_ok = 4;
inline bool mp_pallet::has_full_ok() const {
  return _has_bit(3);
}
inline void mp_pallet::clear_full_ok() {
  full_ok_ = false;
  _clear_bit(3);
}
inline bool mp_pallet::full_ok() const {
  return full_ok_;
}
inline void mp_pallet::set_full_ok(bool value) {
  _set_bit(3);
  full_ok_ = value;
}

// optional bool empty_ok = 5;
inline bool mp_pallet::has_empty_ok() const {
  return _has_bit(4);
}
inline void mp_pallet::clear_empty_ok() {
  empty_ok_ = false;
  _clear_bit(4);
}
inline bool mp_pallet::empty_ok() const {
  return empty_ok_;
}
inline void mp_pallet::set_empty_ok(bool value) {
  _set_bit(4);
  empty_ok_ = value;
}

// optional string cur_weight = 6;
inline bool mp_pallet::has_cur_weight() const {
  return _has_bit(5);
}
inline void mp_pallet::clear_cur_weight() {
  if (cur_weight_ != &_default_cur_weight_) {
    cur_weight_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& mp_pallet::cur_weight() const {
  return *cur_weight_;
}
inline void mp_pallet::set_cur_weight(const ::std::string& value) {
  _set_bit(5);
  if (cur_weight_ == &_default_cur_weight_) {
    cur_weight_ = new ::std::string;
  }
  cur_weight_->assign(value);
}
inline void mp_pallet::set_cur_weight(const char* value) {
  _set_bit(5);
  if (cur_weight_ == &_default_cur_weight_) {
    cur_weight_ = new ::std::string;
  }
  cur_weight_->assign(value);
}
inline void mp_pallet::set_cur_weight(const char* value, size_t size) {
  _set_bit(5);
  if (cur_weight_ == &_default_cur_weight_) {
    cur_weight_ = new ::std::string;
  }
  cur_weight_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mp_pallet::mutable_cur_weight() {
  _set_bit(5);
  if (cur_weight_ == &_default_cur_weight_) {
    cur_weight_ = new ::std::string;
  }
  return cur_weight_;
}

// optional string cur_volume = 7;
inline bool mp_pallet::has_cur_volume() const {
  return _has_bit(6);
}
inline void mp_pallet::clear_cur_volume() {
  if (cur_volume_ != &_default_cur_volume_) {
    cur_volume_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& mp_pallet::cur_volume() const {
  return *cur_volume_;
}
inline void mp_pallet::set_cur_volume(const ::std::string& value) {
  _set_bit(6);
  if (cur_volume_ == &_default_cur_volume_) {
    cur_volume_ = new ::std::string;
  }
  cur_volume_->assign(value);
}
inline void mp_pallet::set_cur_volume(const char* value) {
  _set_bit(6);
  if (cur_volume_ == &_default_cur_volume_) {
    cur_volume_ = new ::std::string;
  }
  cur_volume_->assign(value);
}
inline void mp_pallet::set_cur_volume(const char* value, size_t size) {
  _set_bit(6);
  if (cur_volume_ == &_default_cur_volume_) {
    cur_volume_ = new ::std::string;
  }
  cur_volume_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mp_pallet::mutable_cur_volume() {
  _set_bit(6);
  if (cur_volume_ == &_default_cur_volume_) {
    cur_volume_ = new ::std::string;
  }
  return cur_volume_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pallet_2eproto__INCLUDED

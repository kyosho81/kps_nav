// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_bag.proto

#ifndef PROTOBUF_log_5fbag_2eproto__INCLUDED
#define PROTOBUF_log_5fbag_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "laser.pb.h"
#include "base.pb.h"
// @@protoc_insertion_point(includes)

namespace KPS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_log_5fbag_2eproto();
void protobuf_AssignDesc_log_5fbag_2eproto();
void protobuf_ShutdownFile_log_5fbag_2eproto();

class ml_log_laser;
class ml_log_odom;
class ml_log_amcl;
class mb_log_bag;

// ===================================================================

class ml_log_laser : public ::google::protobuf::Message {
 public:
  ml_log_laser();
  virtual ~ml_log_laser();
  
  ml_log_laser(const ml_log_laser& from);
  
  inline ml_log_laser& operator=(const ml_log_laser& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ml_log_laser& default_instance();
  
  void Swap(ml_log_laser* other);
  
  // implements Message ----------------------------------------------
  
  ml_log_laser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ml_log_laser& from);
  void MergeFrom(const ml_log_laser& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 time_stamp = 1;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  inline ::google::protobuf::uint64 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint64 value);
  
  // required .KPS.mp_laser_data laser_data = 2;
  inline bool has_laser_data() const;
  inline void clear_laser_data();
  static const int kLaserDataFieldNumber = 2;
  inline const ::KPS::mp_laser_data& laser_data() const;
  inline ::KPS::mp_laser_data* mutable_laser_data();
  
  // @@protoc_insertion_point(class_scope:KPS.ml_log_laser)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 time_stamp_;
  ::KPS::mp_laser_data* laser_data_;
  friend void  protobuf_AddDesc_log_5fbag_2eproto();
  friend void protobuf_AssignDesc_log_5fbag_2eproto();
  friend void protobuf_ShutdownFile_log_5fbag_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ml_log_laser* default_instance_;
};
// -------------------------------------------------------------------

class ml_log_odom : public ::google::protobuf::Message {
 public:
  ml_log_odom();
  virtual ~ml_log_odom();
  
  ml_log_odom(const ml_log_odom& from);
  
  inline ml_log_odom& operator=(const ml_log_odom& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ml_log_odom& default_instance();
  
  void Swap(ml_log_odom* other);
  
  // implements Message ----------------------------------------------
  
  ml_log_odom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ml_log_odom& from);
  void MergeFrom(const ml_log_odom& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 time_stamp = 1;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  inline ::google::protobuf::uint64 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint64 value);
  
  // required .KPS.mp_odom_data odom = 2;
  inline bool has_odom() const;
  inline void clear_odom();
  static const int kOdomFieldNumber = 2;
  inline const ::KPS::mp_odom_data& odom() const;
  inline ::KPS::mp_odom_data* mutable_odom();
  
  // @@protoc_insertion_point(class_scope:KPS.ml_log_odom)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 time_stamp_;
  ::KPS::mp_odom_data* odom_;
  friend void  protobuf_AddDesc_log_5fbag_2eproto();
  friend void protobuf_AssignDesc_log_5fbag_2eproto();
  friend void protobuf_ShutdownFile_log_5fbag_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ml_log_odom* default_instance_;
};
// -------------------------------------------------------------------

class ml_log_amcl : public ::google::protobuf::Message {
 public:
  ml_log_amcl();
  virtual ~ml_log_amcl();
  
  ml_log_amcl(const ml_log_amcl& from);
  
  inline ml_log_amcl& operator=(const ml_log_amcl& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ml_log_amcl& default_instance();
  
  void Swap(ml_log_amcl* other);
  
  // implements Message ----------------------------------------------
  
  ml_log_amcl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ml_log_amcl& from);
  void MergeFrom(const ml_log_amcl& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 time_stamp = 1;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 1;
  inline ::google::protobuf::uint64 time_stamp() const;
  inline void set_time_stamp(::google::protobuf::uint64 value);
  
  // required .KPS.mp_pos_data amcl_pos = 2;
  inline bool has_amcl_pos() const;
  inline void clear_amcl_pos();
  static const int kAmclPosFieldNumber = 2;
  inline const ::KPS::mp_pos_data& amcl_pos() const;
  inline ::KPS::mp_pos_data* mutable_amcl_pos();
  
  // @@protoc_insertion_point(class_scope:KPS.ml_log_amcl)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 time_stamp_;
  ::KPS::mp_pos_data* amcl_pos_;
  friend void  protobuf_AddDesc_log_5fbag_2eproto();
  friend void protobuf_AssignDesc_log_5fbag_2eproto();
  friend void protobuf_ShutdownFile_log_5fbag_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ml_log_amcl* default_instance_;
};
// -------------------------------------------------------------------

class mb_log_bag : public ::google::protobuf::Message {
 public:
  mb_log_bag();
  virtual ~mb_log_bag();
  
  mb_log_bag(const mb_log_bag& from);
  
  inline mb_log_bag& operator=(const mb_log_bag& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mb_log_bag& default_instance();
  
  void Swap(mb_log_bag* other);
  
  // implements Message ----------------------------------------------
  
  mb_log_bag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mb_log_bag& from);
  void MergeFrom(const mb_log_bag& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 time_stamp_begin = 1;
  inline bool has_time_stamp_begin() const;
  inline void clear_time_stamp_begin();
  static const int kTimeStampBeginFieldNumber = 1;
  inline ::google::protobuf::uint64 time_stamp_begin() const;
  inline void set_time_stamp_begin(::google::protobuf::uint64 value);
  
  // required uint64 time_stamp_end = 2;
  inline bool has_time_stamp_end() const;
  inline void clear_time_stamp_end();
  static const int kTimeStampEndFieldNumber = 2;
  inline ::google::protobuf::uint64 time_stamp_end() const;
  inline void set_time_stamp_end(::google::protobuf::uint64 value);
  
  // required string time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  
  // required string robot_shape = 4;
  inline bool has_robot_shape() const;
  inline void clear_robot_shape();
  static const int kRobotShapeFieldNumber = 4;
  inline const ::std::string& robot_shape() const;
  inline void set_robot_shape(const ::std::string& value);
  inline void set_robot_shape(const char* value);
  inline void set_robot_shape(const char* value, size_t size);
  inline ::std::string* mutable_robot_shape();
  
  // required .KPS.mp_laser_para laser_para = 5;
  inline bool has_laser_para() const;
  inline void clear_laser_para();
  static const int kLaserParaFieldNumber = 5;
  inline const ::KPS::mp_laser_para& laser_para() const;
  inline ::KPS::mp_laser_para* mutable_laser_para();
  
  // repeated .KPS.ml_log_laser laser_list = 6;
  inline int laser_list_size() const;
  inline void clear_laser_list();
  static const int kLaserListFieldNumber = 6;
  inline const ::KPS::ml_log_laser& laser_list(int index) const;
  inline ::KPS::ml_log_laser* mutable_laser_list(int index);
  inline ::KPS::ml_log_laser* add_laser_list();
  inline const ::google::protobuf::RepeatedPtrField< ::KPS::ml_log_laser >&
      laser_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::KPS::ml_log_laser >*
      mutable_laser_list();
  
  // repeated .KPS.ml_log_odom odom_list = 7;
  inline int odom_list_size() const;
  inline void clear_odom_list();
  static const int kOdomListFieldNumber = 7;
  inline const ::KPS::ml_log_odom& odom_list(int index) const;
  inline ::KPS::ml_log_odom* mutable_odom_list(int index);
  inline ::KPS::ml_log_odom* add_odom_list();
  inline const ::google::protobuf::RepeatedPtrField< ::KPS::ml_log_odom >&
      odom_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::KPS::ml_log_odom >*
      mutable_odom_list();
  
  // repeated .KPS.ml_log_amcl amcl_list = 8;
  inline int amcl_list_size() const;
  inline void clear_amcl_list();
  static const int kAmclListFieldNumber = 8;
  inline const ::KPS::ml_log_amcl& amcl_list(int index) const;
  inline ::KPS::ml_log_amcl* mutable_amcl_list(int index);
  inline ::KPS::ml_log_amcl* add_amcl_list();
  inline const ::google::protobuf::RepeatedPtrField< ::KPS::ml_log_amcl >&
      amcl_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::KPS::ml_log_amcl >*
      mutable_amcl_list();
  
  // @@protoc_insertion_point(class_scope:KPS.mb_log_bag)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 time_stamp_begin_;
  ::google::protobuf::uint64 time_stamp_end_;
  ::std::string* time_;
  static const ::std::string _default_time_;
  ::std::string* robot_shape_;
  static const ::std::string _default_robot_shape_;
  ::KPS::mp_laser_para* laser_para_;
  ::google::protobuf::RepeatedPtrField< ::KPS::ml_log_laser > laser_list_;
  ::google::protobuf::RepeatedPtrField< ::KPS::ml_log_odom > odom_list_;
  ::google::protobuf::RepeatedPtrField< ::KPS::ml_log_amcl > amcl_list_;
  friend void  protobuf_AddDesc_log_5fbag_2eproto();
  friend void protobuf_AssignDesc_log_5fbag_2eproto();
  friend void protobuf_ShutdownFile_log_5fbag_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static mb_log_bag* default_instance_;
};
// ===================================================================


// ===================================================================

// ml_log_laser

// required uint64 time_stamp = 1;
inline bool ml_log_laser::has_time_stamp() const {
  return _has_bit(0);
}
inline void ml_log_laser::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 ml_log_laser::time_stamp() const {
  return time_stamp_;
}
inline void ml_log_laser::set_time_stamp(::google::protobuf::uint64 value) {
  _set_bit(0);
  time_stamp_ = value;
}

// required .KPS.mp_laser_data laser_data = 2;
inline bool ml_log_laser::has_laser_data() const {
  return _has_bit(1);
}
inline void ml_log_laser::clear_laser_data() {
  if (laser_data_ != NULL) laser_data_->::KPS::mp_laser_data::Clear();
  _clear_bit(1);
}
inline const ::KPS::mp_laser_data& ml_log_laser::laser_data() const {
  return laser_data_ != NULL ? *laser_data_ : *default_instance_->laser_data_;
}
inline ::KPS::mp_laser_data* ml_log_laser::mutable_laser_data() {
  _set_bit(1);
  if (laser_data_ == NULL) laser_data_ = new ::KPS::mp_laser_data;
  return laser_data_;
}

// -------------------------------------------------------------------

// ml_log_odom

// required uint64 time_stamp = 1;
inline bool ml_log_odom::has_time_stamp() const {
  return _has_bit(0);
}
inline void ml_log_odom::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 ml_log_odom::time_stamp() const {
  return time_stamp_;
}
inline void ml_log_odom::set_time_stamp(::google::protobuf::uint64 value) {
  _set_bit(0);
  time_stamp_ = value;
}

// required .KPS.mp_odom_data odom = 2;
inline bool ml_log_odom::has_odom() const {
  return _has_bit(1);
}
inline void ml_log_odom::clear_odom() {
  if (odom_ != NULL) odom_->::KPS::mp_odom_data::Clear();
  _clear_bit(1);
}
inline const ::KPS::mp_odom_data& ml_log_odom::odom() const {
  return odom_ != NULL ? *odom_ : *default_instance_->odom_;
}
inline ::KPS::mp_odom_data* ml_log_odom::mutable_odom() {
  _set_bit(1);
  if (odom_ == NULL) odom_ = new ::KPS::mp_odom_data;
  return odom_;
}

// -------------------------------------------------------------------

// ml_log_amcl

// required uint64 time_stamp = 1;
inline bool ml_log_amcl::has_time_stamp() const {
  return _has_bit(0);
}
inline void ml_log_amcl::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 ml_log_amcl::time_stamp() const {
  return time_stamp_;
}
inline void ml_log_amcl::set_time_stamp(::google::protobuf::uint64 value) {
  _set_bit(0);
  time_stamp_ = value;
}

// required .KPS.mp_pos_data amcl_pos = 2;
inline bool ml_log_amcl::has_amcl_pos() const {
  return _has_bit(1);
}
inline void ml_log_amcl::clear_amcl_pos() {
  if (amcl_pos_ != NULL) amcl_pos_->::KPS::mp_pos_data::Clear();
  _clear_bit(1);
}
inline const ::KPS::mp_pos_data& ml_log_amcl::amcl_pos() const {
  return amcl_pos_ != NULL ? *amcl_pos_ : *default_instance_->amcl_pos_;
}
inline ::KPS::mp_pos_data* ml_log_amcl::mutable_amcl_pos() {
  _set_bit(1);
  if (amcl_pos_ == NULL) amcl_pos_ = new ::KPS::mp_pos_data;
  return amcl_pos_;
}

// -------------------------------------------------------------------

// mb_log_bag

// required uint64 time_stamp_begin = 1;
inline bool mb_log_bag::has_time_stamp_begin() const {
  return _has_bit(0);
}
inline void mb_log_bag::clear_time_stamp_begin() {
  time_stamp_begin_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 mb_log_bag::time_stamp_begin() const {
  return time_stamp_begin_;
}
inline void mb_log_bag::set_time_stamp_begin(::google::protobuf::uint64 value) {
  _set_bit(0);
  time_stamp_begin_ = value;
}

// required uint64 time_stamp_end = 2;
inline bool mb_log_bag::has_time_stamp_end() const {
  return _has_bit(1);
}
inline void mb_log_bag::clear_time_stamp_end() {
  time_stamp_end_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 mb_log_bag::time_stamp_end() const {
  return time_stamp_end_;
}
inline void mb_log_bag::set_time_stamp_end(::google::protobuf::uint64 value) {
  _set_bit(1);
  time_stamp_end_ = value;
}

// required string time = 3;
inline bool mb_log_bag::has_time() const {
  return _has_bit(2);
}
inline void mb_log_bag::clear_time() {
  if (time_ != &_default_time_) {
    time_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& mb_log_bag::time() const {
  return *time_;
}
inline void mb_log_bag::set_time(const ::std::string& value) {
  _set_bit(2);
  if (time_ == &_default_time_) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void mb_log_bag::set_time(const char* value) {
  _set_bit(2);
  if (time_ == &_default_time_) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void mb_log_bag::set_time(const char* value, size_t size) {
  _set_bit(2);
  if (time_ == &_default_time_) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mb_log_bag::mutable_time() {
  _set_bit(2);
  if (time_ == &_default_time_) {
    time_ = new ::std::string;
  }
  return time_;
}

// required string robot_shape = 4;
inline bool mb_log_bag::has_robot_shape() const {
  return _has_bit(3);
}
inline void mb_log_bag::clear_robot_shape() {
  if (robot_shape_ != &_default_robot_shape_) {
    robot_shape_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& mb_log_bag::robot_shape() const {
  return *robot_shape_;
}
inline void mb_log_bag::set_robot_shape(const ::std::string& value) {
  _set_bit(3);
  if (robot_shape_ == &_default_robot_shape_) {
    robot_shape_ = new ::std::string;
  }
  robot_shape_->assign(value);
}
inline void mb_log_bag::set_robot_shape(const char* value) {
  _set_bit(3);
  if (robot_shape_ == &_default_robot_shape_) {
    robot_shape_ = new ::std::string;
  }
  robot_shape_->assign(value);
}
inline void mb_log_bag::set_robot_shape(const char* value, size_t size) {
  _set_bit(3);
  if (robot_shape_ == &_default_robot_shape_) {
    robot_shape_ = new ::std::string;
  }
  robot_shape_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mb_log_bag::mutable_robot_shape() {
  _set_bit(3);
  if (robot_shape_ == &_default_robot_shape_) {
    robot_shape_ = new ::std::string;
  }
  return robot_shape_;
}

// required .KPS.mp_laser_para laser_para = 5;
inline bool mb_log_bag::has_laser_para() const {
  return _has_bit(4);
}
inline void mb_log_bag::clear_laser_para() {
  if (laser_para_ != NULL) laser_para_->::KPS::mp_laser_para::Clear();
  _clear_bit(4);
}
inline const ::KPS::mp_laser_para& mb_log_bag::laser_para() const {
  return laser_para_ != NULL ? *laser_para_ : *default_instance_->laser_para_;
}
inline ::KPS::mp_laser_para* mb_log_bag::mutable_laser_para() {
  _set_bit(4);
  if (laser_para_ == NULL) laser_para_ = new ::KPS::mp_laser_para;
  return laser_para_;
}

// repeated .KPS.ml_log_laser laser_list = 6;
inline int mb_log_bag::laser_list_size() const {
  return laser_list_.size();
}
inline void mb_log_bag::clear_laser_list() {
  laser_list_.Clear();
}
inline const ::KPS::ml_log_laser& mb_log_bag::laser_list(int index) const {
  return laser_list_.Get(index);
}
inline ::KPS::ml_log_laser* mb_log_bag::mutable_laser_list(int index) {
  return laser_list_.Mutable(index);
}
inline ::KPS::ml_log_laser* mb_log_bag::add_laser_list() {
  return laser_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KPS::ml_log_laser >&
mb_log_bag::laser_list() const {
  return laser_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::KPS::ml_log_laser >*
mb_log_bag::mutable_laser_list() {
  return &laser_list_;
}

// repeated .KPS.ml_log_odom odom_list = 7;
inline int mb_log_bag::odom_list_size() const {
  return odom_list_.size();
}
inline void mb_log_bag::clear_odom_list() {
  odom_list_.Clear();
}
inline const ::KPS::ml_log_odom& mb_log_bag::odom_list(int index) const {
  return odom_list_.Get(index);
}
inline ::KPS::ml_log_odom* mb_log_bag::mutable_odom_list(int index) {
  return odom_list_.Mutable(index);
}
inline ::KPS::ml_log_odom* mb_log_bag::add_odom_list() {
  return odom_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KPS::ml_log_odom >&
mb_log_bag::odom_list() const {
  return odom_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::KPS::ml_log_odom >*
mb_log_bag::mutable_odom_list() {
  return &odom_list_;
}

// repeated .KPS.ml_log_amcl amcl_list = 8;
inline int mb_log_bag::amcl_list_size() const {
  return amcl_list_.size();
}
inline void mb_log_bag::clear_amcl_list() {
  amcl_list_.Clear();
}
inline const ::KPS::ml_log_amcl& mb_log_bag::amcl_list(int index) const {
  return amcl_list_.Get(index);
}
inline ::KPS::ml_log_amcl* mb_log_bag::mutable_amcl_list(int index) {
  return amcl_list_.Mutable(index);
}
inline ::KPS::ml_log_amcl* mb_log_bag::add_amcl_list() {
  return amcl_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KPS::ml_log_amcl >&
mb_log_bag::amcl_list() const {
  return amcl_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::KPS::ml_log_amcl >*
mb_log_bag::mutable_amcl_list() {
  return &amcl_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_log_5fbag_2eproto__INCLUDED

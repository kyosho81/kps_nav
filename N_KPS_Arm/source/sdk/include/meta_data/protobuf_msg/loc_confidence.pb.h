// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loc_confidence.proto

#ifndef PROTOBUF_loc_5fconfidence_2eproto__INCLUDED
#define PROTOBUF_loc_5fconfidence_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace KPS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_loc_5fconfidence_2eproto();
void protobuf_AssignDesc_loc_5fconfidence_2eproto();
void protobuf_ShutdownFile_loc_5fconfidence_2eproto();

class mp_loc_confidence;

// ===================================================================

class mp_loc_confidence : public ::google::protobuf::Message {
 public:
  mp_loc_confidence();
  virtual ~mp_loc_confidence();
  
  mp_loc_confidence(const mp_loc_confidence& from);
  
  inline mp_loc_confidence& operator=(const mp_loc_confidence& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mp_loc_confidence& default_instance();
  
  void Swap(mp_loc_confidence* other);
  
  // implements Message ----------------------------------------------
  
  mp_loc_confidence* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mp_loc_confidence& from);
  void MergeFrom(const mp_loc_confidence& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool b_amcl_conf = 1;
  inline bool has_b_amcl_conf() const;
  inline void clear_b_amcl_conf();
  static const int kBAmclConfFieldNumber = 1;
  inline bool b_amcl_conf() const;
  inline void set_b_amcl_conf(bool value);
  
  // required float amcl_conf = 2;
  inline bool has_amcl_conf() const;
  inline void clear_amcl_conf();
  static const int kAmclConfFieldNumber = 2;
  inline float amcl_conf() const;
  inline void set_amcl_conf(float value);
  
  // required bool b_amcl_entropy = 3;
  inline bool has_b_amcl_entropy() const;
  inline void clear_b_amcl_entropy();
  static const int kBAmclEntropyFieldNumber = 3;
  inline bool b_amcl_entropy() const;
  inline void set_b_amcl_entropy(bool value);
  
  // required float amcl_xy_entropy = 4;
  inline bool has_amcl_xy_entropy() const;
  inline void clear_amcl_xy_entropy();
  static const int kAmclXyEntropyFieldNumber = 4;
  inline float amcl_xy_entropy() const;
  inline void set_amcl_xy_entropy(float value);
  
  // required float amcl_theta_entropy = 5;
  inline bool has_amcl_theta_entropy() const;
  inline void clear_amcl_theta_entropy();
  static const int kAmclThetaEntropyFieldNumber = 5;
  inline float amcl_theta_entropy() const;
  inline void set_amcl_theta_entropy(float value);
  
  // required float amcl_entropy = 6;
  inline bool has_amcl_entropy() const;
  inline void clear_amcl_entropy();
  static const int kAmclEntropyFieldNumber = 6;
  inline float amcl_entropy() const;
  inline void set_amcl_entropy(float value);
  
  // @@protoc_insertion_point(class_scope:KPS.mp_loc_confidence)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool b_amcl_conf_;
  float amcl_conf_;
  bool b_amcl_entropy_;
  float amcl_xy_entropy_;
  float amcl_theta_entropy_;
  float amcl_entropy_;
  friend void  protobuf_AddDesc_loc_5fconfidence_2eproto();
  friend void protobuf_AssignDesc_loc_5fconfidence_2eproto();
  friend void protobuf_ShutdownFile_loc_5fconfidence_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static mp_loc_confidence* default_instance_;
};
// ===================================================================


// ===================================================================

// mp_loc_confidence

// required bool b_amcl_conf = 1;
inline bool mp_loc_confidence::has_b_amcl_conf() const {
  return _has_bit(0);
}
inline void mp_loc_confidence::clear_b_amcl_conf() {
  b_amcl_conf_ = false;
  _clear_bit(0);
}
inline bool mp_loc_confidence::b_amcl_conf() const {
  return b_amcl_conf_;
}
inline void mp_loc_confidence::set_b_amcl_conf(bool value) {
  _set_bit(0);
  b_amcl_conf_ = value;
}

// required float amcl_conf = 2;
inline bool mp_loc_confidence::has_amcl_conf() const {
  return _has_bit(1);
}
inline void mp_loc_confidence::clear_amcl_conf() {
  amcl_conf_ = 0;
  _clear_bit(1);
}
inline float mp_loc_confidence::amcl_conf() const {
  return amcl_conf_;
}
inline void mp_loc_confidence::set_amcl_conf(float value) {
  _set_bit(1);
  amcl_conf_ = value;
}

// required bool b_amcl_entropy = 3;
inline bool mp_loc_confidence::has_b_amcl_entropy() const {
  return _has_bit(2);
}
inline void mp_loc_confidence::clear_b_amcl_entropy() {
  b_amcl_entropy_ = false;
  _clear_bit(2);
}
inline bool mp_loc_confidence::b_amcl_entropy() const {
  return b_amcl_entropy_;
}
inline void mp_loc_confidence::set_b_amcl_entropy(bool value) {
  _set_bit(2);
  b_amcl_entropy_ = value;
}

// required float amcl_xy_entropy = 4;
inline bool mp_loc_confidence::has_amcl_xy_entropy() const {
  return _has_bit(3);
}
inline void mp_loc_confidence::clear_amcl_xy_entropy() {
  amcl_xy_entropy_ = 0;
  _clear_bit(3);
}
inline float mp_loc_confidence::amcl_xy_entropy() const {
  return amcl_xy_entropy_;
}
inline void mp_loc_confidence::set_amcl_xy_entropy(float value) {
  _set_bit(3);
  amcl_xy_entropy_ = value;
}

// required float amcl_theta_entropy = 5;
inline bool mp_loc_confidence::has_amcl_theta_entropy() const {
  return _has_bit(4);
}
inline void mp_loc_confidence::clear_amcl_theta_entropy() {
  amcl_theta_entropy_ = 0;
  _clear_bit(4);
}
inline float mp_loc_confidence::amcl_theta_entropy() const {
  return amcl_theta_entropy_;
}
inline void mp_loc_confidence::set_amcl_theta_entropy(float value) {
  _set_bit(4);
  amcl_theta_entropy_ = value;
}

// required float amcl_entropy = 6;
inline bool mp_loc_confidence::has_amcl_entropy() const {
  return _has_bit(5);
}
inline void mp_loc_confidence::clear_amcl_entropy() {
  amcl_entropy_ = 0;
  _clear_bit(5);
}
inline float mp_loc_confidence::amcl_entropy() const {
  return amcl_entropy_;
}
inline void mp_loc_confidence::set_amcl_entropy(float value) {
  _set_bit(5);
  amcl_entropy_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_loc_5fconfidence_2eproto__INCLUDED

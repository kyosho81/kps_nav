// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KPS {

namespace {

const ::google::protobuf::Descriptor* mp_odom_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_odom_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* mp_pos_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_pos_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* mp_vec_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_vec_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* mp_schedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_schedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* mp_bind_action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_bind_action_reflection_ = NULL;
const ::google::protobuf::Descriptor* mp_bind_io_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_bind_io_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* mp_bind_io_Bind_IO_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* mp_item_base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_item_base_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_2eproto() {
  protobuf_AddDesc_base_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base.proto");
  GOOGLE_CHECK(file != NULL);
  mp_odom_data_descriptor_ = file->message_type(0);
  static const int mp_odom_data_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_odom_data, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_odom_data, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_odom_data, th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_odom_data, vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_odom_data, vy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_odom_data, vw_),
  };
  mp_odom_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_odom_data_descriptor_,
      mp_odom_data::default_instance_,
      mp_odom_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_odom_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_odom_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_odom_data));
  mp_pos_data_descriptor_ = file->message_type(1);
  static const int mp_pos_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pos_data, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pos_data, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pos_data, th_),
  };
  mp_pos_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_pos_data_descriptor_,
      mp_pos_data::default_instance_,
      mp_pos_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pos_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pos_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_pos_data));
  mp_vec_data_descriptor_ = file->message_type(2);
  static const int mp_vec_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_vec_data, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_vec_data, y_),
  };
  mp_vec_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_vec_data_descriptor_,
      mp_vec_data::default_instance_,
      mp_vec_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_vec_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_vec_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_vec_data));
  mp_schedule_descriptor_ = file->message_type(3);
  static const int mp_schedule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_schedule, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_schedule, sch_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_schedule, pallet_cargo_),
  };
  mp_schedule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_schedule_descriptor_,
      mp_schedule::default_instance_,
      mp_schedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_schedule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_schedule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_schedule));
  mp_bind_action_descriptor_ = file->message_type(4);
  static const int mp_bind_action_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_action, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_action, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_action, turn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_action, passing_bay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_action, task_replan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_action, task_flow_nm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_action, task_flow_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_action, action_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_action, get_put_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_action, mv_seg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_action, action_type_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_action, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_action, node_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_action, trigger_para_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_action, action_para_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_action, describe_),
  };
  mp_bind_action_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_bind_action_descriptor_,
      mp_bind_action::default_instance_,
      mp_bind_action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_action, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_action, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_bind_action));
  mp_bind_io_descriptor_ = file->message_type(5);
  static const int mp_bind_io_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_io, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_io, io_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_io, id_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_io, para_),
  };
  mp_bind_io_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_bind_io_descriptor_,
      mp_bind_io::default_instance_,
      mp_bind_io_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_io, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bind_io, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_bind_io));
  mp_bind_io_Bind_IO_Type_descriptor_ = mp_bind_io_descriptor_->enum_type(0);
  mp_item_base_descriptor_ = file->message_type(6);
  static const int mp_item_base_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, bind_actions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, bind_io_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, pallet_cargo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, creation_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, destruction_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, cmd_his_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, describe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, bind_node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, ori_rotate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, pallet_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, row_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, col_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, level_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, para_),
  };
  mp_item_base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_item_base_descriptor_,
      mp_item_base::default_instance_,
      mp_item_base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_item_base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_item_base));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_odom_data_descriptor_, &mp_odom_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_pos_data_descriptor_, &mp_pos_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_vec_data_descriptor_, &mp_vec_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_schedule_descriptor_, &mp_schedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_bind_action_descriptor_, &mp_bind_action::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_bind_io_descriptor_, &mp_bind_io::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_item_base_descriptor_, &mp_item_base::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_2eproto() {
  delete mp_odom_data::default_instance_;
  delete mp_odom_data_reflection_;
  delete mp_pos_data::default_instance_;
  delete mp_pos_data_reflection_;
  delete mp_vec_data::default_instance_;
  delete mp_vec_data_reflection_;
  delete mp_schedule::default_instance_;
  delete mp_schedule_reflection_;
  delete mp_bind_action::default_instance_;
  delete mp_bind_action_reflection_;
  delete mp_bind_io::default_instance_;
  delete mp_bind_io_reflection_;
  delete mp_item_base::default_instance_;
  delete mp_item_base_reflection_;
}

void protobuf_AddDesc_base_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::KPS::protobuf_AddDesc_pallet_5fcargo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nbase.proto\022\003KPS\032\022pallet_cargo.proto\"T\n"
    "\014mp_odom_data\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\n\n\002t"
    "h\030\003 \002(\002\022\n\n\002vx\030\004 \002(\002\022\n\n\002vy\030\005 \002(\002\022\n\n\002vw\030\006 "
    "\002(\002\"/\n\013mp_pos_data\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002"
    "\022\n\n\002th\030\003 \002(\002\"#\n\013mp_vec_data\022\t\n\001x\030\001 \002(\002\022\t"
    "\n\001y\030\002 \002(\002\"[\n\013mp_schedule\022\016\n\006enable\030\001 \002(\010"
    "\022\020\n\010sch_date\030\002 \002(\t\022*\n\014pallet_cargo\030\003 \002(\013"
    "2\024.KPS.mp_pallet_cargo\"\303\002\n\016mp_bind_actio"
    "n\022\r\n\005index\030\001 \002(\r\022\016\n\006enable\030\002 \002(\010\022\014\n\004turn"
    "\030\003 \002(\010\022\023\n\013passing_bay\030\004 \002(\010\022\023\n\013task_repl"
    "an\030\005 \002(\010\022\024\n\014task_flow_nm\030\006 \002(\t\022\025\n\rtask_f"
    "low_seq\030\007 \002(\t\022\022\n\naction_seq\030\010 \002(\t\022\017\n\007get"
    "_put\030\t \002(\t\022\016\n\006mv_seg\030\n \002(\t\022\030\n\020action_typ"
    "e_uuid\030\013 \002(\t\022\017\n\007node_id\030\014 \002(\t\022\020\n\010node_se"
    "q\030\r \002(\005\022\024\n\014trigger_para\030\016 \002(\002\022\023\n\013action_"
    "para\030\017 \002(\t\022\020\n\010describe\030\020 \002(\t\"\257\003\n\nmp_bind"
    "_io\022\016\n\006enable\030\001 \002(\010\022-\n\007io_type\030\002 \002(\0162\034.K"
    "PS.mp_bind_io.Bind_IO_Type\022\017\n\007id_name\030\003 "
    "\002(\t\022\014\n\004para\030\004 \001(\t\"\302\002\n\014Bind_IO_Type\022\010\n\004NO"
    "NE\020\000\022\024\n\020POR_INPUT_PT_PUT\020\001\022\024\n\020POR_INPUT_"
    "CG_GET\020\002\022\025\n\021POR_OUTPUT_PT_PUT\020\003\022\025\n\021POR_O"
    "UTPUT_CG_GET\020\004\022\024\n\020CUS_INPUT_CG_PUT\020\005\022\024\n\020"
    "CUS_INPUT_PT_GET\020\006\022\025\n\021CUS_OUTPUT_CG_PUT\020"
    "\007\022\025\n\021CUS_OUTPUT_PT_GET\020\010\022\023\n\017STO_INPUT_EM"
    "PTY\020\t\022\024\n\020STO_OUTPUT_EMPTY\020\n\022\026\n\022CHARGE_IN"
    "PUT_ONOFF\020\013\022\030\n\024CHARGE_INPUT_VOLTAGE\020\014\022\027\n"
    "\023CHARGE_OUTPUT_ONOFF\020\r\"\225\004\n\014mp_item_base\022"
    "\n\n\002id\030\001 \002(\r\022\014\n\004uuid\030\002 \002(\t\022\r\n\005color\030\003 \002(\t"
    "\022\r\n\005group\030\004 \003(\t\022)\n\014bind_actions\030\005 \003(\0132\023."
    "KPS.mp_bind_action\022 \n\007bind_io\030\006 \003(\0132\017.KP"
    "S.mp_bind_io\022*\n\014pallet_cargo\030\007 \002(\0132\024.KPS"
    ".mp_pallet_cargo\022\025\n\rcreation_time\030\010 \002(\t\022"
    "\030\n\020destruction_time\030\t \001(\t\022\035\n\003pos\030\n \002(\0132\020"
    ".KPS.mp_pos_data\022\017\n\007cmd_his\030\013 \003(\t\022\020\n\010des"
    "cribe\030\014 \001(\t\022\024\n\014bind_node_id\030\r \001(\t\022\023\n\013ori"
    "entation\030\016 \001(\002\022\022\n\nori_rotate\030\017 \001(\002\022\020\n\010pr"
    "iority\030\020 \001(\005\022\023\n\013pallet_uuid\030\021 \002(\t\022\013\n\003row"
    "\030\022 \001(\r\022\020\n\010row_size\030\023 \001(\r\022\013\n\003col\030\024 \001(\r\022\020\n"
    "\010col_size\030\025 \001(\r\022\r\n\005level\030\026 \001(\r\022\022\n\nlevel_"
    "size\030\027 \001(\r\022\014\n\004area\030\030 \001(\r\022\014\n\004para\030\031 \001(\t", 1598);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base.proto", &protobuf_RegisterTypes);
  mp_odom_data::default_instance_ = new mp_odom_data();
  mp_pos_data::default_instance_ = new mp_pos_data();
  mp_vec_data::default_instance_ = new mp_vec_data();
  mp_schedule::default_instance_ = new mp_schedule();
  mp_bind_action::default_instance_ = new mp_bind_action();
  mp_bind_io::default_instance_ = new mp_bind_io();
  mp_item_base::default_instance_ = new mp_item_base();
  mp_odom_data::default_instance_->InitAsDefaultInstance();
  mp_pos_data::default_instance_->InitAsDefaultInstance();
  mp_vec_data::default_instance_->InitAsDefaultInstance();
  mp_schedule::default_instance_->InitAsDefaultInstance();
  mp_bind_action::default_instance_->InitAsDefaultInstance();
  mp_bind_io::default_instance_->InitAsDefaultInstance();
  mp_item_base::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_2eproto {
  StaticDescriptorInitializer_base_2eproto() {
    protobuf_AddDesc_base_2eproto();
  }
} static_descriptor_initializer_base_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int mp_odom_data::kXFieldNumber;
const int mp_odom_data::kYFieldNumber;
const int mp_odom_data::kThFieldNumber;
const int mp_odom_data::kVxFieldNumber;
const int mp_odom_data::kVyFieldNumber;
const int mp_odom_data::kVwFieldNumber;
#endif  // !_MSC_VER

mp_odom_data::mp_odom_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_odom_data::InitAsDefaultInstance() {
}

mp_odom_data::mp_odom_data(const mp_odom_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_odom_data::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  th_ = 0;
  vx_ = 0;
  vy_ = 0;
  vw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_odom_data::~mp_odom_data() {
  SharedDtor();
}

void mp_odom_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mp_odom_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_odom_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_odom_data_descriptor_;
}

const mp_odom_data& mp_odom_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();  return *default_instance_;
}

mp_odom_data* mp_odom_data::default_instance_ = NULL;

mp_odom_data* mp_odom_data::New() const {
  return new mp_odom_data;
}

void mp_odom_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    th_ = 0;
    vx_ = 0;
    vy_ = 0;
    vw_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_odom_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_th;
        break;
      }
      
      // required float th = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &th_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_vx;
        break;
      }
      
      // required float vx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vx_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_vy;
        break;
      }
      
      // required float vy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vy_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_vw;
        break;
      }
      
      // required float vw = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vw_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_odom_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required float th = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->th(), output);
  }
  
  // required float vx = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->vx(), output);
  }
  
  // required float vy = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->vy(), output);
  }
  
  // required float vw = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->vw(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_odom_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required float th = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->th(), target);
  }
  
  // required float vx = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->vx(), target);
  }
  
  // required float vy = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->vy(), target);
  }
  
  // required float vw = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->vw(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_odom_data::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float th = 3;
    if (has_th()) {
      total_size += 1 + 4;
    }
    
    // required float vx = 4;
    if (has_vx()) {
      total_size += 1 + 4;
    }
    
    // required float vy = 5;
    if (has_vy()) {
      total_size += 1 + 4;
    }
    
    // required float vw = 6;
    if (has_vw()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_odom_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_odom_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_odom_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_odom_data::MergeFrom(const mp_odom_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_x(from.x());
    }
    if (from._has_bit(1)) {
      set_y(from.y());
    }
    if (from._has_bit(2)) {
      set_th(from.th());
    }
    if (from._has_bit(3)) {
      set_vx(from.vx());
    }
    if (from._has_bit(4)) {
      set_vy(from.vy());
    }
    if (from._has_bit(5)) {
      set_vw(from.vw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_odom_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_odom_data::CopyFrom(const mp_odom_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_odom_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void mp_odom_data::Swap(mp_odom_data* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(th_, other->th_);
    std::swap(vx_, other->vx_);
    std::swap(vy_, other->vy_);
    std::swap(vw_, other->vw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_odom_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_odom_data_descriptor_;
  metadata.reflection = mp_odom_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mp_pos_data::kXFieldNumber;
const int mp_pos_data::kYFieldNumber;
const int mp_pos_data::kThFieldNumber;
#endif  // !_MSC_VER

mp_pos_data::mp_pos_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_pos_data::InitAsDefaultInstance() {
}

mp_pos_data::mp_pos_data(const mp_pos_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_pos_data::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  th_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_pos_data::~mp_pos_data() {
  SharedDtor();
}

void mp_pos_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mp_pos_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_pos_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_pos_data_descriptor_;
}

const mp_pos_data& mp_pos_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();  return *default_instance_;
}

mp_pos_data* mp_pos_data::default_instance_ = NULL;

mp_pos_data* mp_pos_data::New() const {
  return new mp_pos_data;
}

void mp_pos_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    th_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_pos_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_th;
        break;
      }
      
      // required float th = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &th_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_pos_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required float th = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->th(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_pos_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required float th = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->th(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_pos_data::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float th = 3;
    if (has_th()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_pos_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_pos_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_pos_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_pos_data::MergeFrom(const mp_pos_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_x(from.x());
    }
    if (from._has_bit(1)) {
      set_y(from.y());
    }
    if (from._has_bit(2)) {
      set_th(from.th());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_pos_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_pos_data::CopyFrom(const mp_pos_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_pos_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void mp_pos_data::Swap(mp_pos_data* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(th_, other->th_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_pos_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_pos_data_descriptor_;
  metadata.reflection = mp_pos_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mp_vec_data::kXFieldNumber;
const int mp_vec_data::kYFieldNumber;
#endif  // !_MSC_VER

mp_vec_data::mp_vec_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_vec_data::InitAsDefaultInstance() {
}

mp_vec_data::mp_vec_data(const mp_vec_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_vec_data::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_vec_data::~mp_vec_data() {
  SharedDtor();
}

void mp_vec_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mp_vec_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_vec_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_vec_data_descriptor_;
}

const mp_vec_data& mp_vec_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();  return *default_instance_;
}

mp_vec_data* mp_vec_data::default_instance_ = NULL;

mp_vec_data* mp_vec_data::New() const {
  return new mp_vec_data;
}

void mp_vec_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_vec_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_vec_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_vec_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_vec_data::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_vec_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_vec_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_vec_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_vec_data::MergeFrom(const mp_vec_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_x(from.x());
    }
    if (from._has_bit(1)) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_vec_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_vec_data::CopyFrom(const mp_vec_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_vec_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void mp_vec_data::Swap(mp_vec_data* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_vec_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_vec_data_descriptor_;
  metadata.reflection = mp_vec_data_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string mp_schedule::_default_sch_date_;
#ifndef _MSC_VER
const int mp_schedule::kEnableFieldNumber;
const int mp_schedule::kSchDateFieldNumber;
const int mp_schedule::kPalletCargoFieldNumber;
#endif  // !_MSC_VER

mp_schedule::mp_schedule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_schedule::InitAsDefaultInstance() {
  pallet_cargo_ = const_cast< ::KPS::mp_pallet_cargo*>(&::KPS::mp_pallet_cargo::default_instance());
}

mp_schedule::mp_schedule(const mp_schedule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_schedule::SharedCtor() {
  _cached_size_ = 0;
  enable_ = false;
  sch_date_ = const_cast< ::std::string*>(&_default_sch_date_);
  pallet_cargo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_schedule::~mp_schedule() {
  SharedDtor();
}

void mp_schedule::SharedDtor() {
  if (sch_date_ != &_default_sch_date_) {
    delete sch_date_;
  }
  if (this != default_instance_) {
    delete pallet_cargo_;
  }
}

void mp_schedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_schedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_schedule_descriptor_;
}

const mp_schedule& mp_schedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();  return *default_instance_;
}

mp_schedule* mp_schedule::default_instance_ = NULL;

mp_schedule* mp_schedule::New() const {
  return new mp_schedule;
}

void mp_schedule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enable_ = false;
    if (_has_bit(1)) {
      if (sch_date_ != &_default_sch_date_) {
        sch_date_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pallet_cargo_ != NULL) pallet_cargo_->::KPS::mp_pallet_cargo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_schedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool enable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sch_date;
        break;
      }
      
      // required string sch_date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sch_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sch_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sch_date().data(), this->sch_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pallet_cargo;
        break;
      }
      
      // required .KPS.mp_pallet_cargo pallet_cargo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pallet_cargo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pallet_cargo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_schedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool enable = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }
  
  // required string sch_date = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sch_date().data(), this->sch_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sch_date(), output);
  }
  
  // required .KPS.mp_pallet_cargo pallet_cargo = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pallet_cargo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_schedule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool enable = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }
  
  // required string sch_date = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sch_date().data(), this->sch_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sch_date(), target);
  }
  
  // required .KPS.mp_pallet_cargo pallet_cargo = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pallet_cargo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_schedule::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool enable = 1;
    if (has_enable()) {
      total_size += 1 + 1;
    }
    
    // required string sch_date = 2;
    if (has_sch_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sch_date());
    }
    
    // required .KPS.mp_pallet_cargo pallet_cargo = 3;
    if (has_pallet_cargo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pallet_cargo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_schedule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_schedule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_schedule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_schedule::MergeFrom(const mp_schedule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_enable(from.enable());
    }
    if (from._has_bit(1)) {
      set_sch_date(from.sch_date());
    }
    if (from._has_bit(2)) {
      mutable_pallet_cargo()->::KPS::mp_pallet_cargo::MergeFrom(from.pallet_cargo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_schedule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_schedule::CopyFrom(const mp_schedule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_schedule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_pallet_cargo()) {
    if (!this->pallet_cargo().IsInitialized()) return false;
  }
  return true;
}

void mp_schedule::Swap(mp_schedule* other) {
  if (other != this) {
    std::swap(enable_, other->enable_);
    std::swap(sch_date_, other->sch_date_);
    std::swap(pallet_cargo_, other->pallet_cargo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_schedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_schedule_descriptor_;
  metadata.reflection = mp_schedule_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string mp_bind_action::_default_task_flow_nm_;
const ::std::string mp_bind_action::_default_task_flow_seq_;
const ::std::string mp_bind_action::_default_action_seq_;
const ::std::string mp_bind_action::_default_get_put_;
const ::std::string mp_bind_action::_default_mv_seg_;
const ::std::string mp_bind_action::_default_action_type_uuid_;
const ::std::string mp_bind_action::_default_node_id_;
const ::std::string mp_bind_action::_default_action_para_;
const ::std::string mp_bind_action::_default_describe_;
#ifndef _MSC_VER
const int mp_bind_action::kIndexFieldNumber;
const int mp_bind_action::kEnableFieldNumber;
const int mp_bind_action::kTurnFieldNumber;
const int mp_bind_action::kPassingBayFieldNumber;
const int mp_bind_action::kTaskReplanFieldNumber;
const int mp_bind_action::kTaskFlowNmFieldNumber;
const int mp_bind_action::kTaskFlowSeqFieldNumber;
const int mp_bind_action::kActionSeqFieldNumber;
const int mp_bind_action::kGetPutFieldNumber;
const int mp_bind_action::kMvSegFieldNumber;
const int mp_bind_action::kActionTypeUuidFieldNumber;
const int mp_bind_action::kNodeIdFieldNumber;
const int mp_bind_action::kNodeSeqFieldNumber;
const int mp_bind_action::kTriggerParaFieldNumber;
const int mp_bind_action::kActionParaFieldNumber;
const int mp_bind_action::kDescribeFieldNumber;
#endif  // !_MSC_VER

mp_bind_action::mp_bind_action()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_bind_action::InitAsDefaultInstance() {
}

mp_bind_action::mp_bind_action(const mp_bind_action& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_bind_action::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  enable_ = false;
  turn_ = false;
  passing_bay_ = false;
  task_replan_ = false;
  task_flow_nm_ = const_cast< ::std::string*>(&_default_task_flow_nm_);
  task_flow_seq_ = const_cast< ::std::string*>(&_default_task_flow_seq_);
  action_seq_ = const_cast< ::std::string*>(&_default_action_seq_);
  get_put_ = const_cast< ::std::string*>(&_default_get_put_);
  mv_seg_ = const_cast< ::std::string*>(&_default_mv_seg_);
  action_type_uuid_ = const_cast< ::std::string*>(&_default_action_type_uuid_);
  node_id_ = const_cast< ::std::string*>(&_default_node_id_);
  node_seq_ = 0;
  trigger_para_ = 0;
  action_para_ = const_cast< ::std::string*>(&_default_action_para_);
  describe_ = const_cast< ::std::string*>(&_default_describe_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_bind_action::~mp_bind_action() {
  SharedDtor();
}

void mp_bind_action::SharedDtor() {
  if (task_flow_nm_ != &_default_task_flow_nm_) {
    delete task_flow_nm_;
  }
  if (task_flow_seq_ != &_default_task_flow_seq_) {
    delete task_flow_seq_;
  }
  if (action_seq_ != &_default_action_seq_) {
    delete action_seq_;
  }
  if (get_put_ != &_default_get_put_) {
    delete get_put_;
  }
  if (mv_seg_ != &_default_mv_seg_) {
    delete mv_seg_;
  }
  if (action_type_uuid_ != &_default_action_type_uuid_) {
    delete action_type_uuid_;
  }
  if (node_id_ != &_default_node_id_) {
    delete node_id_;
  }
  if (action_para_ != &_default_action_para_) {
    delete action_para_;
  }
  if (describe_ != &_default_describe_) {
    delete describe_;
  }
  if (this != default_instance_) {
  }
}

void mp_bind_action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_bind_action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_bind_action_descriptor_;
}

const mp_bind_action& mp_bind_action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();  return *default_instance_;
}

mp_bind_action* mp_bind_action::default_instance_ = NULL;

mp_bind_action* mp_bind_action::New() const {
  return new mp_bind_action;
}

void mp_bind_action::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    enable_ = false;
    turn_ = false;
    passing_bay_ = false;
    task_replan_ = false;
    if (_has_bit(5)) {
      if (task_flow_nm_ != &_default_task_flow_nm_) {
        task_flow_nm_->clear();
      }
    }
    if (_has_bit(6)) {
      if (task_flow_seq_ != &_default_task_flow_seq_) {
        task_flow_seq_->clear();
      }
    }
    if (_has_bit(7)) {
      if (action_seq_ != &_default_action_seq_) {
        action_seq_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (get_put_ != &_default_get_put_) {
        get_put_->clear();
      }
    }
    if (_has_bit(9)) {
      if (mv_seg_ != &_default_mv_seg_) {
        mv_seg_->clear();
      }
    }
    if (_has_bit(10)) {
      if (action_type_uuid_ != &_default_action_type_uuid_) {
        action_type_uuid_->clear();
      }
    }
    if (_has_bit(11)) {
      if (node_id_ != &_default_node_id_) {
        node_id_->clear();
      }
    }
    node_seq_ = 0;
    trigger_para_ = 0;
    if (_has_bit(14)) {
      if (action_para_ != &_default_action_para_) {
        action_para_->clear();
      }
    }
    if (_has_bit(15)) {
      if (describe_ != &_default_describe_) {
        describe_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_bind_action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enable;
        break;
      }
      
      // required bool enable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_turn;
        break;
      }
      
      // required bool turn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &turn_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_passing_bay;
        break;
      }
      
      // required bool passing_bay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passing_bay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passing_bay_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_task_replan;
        break;
      }
      
      // required bool task_replan = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_replan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &task_replan_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_task_flow_nm;
        break;
      }
      
      // required string task_flow_nm = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_flow_nm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_flow_nm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_flow_nm().data(), this->task_flow_nm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_task_flow_seq;
        break;
      }
      
      // required string task_flow_seq = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_flow_seq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_flow_seq()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_flow_seq().data(), this->task_flow_seq().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_action_seq;
        break;
      }
      
      // required string action_seq = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action_seq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_seq()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action_seq().data(), this->action_seq().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_get_put;
        break;
      }
      
      // required string get_put = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_get_put()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->get_put().data(), this->get_put().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_mv_seg;
        break;
      }
      
      // required string mv_seg = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mv_seg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mv_seg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mv_seg().data(), this->mv_seg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_action_type_uuid;
        break;
      }
      
      // required string action_type_uuid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action_type_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_type_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action_type_uuid().data(), this->action_type_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_node_id;
        break;
      }
      
      // required string node_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_node_seq;
        break;
      }
      
      // required int32 node_seq = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_seq_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_trigger_para;
        break;
      }
      
      // required float trigger_para = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_trigger_para:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &trigger_para_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_action_para;
        break;
      }
      
      // required string action_para = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action_para:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_para()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action_para().data(), this->action_para().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_describe;
        break;
      }
      
      // required string describe = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->describe().data(), this->describe().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_bind_action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }
  
  // required bool enable = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable(), output);
  }
  
  // required bool turn = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->turn(), output);
  }
  
  // required bool passing_bay = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->passing_bay(), output);
  }
  
  // required bool task_replan = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->task_replan(), output);
  }
  
  // required string task_flow_nm = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_flow_nm().data(), this->task_flow_nm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->task_flow_nm(), output);
  }
  
  // required string task_flow_seq = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_flow_seq().data(), this->task_flow_seq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->task_flow_seq(), output);
  }
  
  // required string action_seq = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_seq().data(), this->action_seq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->action_seq(), output);
  }
  
  // required string get_put = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->get_put().data(), this->get_put().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->get_put(), output);
  }
  
  // required string mv_seg = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mv_seg().data(), this->mv_seg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->mv_seg(), output);
  }
  
  // required string action_type_uuid = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_type_uuid().data(), this->action_type_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->action_type_uuid(), output);
  }
  
  // required string node_id = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->node_id(), output);
  }
  
  // required int32 node_seq = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->node_seq(), output);
  }
  
  // required float trigger_para = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->trigger_para(), output);
  }
  
  // required string action_para = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_para().data(), this->action_para().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->action_para(), output);
  }
  
  // required string describe = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->describe(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_bind_action::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // required bool enable = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable(), target);
  }
  
  // required bool turn = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->turn(), target);
  }
  
  // required bool passing_bay = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->passing_bay(), target);
  }
  
  // required bool task_replan = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->task_replan(), target);
  }
  
  // required string task_flow_nm = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_flow_nm().data(), this->task_flow_nm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->task_flow_nm(), target);
  }
  
  // required string task_flow_seq = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_flow_seq().data(), this->task_flow_seq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->task_flow_seq(), target);
  }
  
  // required string action_seq = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_seq().data(), this->action_seq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->action_seq(), target);
  }
  
  // required string get_put = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->get_put().data(), this->get_put().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->get_put(), target);
  }
  
  // required string mv_seg = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mv_seg().data(), this->mv_seg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->mv_seg(), target);
  }
  
  // required string action_type_uuid = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_type_uuid().data(), this->action_type_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->action_type_uuid(), target);
  }
  
  // required string node_id = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->node_id(), target);
  }
  
  // required int32 node_seq = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->node_seq(), target);
  }
  
  // required float trigger_para = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->trigger_para(), target);
  }
  
  // required string action_para = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action_para().data(), this->action_para().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->action_para(), target);
  }
  
  // required string describe = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->describe(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_bind_action::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
    // required bool enable = 2;
    if (has_enable()) {
      total_size += 1 + 1;
    }
    
    // required bool turn = 3;
    if (has_turn()) {
      total_size += 1 + 1;
    }
    
    // required bool passing_bay = 4;
    if (has_passing_bay()) {
      total_size += 1 + 1;
    }
    
    // required bool task_replan = 5;
    if (has_task_replan()) {
      total_size += 1 + 1;
    }
    
    // required string task_flow_nm = 6;
    if (has_task_flow_nm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_flow_nm());
    }
    
    // required string task_flow_seq = 7;
    if (has_task_flow_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_flow_seq());
    }
    
    // required string action_seq = 8;
    if (has_action_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action_seq());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string get_put = 9;
    if (has_get_put()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->get_put());
    }
    
    // required string mv_seg = 10;
    if (has_mv_seg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mv_seg());
    }
    
    // required string action_type_uuid = 11;
    if (has_action_type_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action_type_uuid());
    }
    
    // required string node_id = 12;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_id());
    }
    
    // required int32 node_seq = 13;
    if (has_node_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_seq());
    }
    
    // required float trigger_para = 14;
    if (has_trigger_para()) {
      total_size += 1 + 4;
    }
    
    // required string action_para = 15;
    if (has_action_para()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action_para());
    }
    
    // required string describe = 16;
    if (has_describe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->describe());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_bind_action::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_bind_action* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_bind_action*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_bind_action::MergeFrom(const mp_bind_action& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_index(from.index());
    }
    if (from._has_bit(1)) {
      set_enable(from.enable());
    }
    if (from._has_bit(2)) {
      set_turn(from.turn());
    }
    if (from._has_bit(3)) {
      set_passing_bay(from.passing_bay());
    }
    if (from._has_bit(4)) {
      set_task_replan(from.task_replan());
    }
    if (from._has_bit(5)) {
      set_task_flow_nm(from.task_flow_nm());
    }
    if (from._has_bit(6)) {
      set_task_flow_seq(from.task_flow_seq());
    }
    if (from._has_bit(7)) {
      set_action_seq(from.action_seq());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_get_put(from.get_put());
    }
    if (from._has_bit(9)) {
      set_mv_seg(from.mv_seg());
    }
    if (from._has_bit(10)) {
      set_action_type_uuid(from.action_type_uuid());
    }
    if (from._has_bit(11)) {
      set_node_id(from.node_id());
    }
    if (from._has_bit(12)) {
      set_node_seq(from.node_seq());
    }
    if (from._has_bit(13)) {
      set_trigger_para(from.trigger_para());
    }
    if (from._has_bit(14)) {
      set_action_para(from.action_para());
    }
    if (from._has_bit(15)) {
      set_describe(from.describe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_bind_action::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_bind_action::CopyFrom(const mp_bind_action& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_bind_action::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;
  
  return true;
}

void mp_bind_action::Swap(mp_bind_action* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(enable_, other->enable_);
    std::swap(turn_, other->turn_);
    std::swap(passing_bay_, other->passing_bay_);
    std::swap(task_replan_, other->task_replan_);
    std::swap(task_flow_nm_, other->task_flow_nm_);
    std::swap(task_flow_seq_, other->task_flow_seq_);
    std::swap(action_seq_, other->action_seq_);
    std::swap(get_put_, other->get_put_);
    std::swap(mv_seg_, other->mv_seg_);
    std::swap(action_type_uuid_, other->action_type_uuid_);
    std::swap(node_id_, other->node_id_);
    std::swap(node_seq_, other->node_seq_);
    std::swap(trigger_para_, other->trigger_para_);
    std::swap(action_para_, other->action_para_);
    std::swap(describe_, other->describe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_bind_action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_bind_action_descriptor_;
  metadata.reflection = mp_bind_action_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* mp_bind_io_Bind_IO_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_bind_io_Bind_IO_Type_descriptor_;
}
bool mp_bind_io_Bind_IO_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const mp_bind_io_Bind_IO_Type mp_bind_io::NONE;
const mp_bind_io_Bind_IO_Type mp_bind_io::POR_INPUT_PT_PUT;
const mp_bind_io_Bind_IO_Type mp_bind_io::POR_INPUT_CG_GET;
const mp_bind_io_Bind_IO_Type mp_bind_io::POR_OUTPUT_PT_PUT;
const mp_bind_io_Bind_IO_Type mp_bind_io::POR_OUTPUT_CG_GET;
const mp_bind_io_Bind_IO_Type mp_bind_io::CUS_INPUT_CG_PUT;
const mp_bind_io_Bind_IO_Type mp_bind_io::CUS_INPUT_PT_GET;
const mp_bind_io_Bind_IO_Type mp_bind_io::CUS_OUTPUT_CG_PUT;
const mp_bind_io_Bind_IO_Type mp_bind_io::CUS_OUTPUT_PT_GET;
const mp_bind_io_Bind_IO_Type mp_bind_io::STO_INPUT_EMPTY;
const mp_bind_io_Bind_IO_Type mp_bind_io::STO_OUTPUT_EMPTY;
const mp_bind_io_Bind_IO_Type mp_bind_io::CHARGE_INPUT_ONOFF;
const mp_bind_io_Bind_IO_Type mp_bind_io::CHARGE_INPUT_VOLTAGE;
const mp_bind_io_Bind_IO_Type mp_bind_io::CHARGE_OUTPUT_ONOFF;
const mp_bind_io_Bind_IO_Type mp_bind_io::Bind_IO_Type_MIN;
const mp_bind_io_Bind_IO_Type mp_bind_io::Bind_IO_Type_MAX;
const int mp_bind_io::Bind_IO_Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string mp_bind_io::_default_id_name_;
const ::std::string mp_bind_io::_default_para_;
#ifndef _MSC_VER
const int mp_bind_io::kEnableFieldNumber;
const int mp_bind_io::kIoTypeFieldNumber;
const int mp_bind_io::kIdNameFieldNumber;
const int mp_bind_io::kParaFieldNumber;
#endif  // !_MSC_VER

mp_bind_io::mp_bind_io()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_bind_io::InitAsDefaultInstance() {
}

mp_bind_io::mp_bind_io(const mp_bind_io& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_bind_io::SharedCtor() {
  _cached_size_ = 0;
  enable_ = false;
  io_type_ = 0;
  id_name_ = const_cast< ::std::string*>(&_default_id_name_);
  para_ = const_cast< ::std::string*>(&_default_para_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_bind_io::~mp_bind_io() {
  SharedDtor();
}

void mp_bind_io::SharedDtor() {
  if (id_name_ != &_default_id_name_) {
    delete id_name_;
  }
  if (para_ != &_default_para_) {
    delete para_;
  }
  if (this != default_instance_) {
  }
}

void mp_bind_io::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_bind_io::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_bind_io_descriptor_;
}

const mp_bind_io& mp_bind_io::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();  return *default_instance_;
}

mp_bind_io* mp_bind_io::default_instance_ = NULL;

mp_bind_io* mp_bind_io::New() const {
  return new mp_bind_io;
}

void mp_bind_io::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enable_ = false;
    io_type_ = 0;
    if (_has_bit(2)) {
      if (id_name_ != &_default_id_name_) {
        id_name_->clear();
      }
    }
    if (_has_bit(3)) {
      if (para_ != &_default_para_) {
        para_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_bind_io::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool enable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_io_type;
        break;
      }
      
      // required .KPS.mp_bind_io.Bind_IO_Type io_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_io_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::KPS::mp_bind_io_Bind_IO_Type_IsValid(value)) {
            set_io_type(static_cast< ::KPS::mp_bind_io_Bind_IO_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id_name;
        break;
      }
      
      // required string id_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id_name().data(), this->id_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_para;
        break;
      }
      
      // optional string para = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_para:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_para()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->para().data(), this->para().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_bind_io::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool enable = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }
  
  // required .KPS.mp_bind_io.Bind_IO_Type io_type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->io_type(), output);
  }
  
  // required string id_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id_name().data(), this->id_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->id_name(), output);
  }
  
  // optional string para = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->para().data(), this->para().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->para(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_bind_io::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool enable = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }
  
  // required .KPS.mp_bind_io.Bind_IO_Type io_type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->io_type(), target);
  }
  
  // required string id_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id_name().data(), this->id_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id_name(), target);
  }
  
  // optional string para = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->para().data(), this->para().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->para(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_bind_io::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool enable = 1;
    if (has_enable()) {
      total_size += 1 + 1;
    }
    
    // required .KPS.mp_bind_io.Bind_IO_Type io_type = 2;
    if (has_io_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->io_type());
    }
    
    // required string id_name = 3;
    if (has_id_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id_name());
    }
    
    // optional string para = 4;
    if (has_para()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->para());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_bind_io::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_bind_io* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_bind_io*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_bind_io::MergeFrom(const mp_bind_io& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_enable(from.enable());
    }
    if (from._has_bit(1)) {
      set_io_type(from.io_type());
    }
    if (from._has_bit(2)) {
      set_id_name(from.id_name());
    }
    if (from._has_bit(3)) {
      set_para(from.para());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_bind_io::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_bind_io::CopyFrom(const mp_bind_io& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_bind_io::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void mp_bind_io::Swap(mp_bind_io* other) {
  if (other != this) {
    std::swap(enable_, other->enable_);
    std::swap(io_type_, other->io_type_);
    std::swap(id_name_, other->id_name_);
    std::swap(para_, other->para_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_bind_io::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_bind_io_descriptor_;
  metadata.reflection = mp_bind_io_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string mp_item_base::_default_uuid_;
const ::std::string mp_item_base::_default_color_;
const ::std::string mp_item_base::_default_creation_time_;
const ::std::string mp_item_base::_default_destruction_time_;
const ::std::string mp_item_base::_default_describe_;
const ::std::string mp_item_base::_default_bind_node_id_;
const ::std::string mp_item_base::_default_pallet_uuid_;
const ::std::string mp_item_base::_default_para_;
#ifndef _MSC_VER
const int mp_item_base::kIdFieldNumber;
const int mp_item_base::kUuidFieldNumber;
const int mp_item_base::kColorFieldNumber;
const int mp_item_base::kGroupFieldNumber;
const int mp_item_base::kBindActionsFieldNumber;
const int mp_item_base::kBindIoFieldNumber;
const int mp_item_base::kPalletCargoFieldNumber;
const int mp_item_base::kCreationTimeFieldNumber;
const int mp_item_base::kDestructionTimeFieldNumber;
const int mp_item_base::kPosFieldNumber;
const int mp_item_base::kCmdHisFieldNumber;
const int mp_item_base::kDescribeFieldNumber;
const int mp_item_base::kBindNodeIdFieldNumber;
const int mp_item_base::kOrientationFieldNumber;
const int mp_item_base::kOriRotateFieldNumber;
const int mp_item_base::kPriorityFieldNumber;
const int mp_item_base::kPalletUuidFieldNumber;
const int mp_item_base::kRowFieldNumber;
const int mp_item_base::kRowSizeFieldNumber;
const int mp_item_base::kColFieldNumber;
const int mp_item_base::kColSizeFieldNumber;
const int mp_item_base::kLevelFieldNumber;
const int mp_item_base::kLevelSizeFieldNumber;
const int mp_item_base::kAreaFieldNumber;
const int mp_item_base::kParaFieldNumber;
#endif  // !_MSC_VER

mp_item_base::mp_item_base()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_item_base::InitAsDefaultInstance() {
  pallet_cargo_ = const_cast< ::KPS::mp_pallet_cargo*>(&::KPS::mp_pallet_cargo::default_instance());
  pos_ = const_cast< ::KPS::mp_pos_data*>(&::KPS::mp_pos_data::default_instance());
}

mp_item_base::mp_item_base(const mp_item_base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_item_base::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  uuid_ = const_cast< ::std::string*>(&_default_uuid_);
  color_ = const_cast< ::std::string*>(&_default_color_);
  pallet_cargo_ = NULL;
  creation_time_ = const_cast< ::std::string*>(&_default_creation_time_);
  destruction_time_ = const_cast< ::std::string*>(&_default_destruction_time_);
  pos_ = NULL;
  describe_ = const_cast< ::std::string*>(&_default_describe_);
  bind_node_id_ = const_cast< ::std::string*>(&_default_bind_node_id_);
  orientation_ = 0;
  ori_rotate_ = 0;
  priority_ = 0;
  pallet_uuid_ = const_cast< ::std::string*>(&_default_pallet_uuid_);
  row_ = 0u;
  row_size_ = 0u;
  col_ = 0u;
  col_size_ = 0u;
  level_ = 0u;
  level_size_ = 0u;
  area_ = 0u;
  para_ = const_cast< ::std::string*>(&_default_para_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_item_base::~mp_item_base() {
  SharedDtor();
}

void mp_item_base::SharedDtor() {
  if (uuid_ != &_default_uuid_) {
    delete uuid_;
  }
  if (color_ != &_default_color_) {
    delete color_;
  }
  if (creation_time_ != &_default_creation_time_) {
    delete creation_time_;
  }
  if (destruction_time_ != &_default_destruction_time_) {
    delete destruction_time_;
  }
  if (describe_ != &_default_describe_) {
    delete describe_;
  }
  if (bind_node_id_ != &_default_bind_node_id_) {
    delete bind_node_id_;
  }
  if (pallet_uuid_ != &_default_pallet_uuid_) {
    delete pallet_uuid_;
  }
  if (para_ != &_default_para_) {
    delete para_;
  }
  if (this != default_instance_) {
    delete pallet_cargo_;
    delete pos_;
  }
}

void mp_item_base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_item_base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_item_base_descriptor_;
}

const mp_item_base& mp_item_base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_base_2eproto();  return *default_instance_;
}

mp_item_base* mp_item_base::default_instance_ = NULL;

mp_item_base* mp_item_base::New() const {
  return new mp_item_base;
}

void mp_item_base::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (_has_bit(1)) {
      if (uuid_ != &_default_uuid_) {
        uuid_->clear();
      }
    }
    if (_has_bit(2)) {
      if (color_ != &_default_color_) {
        color_->clear();
      }
    }
    if (_has_bit(6)) {
      if (pallet_cargo_ != NULL) pallet_cargo_->::KPS::mp_pallet_cargo::Clear();
    }
    if (_has_bit(7)) {
      if (creation_time_ != &_default_creation_time_) {
        creation_time_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (destruction_time_ != &_default_destruction_time_) {
        destruction_time_->clear();
      }
    }
    if (_has_bit(9)) {
      if (pos_ != NULL) pos_->::KPS::mp_pos_data::Clear();
    }
    if (_has_bit(11)) {
      if (describe_ != &_default_describe_) {
        describe_->clear();
      }
    }
    if (_has_bit(12)) {
      if (bind_node_id_ != &_default_bind_node_id_) {
        bind_node_id_->clear();
      }
    }
    orientation_ = 0;
    ori_rotate_ = 0;
    priority_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (_has_bit(16)) {
      if (pallet_uuid_ != &_default_pallet_uuid_) {
        pallet_uuid_->clear();
      }
    }
    row_ = 0u;
    row_size_ = 0u;
    col_ = 0u;
    col_size_ = 0u;
    level_ = 0u;
    level_size_ = 0u;
    area_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (_has_bit(24)) {
      if (para_ != &_default_para_) {
        para_->clear();
      }
    }
  }
  group_.Clear();
  bind_actions_.Clear();
  bind_io_.Clear();
  cmd_his_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_item_base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }
      
      // required string uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_color;
        break;
      }
      
      // required string color = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->color().data(), this->color().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_group;
        break;
      }
      
      // repeated string group = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group(0).data(), this->group(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_group;
        if (input->ExpectTag(42)) goto parse_bind_actions;
        break;
      }
      
      // repeated .KPS.mp_bind_action bind_actions = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bind_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bind_actions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bind_actions;
        if (input->ExpectTag(50)) goto parse_bind_io;
        break;
      }
      
      // repeated .KPS.mp_bind_io bind_io = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bind_io:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bind_io()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bind_io;
        if (input->ExpectTag(58)) goto parse_pallet_cargo;
        break;
      }
      
      // required .KPS.mp_pallet_cargo pallet_cargo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pallet_cargo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pallet_cargo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_creation_time;
        break;
      }
      
      // required string creation_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creation_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creation_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creation_time().data(), this->creation_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_destruction_time;
        break;
      }
      
      // optional string destruction_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destruction_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destruction_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->destruction_time().data(), this->destruction_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_pos;
        break;
      }
      
      // required .KPS.mp_pos_data pos = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_cmd_his;
        break;
      }
      
      // repeated string cmd_his = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmd_his:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cmd_his()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmd_his(0).data(), this->cmd_his(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_cmd_his;
        if (input->ExpectTag(98)) goto parse_describe;
        break;
      }
      
      // optional string describe = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_describe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describe()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->describe().data(), this->describe().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_bind_node_id;
        break;
      }
      
      // optional string bind_node_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bind_node_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bind_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bind_node_id().data(), this->bind_node_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_orientation;
        break;
      }
      
      // optional float orientation = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &orientation_)));
          _set_bit(13);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_ori_rotate;
        break;
      }
      
      // optional float ori_rotate = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ori_rotate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ori_rotate_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_priority;
        break;
      }
      
      // optional int32 priority = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          _set_bit(15);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_pallet_uuid;
        break;
      }
      
      // required string pallet_uuid = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pallet_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pallet_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pallet_uuid().data(), this->pallet_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_row;
        break;
      }
      
      // optional uint32 row = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_)));
          _set_bit(17);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_row_size;
        break;
      }
      
      // optional uint32 row_size = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_size_)));
          _set_bit(18);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_col;
        break;
      }
      
      // optional uint32 col = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &col_)));
          _set_bit(19);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_col_size;
        break;
      }
      
      // optional uint32 col_size = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &col_size_)));
          _set_bit(20);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          _set_bit(21);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_level_size;
        break;
      }
      
      // optional uint32 level_size = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_size_)));
          _set_bit(22);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_area;
        break;
      }
      
      // optional uint32 area = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_)));
          _set_bit(23);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_para;
        break;
      }
      
      // optional string para = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_para:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_para()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->para().data(), this->para().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_item_base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required string uuid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uuid(), output);
  }
  
  // required string color = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->color(), output);
  }
  
  // repeated string group = 4;
  for (int i = 0; i < this->group_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->group(i).data(), this->group(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->group(i), output);
  }
  
  // repeated .KPS.mp_bind_action bind_actions = 5;
  for (int i = 0; i < this->bind_actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bind_actions(i), output);
  }
  
  // repeated .KPS.mp_bind_io bind_io = 6;
  for (int i = 0; i < this->bind_io_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bind_io(i), output);
  }
  
  // required .KPS.mp_pallet_cargo pallet_cargo = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pallet_cargo(), output);
  }
  
  // required string creation_time = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creation_time().data(), this->creation_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->creation_time(), output);
  }
  
  // optional string destruction_time = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destruction_time().data(), this->destruction_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->destruction_time(), output);
  }
  
  // required .KPS.mp_pos_data pos = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->pos(), output);
  }
  
  // repeated string cmd_his = 11;
  for (int i = 0; i < this->cmd_his_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->cmd_his(i).data(), this->cmd_his(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->cmd_his(i), output);
  }
  
  // optional string describe = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->describe(), output);
  }
  
  // optional string bind_node_id = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bind_node_id().data(), this->bind_node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->bind_node_id(), output);
  }
  
  // optional float orientation = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->orientation(), output);
  }
  
  // optional float ori_rotate = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->ori_rotate(), output);
  }
  
  // optional int32 priority = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->priority(), output);
  }
  
  // required string pallet_uuid = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pallet_uuid().data(), this->pallet_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->pallet_uuid(), output);
  }
  
  // optional uint32 row = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->row(), output);
  }
  
  // optional uint32 row_size = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->row_size(), output);
  }
  
  // optional uint32 col = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->col(), output);
  }
  
  // optional uint32 col_size = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->col_size(), output);
  }
  
  // optional uint32 level = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->level(), output);
  }
  
  // optional uint32 level_size = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->level_size(), output);
  }
  
  // optional uint32 area = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->area(), output);
  }
  
  // optional string para = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->para().data(), this->para().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->para(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_item_base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required string uuid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }
  
  // required string color = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->color(), target);
  }
  
  // repeated string group = 4;
  for (int i = 0; i < this->group_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group(i).data(), this->group(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->group(i), target);
  }
  
  // repeated .KPS.mp_bind_action bind_actions = 5;
  for (int i = 0; i < this->bind_actions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bind_actions(i), target);
  }
  
  // repeated .KPS.mp_bind_io bind_io = 6;
  for (int i = 0; i < this->bind_io_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bind_io(i), target);
  }
  
  // required .KPS.mp_pallet_cargo pallet_cargo = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pallet_cargo(), target);
  }
  
  // required string creation_time = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creation_time().data(), this->creation_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->creation_time(), target);
  }
  
  // optional string destruction_time = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destruction_time().data(), this->destruction_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->destruction_time(), target);
  }
  
  // required .KPS.mp_pos_data pos = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->pos(), target);
  }
  
  // repeated string cmd_his = 11;
  for (int i = 0; i < this->cmd_his_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd_his(i).data(), this->cmd_his(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->cmd_his(i), target);
  }
  
  // optional string describe = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->describe().data(), this->describe().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->describe(), target);
  }
  
  // optional string bind_node_id = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bind_node_id().data(), this->bind_node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->bind_node_id(), target);
  }
  
  // optional float orientation = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->orientation(), target);
  }
  
  // optional float ori_rotate = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->ori_rotate(), target);
  }
  
  // optional int32 priority = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->priority(), target);
  }
  
  // required string pallet_uuid = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pallet_uuid().data(), this->pallet_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->pallet_uuid(), target);
  }
  
  // optional uint32 row = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->row(), target);
  }
  
  // optional uint32 row_size = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->row_size(), target);
  }
  
  // optional uint32 col = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->col(), target);
  }
  
  // optional uint32 col_size = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->col_size(), target);
  }
  
  // optional uint32 level = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->level(), target);
  }
  
  // optional uint32 level_size = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->level_size(), target);
  }
  
  // optional uint32 area = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->area(), target);
  }
  
  // optional string para = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->para().data(), this->para().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->para(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_item_base::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required string uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }
    
    // required string color = 3;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }
    
    // required .KPS.mp_pallet_cargo pallet_cargo = 7;
    if (has_pallet_cargo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pallet_cargo());
    }
    
    // required string creation_time = 8;
    if (has_creation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creation_time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string destruction_time = 9;
    if (has_destruction_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destruction_time());
    }
    
    // required .KPS.mp_pos_data pos = 10;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
    // optional string describe = 12;
    if (has_describe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->describe());
    }
    
    // optional string bind_node_id = 13;
    if (has_bind_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bind_node_id());
    }
    
    // optional float orientation = 14;
    if (has_orientation()) {
      total_size += 1 + 4;
    }
    
    // optional float ori_rotate = 15;
    if (has_ori_rotate()) {
      total_size += 1 + 4;
    }
    
    // optional int32 priority = 16;
    if (has_priority()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string pallet_uuid = 17;
    if (has_pallet_uuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pallet_uuid());
    }
    
    // optional uint32 row = 18;
    if (has_row()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->row());
    }
    
    // optional uint32 row_size = 19;
    if (has_row_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->row_size());
    }
    
    // optional uint32 col = 20;
    if (has_col()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->col());
    }
    
    // optional uint32 col_size = 21;
    if (has_col_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->col_size());
    }
    
    // optional uint32 level = 22;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 level_size = 23;
    if (has_level_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level_size());
    }
    
    // optional uint32 area = 24;
    if (has_area()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string para = 25;
    if (has_para()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->para());
    }
    
  }
  // repeated string group = 4;
  total_size += 1 * this->group_size();
  for (int i = 0; i < this->group_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->group(i));
  }
  
  // repeated .KPS.mp_bind_action bind_actions = 5;
  total_size += 1 * this->bind_actions_size();
  for (int i = 0; i < this->bind_actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bind_actions(i));
  }
  
  // repeated .KPS.mp_bind_io bind_io = 6;
  total_size += 1 * this->bind_io_size();
  for (int i = 0; i < this->bind_io_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bind_io(i));
  }
  
  // repeated string cmd_his = 11;
  total_size += 1 * this->cmd_his_size();
  for (int i = 0; i < this->cmd_his_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cmd_his(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_item_base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_item_base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_item_base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_item_base::MergeFrom(const mp_item_base& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_.MergeFrom(from.group_);
  bind_actions_.MergeFrom(from.bind_actions_);
  bind_io_.MergeFrom(from.bind_io_);
  cmd_his_.MergeFrom(from.cmd_his_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_uuid(from.uuid());
    }
    if (from._has_bit(2)) {
      set_color(from.color());
    }
    if (from._has_bit(6)) {
      mutable_pallet_cargo()->::KPS::mp_pallet_cargo::MergeFrom(from.pallet_cargo());
    }
    if (from._has_bit(7)) {
      set_creation_time(from.creation_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_destruction_time(from.destruction_time());
    }
    if (from._has_bit(9)) {
      mutable_pos()->::KPS::mp_pos_data::MergeFrom(from.pos());
    }
    if (from._has_bit(11)) {
      set_describe(from.describe());
    }
    if (from._has_bit(12)) {
      set_bind_node_id(from.bind_node_id());
    }
    if (from._has_bit(13)) {
      set_orientation(from.orientation());
    }
    if (from._has_bit(14)) {
      set_ori_rotate(from.ori_rotate());
    }
    if (from._has_bit(15)) {
      set_priority(from.priority());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_pallet_uuid(from.pallet_uuid());
    }
    if (from._has_bit(17)) {
      set_row(from.row());
    }
    if (from._has_bit(18)) {
      set_row_size(from.row_size());
    }
    if (from._has_bit(19)) {
      set_col(from.col());
    }
    if (from._has_bit(20)) {
      set_col_size(from.col_size());
    }
    if (from._has_bit(21)) {
      set_level(from.level());
    }
    if (from._has_bit(22)) {
      set_level_size(from.level_size());
    }
    if (from._has_bit(23)) {
      set_area(from.area());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_para(from.para());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_item_base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_item_base::CopyFrom(const mp_item_base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_item_base::IsInitialized() const {
  if ((_has_bits_[0] & 0x000102c7) != 0x000102c7) return false;
  
  for (int i = 0; i < bind_actions_size(); i++) {
    if (!this->bind_actions(i).IsInitialized()) return false;
  }
  for (int i = 0; i < bind_io_size(); i++) {
    if (!this->bind_io(i).IsInitialized()) return false;
  }
  if (has_pallet_cargo()) {
    if (!this->pallet_cargo().IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void mp_item_base::Swap(mp_item_base* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(uuid_, other->uuid_);
    std::swap(color_, other->color_);
    group_.Swap(&other->group_);
    bind_actions_.Swap(&other->bind_actions_);
    bind_io_.Swap(&other->bind_io_);
    std::swap(pallet_cargo_, other->pallet_cargo_);
    std::swap(creation_time_, other->creation_time_);
    std::swap(destruction_time_, other->destruction_time_);
    std::swap(pos_, other->pos_);
    cmd_his_.Swap(&other->cmd_his_);
    std::swap(describe_, other->describe_);
    std::swap(bind_node_id_, other->bind_node_id_);
    std::swap(orientation_, other->orientation_);
    std::swap(ori_rotate_, other->ori_rotate_);
    std::swap(priority_, other->priority_);
    std::swap(pallet_uuid_, other->pallet_uuid_);
    std::swap(row_, other->row_);
    std::swap(row_size_, other->row_size_);
    std::swap(col_, other->col_);
    std::swap(col_size_, other->col_size_);
    std::swap(level_, other->level_);
    std::swap(level_size_, other->level_size_);
    std::swap(area_, other->area_);
    std::swap(para_, other->para_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_item_base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_item_base_descriptor_;
  metadata.reflection = mp_item_base_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

// @@protoc_insertion_point(global_scope)

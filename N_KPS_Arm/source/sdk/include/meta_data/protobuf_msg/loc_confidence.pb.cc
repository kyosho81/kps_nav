// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "loc_confidence.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KPS {

namespace {

const ::google::protobuf::Descriptor* mp_loc_confidence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_loc_confidence_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_loc_5fconfidence_2eproto() {
  protobuf_AddDesc_loc_5fconfidence_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "loc_confidence.proto");
  GOOGLE_CHECK(file != NULL);
  mp_loc_confidence_descriptor_ = file->message_type(0);
  static const int mp_loc_confidence_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_loc_confidence, b_amcl_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_loc_confidence, amcl_conf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_loc_confidence, b_amcl_entropy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_loc_confidence, amcl_xy_entropy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_loc_confidence, amcl_theta_entropy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_loc_confidence, amcl_entropy_),
  };
  mp_loc_confidence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_loc_confidence_descriptor_,
      mp_loc_confidence::default_instance_,
      mp_loc_confidence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_loc_confidence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_loc_confidence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_loc_confidence));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_loc_5fconfidence_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_loc_confidence_descriptor_, &mp_loc_confidence::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_loc_5fconfidence_2eproto() {
  delete mp_loc_confidence::default_instance_;
  delete mp_loc_confidence_reflection_;
}

void protobuf_AddDesc_loc_5fconfidence_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024loc_confidence.proto\022\003KPS\"\236\001\n\021mp_loc_c"
    "onfidence\022\023\n\013b_amcl_conf\030\001 \002(\010\022\021\n\tamcl_c"
    "onf\030\002 \002(\002\022\026\n\016b_amcl_entropy\030\003 \002(\010\022\027\n\017amc"
    "l_xy_entropy\030\004 \002(\002\022\032\n\022amcl_theta_entropy"
    "\030\005 \002(\002\022\024\n\014amcl_entropy\030\006 \002(\002", 188);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "loc_confidence.proto", &protobuf_RegisterTypes);
  mp_loc_confidence::default_instance_ = new mp_loc_confidence();
  mp_loc_confidence::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_loc_5fconfidence_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_loc_5fconfidence_2eproto {
  StaticDescriptorInitializer_loc_5fconfidence_2eproto() {
    protobuf_AddDesc_loc_5fconfidence_2eproto();
  }
} static_descriptor_initializer_loc_5fconfidence_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int mp_loc_confidence::kBAmclConfFieldNumber;
const int mp_loc_confidence::kAmclConfFieldNumber;
const int mp_loc_confidence::kBAmclEntropyFieldNumber;
const int mp_loc_confidence::kAmclXyEntropyFieldNumber;
const int mp_loc_confidence::kAmclThetaEntropyFieldNumber;
const int mp_loc_confidence::kAmclEntropyFieldNumber;
#endif  // !_MSC_VER

mp_loc_confidence::mp_loc_confidence()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_loc_confidence::InitAsDefaultInstance() {
}

mp_loc_confidence::mp_loc_confidence(const mp_loc_confidence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_loc_confidence::SharedCtor() {
  _cached_size_ = 0;
  b_amcl_conf_ = false;
  amcl_conf_ = 0;
  b_amcl_entropy_ = false;
  amcl_xy_entropy_ = 0;
  amcl_theta_entropy_ = 0;
  amcl_entropy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_loc_confidence::~mp_loc_confidence() {
  SharedDtor();
}

void mp_loc_confidence::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mp_loc_confidence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_loc_confidence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_loc_confidence_descriptor_;
}

const mp_loc_confidence& mp_loc_confidence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loc_5fconfidence_2eproto();  return *default_instance_;
}

mp_loc_confidence* mp_loc_confidence::default_instance_ = NULL;

mp_loc_confidence* mp_loc_confidence::New() const {
  return new mp_loc_confidence;
}

void mp_loc_confidence::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    b_amcl_conf_ = false;
    amcl_conf_ = 0;
    b_amcl_entropy_ = false;
    amcl_xy_entropy_ = 0;
    amcl_theta_entropy_ = 0;
    amcl_entropy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_loc_confidence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool b_amcl_conf = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_amcl_conf_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_amcl_conf;
        break;
      }
      
      // required float amcl_conf = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_amcl_conf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amcl_conf_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_b_amcl_entropy;
        break;
      }
      
      // required bool b_amcl_entropy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b_amcl_entropy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_amcl_entropy_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_amcl_xy_entropy;
        break;
      }
      
      // required float amcl_xy_entropy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_amcl_xy_entropy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amcl_xy_entropy_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_amcl_theta_entropy;
        break;
      }
      
      // required float amcl_theta_entropy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_amcl_theta_entropy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amcl_theta_entropy_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_amcl_entropy;
        break;
      }
      
      // required float amcl_entropy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_amcl_entropy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amcl_entropy_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_loc_confidence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool b_amcl_conf = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->b_amcl_conf(), output);
  }
  
  // required float amcl_conf = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->amcl_conf(), output);
  }
  
  // required bool b_amcl_entropy = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->b_amcl_entropy(), output);
  }
  
  // required float amcl_xy_entropy = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->amcl_xy_entropy(), output);
  }
  
  // required float amcl_theta_entropy = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->amcl_theta_entropy(), output);
  }
  
  // required float amcl_entropy = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->amcl_entropy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_loc_confidence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool b_amcl_conf = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->b_amcl_conf(), target);
  }
  
  // required float amcl_conf = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->amcl_conf(), target);
  }
  
  // required bool b_amcl_entropy = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->b_amcl_entropy(), target);
  }
  
  // required float amcl_xy_entropy = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->amcl_xy_entropy(), target);
  }
  
  // required float amcl_theta_entropy = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->amcl_theta_entropy(), target);
  }
  
  // required float amcl_entropy = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->amcl_entropy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_loc_confidence::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool b_amcl_conf = 1;
    if (has_b_amcl_conf()) {
      total_size += 1 + 1;
    }
    
    // required float amcl_conf = 2;
    if (has_amcl_conf()) {
      total_size += 1 + 4;
    }
    
    // required bool b_amcl_entropy = 3;
    if (has_b_amcl_entropy()) {
      total_size += 1 + 1;
    }
    
    // required float amcl_xy_entropy = 4;
    if (has_amcl_xy_entropy()) {
      total_size += 1 + 4;
    }
    
    // required float amcl_theta_entropy = 5;
    if (has_amcl_theta_entropy()) {
      total_size += 1 + 4;
    }
    
    // required float amcl_entropy = 6;
    if (has_amcl_entropy()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_loc_confidence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_loc_confidence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_loc_confidence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_loc_confidence::MergeFrom(const mp_loc_confidence& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_b_amcl_conf(from.b_amcl_conf());
    }
    if (from._has_bit(1)) {
      set_amcl_conf(from.amcl_conf());
    }
    if (from._has_bit(2)) {
      set_b_amcl_entropy(from.b_amcl_entropy());
    }
    if (from._has_bit(3)) {
      set_amcl_xy_entropy(from.amcl_xy_entropy());
    }
    if (from._has_bit(4)) {
      set_amcl_theta_entropy(from.amcl_theta_entropy());
    }
    if (from._has_bit(5)) {
      set_amcl_entropy(from.amcl_entropy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_loc_confidence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_loc_confidence::CopyFrom(const mp_loc_confidence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_loc_confidence::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void mp_loc_confidence::Swap(mp_loc_confidence* other) {
  if (other != this) {
    std::swap(b_amcl_conf_, other->b_amcl_conf_);
    std::swap(amcl_conf_, other->amcl_conf_);
    std::swap(b_amcl_entropy_, other->b_amcl_entropy_);
    std::swap(amcl_xy_entropy_, other->amcl_xy_entropy_);
    std::swap(amcl_theta_entropy_, other->amcl_theta_entropy_);
    std::swap(amcl_entropy_, other->amcl_entropy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_loc_confidence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_loc_confidence_descriptor_;
  metadata.reflection = mp_loc_confidence_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

// @@protoc_insertion_point(global_scope)

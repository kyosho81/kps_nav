// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bag.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KPS {

namespace {

const ::google::protobuf::Descriptor* mp_odom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_odom_reflection_ = NULL;
const ::google::protobuf::Descriptor* mp_pos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_pos_reflection_ = NULL;
const ::google::protobuf::Descriptor* mp_bag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_bag_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_bag_2eproto() {
  protobuf_AddDesc_bag_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bag.proto");
  GOOGLE_CHECK(file != NULL);
  mp_odom_descriptor_ = file->message_type(0);
  static const int mp_odom_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_odom, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_odom, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_odom, th_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_odom, vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_odom, vy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_odom, vw_),
  };
  mp_odom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_odom_descriptor_,
      mp_odom::default_instance_,
      mp_odom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_odom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_odom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_odom));
  mp_pos_descriptor_ = file->message_type(1);
  static const int mp_pos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pos, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pos, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pos, th_),
  };
  mp_pos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_pos_descriptor_,
      mp_pos::default_instance_,
      mp_pos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_pos));
  mp_bag_descriptor_ = file->message_type(2);
  static const int mp_bag_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bag, robot_shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bag, laser_para_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bag, laser_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bag, odom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bag, amcl_pos_),
  };
  mp_bag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_bag_descriptor_,
      mp_bag::default_instance_,
      mp_bag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_bag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_bag));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bag_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_odom_descriptor_, &mp_odom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_pos_descriptor_, &mp_pos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_bag_descriptor_, &mp_bag::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bag_2eproto() {
  delete mp_odom::default_instance_;
  delete mp_odom_reflection_;
  delete mp_pos::default_instance_;
  delete mp_pos_reflection_;
  delete mp_bag::default_instance_;
  delete mp_bag_reflection_;
}

void protobuf_AddDesc_bag_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::KPS::protobuf_AddDesc_laser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tbag.proto\022\003KPS\032\013laser.proto\"O\n\007mp_odom"
    "\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\n\n\002th\030\003 \002(\002\022\n\n\002vx"
    "\030\004 \002(\002\022\n\n\002vy\030\005 \002(\002\022\n\n\002vw\030\006 \002(\002\"*\n\006mp_pos"
    "\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\n\n\002th\030\003 \002(\002\"\250\001\n\006m"
    "p_bag\022\023\n\013robot_shape\030\001 \002(\t\022&\n\nlaser_para"
    "\030\002 \002(\0132\022.KPS.mp_laser_para\022&\n\nlaser_data"
    "\030\003 \002(\0132\022.KPS.mp_laser_data\022\032\n\004odom\030\004 \002(\013"
    "2\014.KPS.mp_odom\022\035\n\010amcl_pos\030\005 \002(\0132\013.KPS.m"
    "p_pos", 325);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bag.proto", &protobuf_RegisterTypes);
  mp_odom::default_instance_ = new mp_odom();
  mp_pos::default_instance_ = new mp_pos();
  mp_bag::default_instance_ = new mp_bag();
  mp_odom::default_instance_->InitAsDefaultInstance();
  mp_pos::default_instance_->InitAsDefaultInstance();
  mp_bag::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bag_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bag_2eproto {
  StaticDescriptorInitializer_bag_2eproto() {
    protobuf_AddDesc_bag_2eproto();
  }
} static_descriptor_initializer_bag_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int mp_odom::kXFieldNumber;
const int mp_odom::kYFieldNumber;
const int mp_odom::kThFieldNumber;
const int mp_odom::kVxFieldNumber;
const int mp_odom::kVyFieldNumber;
const int mp_odom::kVwFieldNumber;
#endif  // !_MSC_VER

mp_odom::mp_odom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_odom::InitAsDefaultInstance() {
}

mp_odom::mp_odom(const mp_odom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_odom::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  th_ = 0;
  vx_ = 0;
  vy_ = 0;
  vw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_odom::~mp_odom() {
  SharedDtor();
}

void mp_odom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mp_odom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_odom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_odom_descriptor_;
}

const mp_odom& mp_odom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bag_2eproto();  return *default_instance_;
}

mp_odom* mp_odom::default_instance_ = NULL;

mp_odom* mp_odom::New() const {
  return new mp_odom;
}

void mp_odom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    th_ = 0;
    vx_ = 0;
    vy_ = 0;
    vw_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_odom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_th;
        break;
      }
      
      // required float th = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &th_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_vx;
        break;
      }
      
      // required float vx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vx_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_vy;
        break;
      }
      
      // required float vy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vy_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_vw;
        break;
      }
      
      // required float vw = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vw_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_odom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required float th = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->th(), output);
  }
  
  // required float vx = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->vx(), output);
  }
  
  // required float vy = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->vy(), output);
  }
  
  // required float vw = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->vw(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_odom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required float th = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->th(), target);
  }
  
  // required float vx = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->vx(), target);
  }
  
  // required float vy = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->vy(), target);
  }
  
  // required float vw = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->vw(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_odom::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float th = 3;
    if (has_th()) {
      total_size += 1 + 4;
    }
    
    // required float vx = 4;
    if (has_vx()) {
      total_size += 1 + 4;
    }
    
    // required float vy = 5;
    if (has_vy()) {
      total_size += 1 + 4;
    }
    
    // required float vw = 6;
    if (has_vw()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_odom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_odom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_odom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_odom::MergeFrom(const mp_odom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_x(from.x());
    }
    if (from._has_bit(1)) {
      set_y(from.y());
    }
    if (from._has_bit(2)) {
      set_th(from.th());
    }
    if (from._has_bit(3)) {
      set_vx(from.vx());
    }
    if (from._has_bit(4)) {
      set_vy(from.vy());
    }
    if (from._has_bit(5)) {
      set_vw(from.vw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_odom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_odom::CopyFrom(const mp_odom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_odom::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void mp_odom::Swap(mp_odom* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(th_, other->th_);
    std::swap(vx_, other->vx_);
    std::swap(vy_, other->vy_);
    std::swap(vw_, other->vw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_odom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_odom_descriptor_;
  metadata.reflection = mp_odom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mp_pos::kXFieldNumber;
const int mp_pos::kYFieldNumber;
const int mp_pos::kThFieldNumber;
#endif  // !_MSC_VER

mp_pos::mp_pos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_pos::InitAsDefaultInstance() {
}

mp_pos::mp_pos(const mp_pos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_pos::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  th_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_pos::~mp_pos() {
  SharedDtor();
}

void mp_pos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mp_pos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_pos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_pos_descriptor_;
}

const mp_pos& mp_pos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bag_2eproto();  return *default_instance_;
}

mp_pos* mp_pos::default_instance_ = NULL;

mp_pos* mp_pos::New() const {
  return new mp_pos;
}

void mp_pos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    th_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_pos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_th;
        break;
      }
      
      // required float th = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_th:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &th_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_pos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required float th = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->th(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_pos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required float th = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->th(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_pos::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float th = 3;
    if (has_th()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_pos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_pos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_pos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_pos::MergeFrom(const mp_pos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_x(from.x());
    }
    if (from._has_bit(1)) {
      set_y(from.y());
    }
    if (from._has_bit(2)) {
      set_th(from.th());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_pos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_pos::CopyFrom(const mp_pos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_pos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void mp_pos::Swap(mp_pos* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(th_, other->th_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_pos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_pos_descriptor_;
  metadata.reflection = mp_pos_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string mp_bag::_default_robot_shape_;
#ifndef _MSC_VER
const int mp_bag::kRobotShapeFieldNumber;
const int mp_bag::kLaserParaFieldNumber;
const int mp_bag::kLaserDataFieldNumber;
const int mp_bag::kOdomFieldNumber;
const int mp_bag::kAmclPosFieldNumber;
#endif  // !_MSC_VER

mp_bag::mp_bag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_bag::InitAsDefaultInstance() {
  laser_para_ = const_cast< ::KPS::mp_laser_para*>(&::KPS::mp_laser_para::default_instance());
  laser_data_ = const_cast< ::KPS::mp_laser_data*>(&::KPS::mp_laser_data::default_instance());
  odom_ = const_cast< ::KPS::mp_odom*>(&::KPS::mp_odom::default_instance());
  amcl_pos_ = const_cast< ::KPS::mp_pos*>(&::KPS::mp_pos::default_instance());
}

mp_bag::mp_bag(const mp_bag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_bag::SharedCtor() {
  _cached_size_ = 0;
  robot_shape_ = const_cast< ::std::string*>(&_default_robot_shape_);
  laser_para_ = NULL;
  laser_data_ = NULL;
  odom_ = NULL;
  amcl_pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_bag::~mp_bag() {
  SharedDtor();
}

void mp_bag::SharedDtor() {
  if (robot_shape_ != &_default_robot_shape_) {
    delete robot_shape_;
  }
  if (this != default_instance_) {
    delete laser_para_;
    delete laser_data_;
    delete odom_;
    delete amcl_pos_;
  }
}

void mp_bag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_bag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_bag_descriptor_;
}

const mp_bag& mp_bag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bag_2eproto();  return *default_instance_;
}

mp_bag* mp_bag::default_instance_ = NULL;

mp_bag* mp_bag::New() const {
  return new mp_bag;
}

void mp_bag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (robot_shape_ != &_default_robot_shape_) {
        robot_shape_->clear();
      }
    }
    if (_has_bit(1)) {
      if (laser_para_ != NULL) laser_para_->::KPS::mp_laser_para::Clear();
    }
    if (_has_bit(2)) {
      if (laser_data_ != NULL) laser_data_->::KPS::mp_laser_data::Clear();
    }
    if (_has_bit(3)) {
      if (odom_ != NULL) odom_->::KPS::mp_odom::Clear();
    }
    if (_has_bit(4)) {
      if (amcl_pos_ != NULL) amcl_pos_->::KPS::mp_pos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_bag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string robot_shape = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_shape()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->robot_shape().data(), this->robot_shape().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_laser_para;
        break;
      }
      
      // required .KPS.mp_laser_para laser_para = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_laser_para:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_laser_para()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_laser_data;
        break;
      }
      
      // required .KPS.mp_laser_data laser_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_laser_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_laser_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_odom;
        break;
      }
      
      // required .KPS.mp_odom odom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_odom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_odom()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_amcl_pos;
        break;
      }
      
      // required .KPS.mp_pos amcl_pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_amcl_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_amcl_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_bag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string robot_shape = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->robot_shape().data(), this->robot_shape().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->robot_shape(), output);
  }
  
  // required .KPS.mp_laser_para laser_para = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->laser_para(), output);
  }
  
  // required .KPS.mp_laser_data laser_data = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->laser_data(), output);
  }
  
  // required .KPS.mp_odom odom = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->odom(), output);
  }
  
  // required .KPS.mp_pos amcl_pos = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->amcl_pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_bag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string robot_shape = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->robot_shape().data(), this->robot_shape().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->robot_shape(), target);
  }
  
  // required .KPS.mp_laser_para laser_para = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->laser_para(), target);
  }
  
  // required .KPS.mp_laser_data laser_data = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->laser_data(), target);
  }
  
  // required .KPS.mp_odom odom = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->odom(), target);
  }
  
  // required .KPS.mp_pos amcl_pos = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->amcl_pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_bag::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string robot_shape = 1;
    if (has_robot_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robot_shape());
    }
    
    // required .KPS.mp_laser_para laser_para = 2;
    if (has_laser_para()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->laser_para());
    }
    
    // required .KPS.mp_laser_data laser_data = 3;
    if (has_laser_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->laser_data());
    }
    
    // required .KPS.mp_odom odom = 4;
    if (has_odom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->odom());
    }
    
    // required .KPS.mp_pos amcl_pos = 5;
    if (has_amcl_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->amcl_pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_bag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_bag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_bag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_bag::MergeFrom(const mp_bag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_robot_shape(from.robot_shape());
    }
    if (from._has_bit(1)) {
      mutable_laser_para()->::KPS::mp_laser_para::MergeFrom(from.laser_para());
    }
    if (from._has_bit(2)) {
      mutable_laser_data()->::KPS::mp_laser_data::MergeFrom(from.laser_data());
    }
    if (from._has_bit(3)) {
      mutable_odom()->::KPS::mp_odom::MergeFrom(from.odom());
    }
    if (from._has_bit(4)) {
      mutable_amcl_pos()->::KPS::mp_pos::MergeFrom(from.amcl_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_bag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_bag::CopyFrom(const mp_bag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_bag::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_laser_para()) {
    if (!this->laser_para().IsInitialized()) return false;
  }
  if (has_laser_data()) {
    if (!this->laser_data().IsInitialized()) return false;
  }
  if (has_odom()) {
    if (!this->odom().IsInitialized()) return false;
  }
  if (has_amcl_pos()) {
    if (!this->amcl_pos().IsInitialized()) return false;
  }
  return true;
}

void mp_bag::Swap(mp_bag* other) {
  if (other != this) {
    std::swap(robot_shape_, other->robot_shape_);
    std::swap(laser_para_, other->laser_para_);
    std::swap(laser_data_, other->laser_data_);
    std::swap(odom_, other->odom_);
    std::swap(amcl_pos_, other->amcl_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_bag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_bag_descriptor_;
  metadata.reflection = mp_bag_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: path.proto

#ifndef PROTOBUF_path_2eproto__INCLUDED
#define PROTOBUF_path_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace KPS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_path_2eproto();
void protobuf_AssignDesc_path_2eproto();
void protobuf_ShutdownFile_path_2eproto();

class mp_path_data;
class mp_path;

// ===================================================================

class mp_path_data : public ::google::protobuf::Message {
 public:
  mp_path_data();
  virtual ~mp_path_data();
  
  mp_path_data(const mp_path_data& from);
  
  inline mp_path_data& operator=(const mp_path_data& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mp_path_data& default_instance();
  
  void Swap(mp_path_data* other);
  
  // implements Message ----------------------------------------------
  
  mp_path_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mp_path_data& from);
  void MergeFrom(const mp_path_data& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float th = 3;
  inline bool has_th() const;
  inline void clear_th();
  static const int kThFieldNumber = 3;
  inline float th() const;
  inline void set_th(float value);
  
  // required float vx = 4;
  inline bool has_vx() const;
  inline void clear_vx();
  static const int kVxFieldNumber = 4;
  inline float vx() const;
  inline void set_vx(float value);
  
  // required float vy = 5;
  inline bool has_vy() const;
  inline void clear_vy();
  static const int kVyFieldNumber = 5;
  inline float vy() const;
  inline void set_vy(float value);
  
  // required float vw = 6;
  inline bool has_vw() const;
  inline void clear_vw();
  static const int kVwFieldNumber = 6;
  inline float vw() const;
  inline void set_vw(float value);
  
  // @@protoc_insertion_point(class_scope:KPS.mp_path_data)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  float x_;
  float y_;
  float th_;
  float vx_;
  float vy_;
  float vw_;
  friend void  protobuf_AddDesc_path_2eproto();
  friend void protobuf_AssignDesc_path_2eproto();
  friend void protobuf_ShutdownFile_path_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static mp_path_data* default_instance_;
};
// -------------------------------------------------------------------

class mp_path : public ::google::protobuf::Message {
 public:
  mp_path();
  virtual ~mp_path();
  
  mp_path(const mp_path& from);
  
  inline mp_path& operator=(const mp_path& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mp_path& default_instance();
  
  void Swap(mp_path* other);
  
  // implements Message ----------------------------------------------
  
  mp_path* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mp_path& from);
  void MergeFrom(const mp_path& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string path_name = 1;
  inline bool has_path_name() const;
  inline void clear_path_name();
  static const int kPathNameFieldNumber = 1;
  inline const ::std::string& path_name() const;
  inline void set_path_name(const ::std::string& value);
  inline void set_path_name(const char* value);
  inline void set_path_name(const char* value, size_t size);
  inline ::std::string* mutable_path_name();
  
  // repeated .KPS.mp_path_data data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::KPS::mp_path_data& data(int index) const;
  inline ::KPS::mp_path_data* mutable_data(int index);
  inline ::KPS::mp_path_data* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::KPS::mp_path_data >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::KPS::mp_path_data >*
      mutable_data();
  
  // @@protoc_insertion_point(class_scope:KPS.mp_path)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* path_name_;
  static const ::std::string _default_path_name_;
  ::google::protobuf::RepeatedPtrField< ::KPS::mp_path_data > data_;
  friend void  protobuf_AddDesc_path_2eproto();
  friend void protobuf_AssignDesc_path_2eproto();
  friend void protobuf_ShutdownFile_path_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static mp_path* default_instance_;
};
// ===================================================================


// ===================================================================

// mp_path_data

// required float x = 1;
inline bool mp_path_data::has_x() const {
  return _has_bit(0);
}
inline void mp_path_data::clear_x() {
  x_ = 0;
  _clear_bit(0);
}
inline float mp_path_data::x() const {
  return x_;
}
inline void mp_path_data::set_x(float value) {
  _set_bit(0);
  x_ = value;
}

// required float y = 2;
inline bool mp_path_data::has_y() const {
  return _has_bit(1);
}
inline void mp_path_data::clear_y() {
  y_ = 0;
  _clear_bit(1);
}
inline float mp_path_data::y() const {
  return y_;
}
inline void mp_path_data::set_y(float value) {
  _set_bit(1);
  y_ = value;
}

// required float th = 3;
inline bool mp_path_data::has_th() const {
  return _has_bit(2);
}
inline void mp_path_data::clear_th() {
  th_ = 0;
  _clear_bit(2);
}
inline float mp_path_data::th() const {
  return th_;
}
inline void mp_path_data::set_th(float value) {
  _set_bit(2);
  th_ = value;
}

// required float vx = 4;
inline bool mp_path_data::has_vx() const {
  return _has_bit(3);
}
inline void mp_path_data::clear_vx() {
  vx_ = 0;
  _clear_bit(3);
}
inline float mp_path_data::vx() const {
  return vx_;
}
inline void mp_path_data::set_vx(float value) {
  _set_bit(3);
  vx_ = value;
}

// required float vy = 5;
inline bool mp_path_data::has_vy() const {
  return _has_bit(4);
}
inline void mp_path_data::clear_vy() {
  vy_ = 0;
  _clear_bit(4);
}
inline float mp_path_data::vy() const {
  return vy_;
}
inline void mp_path_data::set_vy(float value) {
  _set_bit(4);
  vy_ = value;
}

// required float vw = 6;
inline bool mp_path_data::has_vw() const {
  return _has_bit(5);
}
inline void mp_path_data::clear_vw() {
  vw_ = 0;
  _clear_bit(5);
}
inline float mp_path_data::vw() const {
  return vw_;
}
inline void mp_path_data::set_vw(float value) {
  _set_bit(5);
  vw_ = value;
}

// -------------------------------------------------------------------

// mp_path

// required string path_name = 1;
inline bool mp_path::has_path_name() const {
  return _has_bit(0);
}
inline void mp_path::clear_path_name() {
  if (path_name_ != &_default_path_name_) {
    path_name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& mp_path::path_name() const {
  return *path_name_;
}
inline void mp_path::set_path_name(const ::std::string& value) {
  _set_bit(0);
  if (path_name_ == &_default_path_name_) {
    path_name_ = new ::std::string;
  }
  path_name_->assign(value);
}
inline void mp_path::set_path_name(const char* value) {
  _set_bit(0);
  if (path_name_ == &_default_path_name_) {
    path_name_ = new ::std::string;
  }
  path_name_->assign(value);
}
inline void mp_path::set_path_name(const char* value, size_t size) {
  _set_bit(0);
  if (path_name_ == &_default_path_name_) {
    path_name_ = new ::std::string;
  }
  path_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mp_path::mutable_path_name() {
  _set_bit(0);
  if (path_name_ == &_default_path_name_) {
    path_name_ = new ::std::string;
  }
  return path_name_;
}

// repeated .KPS.mp_path_data data = 2;
inline int mp_path::data_size() const {
  return data_.size();
}
inline void mp_path::clear_data() {
  data_.Clear();
}
inline const ::KPS::mp_path_data& mp_path::data(int index) const {
  return data_.Get(index);
}
inline ::KPS::mp_path_data* mp_path::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::KPS::mp_path_data* mp_path::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KPS::mp_path_data >&
mp_path::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::KPS::mp_path_data >*
mp_path::mutable_data() {
  return &data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_path_2eproto__INCLUDED

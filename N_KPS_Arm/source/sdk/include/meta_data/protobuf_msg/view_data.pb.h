// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: view_data.proto

#ifndef PROTOBUF_view_5fdata_2eproto__INCLUDED
#define PROTOBUF_view_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "point.pb.h"
#include "pos.pb.h"
#include "lab.pb.h"
// @@protoc_insertion_point(includes)

namespace KPS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_view_5fdata_2eproto();
void protobuf_AssignDesc_view_5fdata_2eproto();
void protobuf_ShutdownFile_view_5fdata_2eproto();

class s_view_data;

enum s_view_data_Shape_Type {
  s_view_data_Shape_Type_CIRCLE = 0,
  s_view_data_Shape_Type_TRIANGLE = 1,
  s_view_data_Shape_Type_SQUARE = 2,
  s_view_data_Shape_Type_ARROW = 3
};
bool s_view_data_Shape_Type_IsValid(int value);
const s_view_data_Shape_Type s_view_data_Shape_Type_Shape_Type_MIN = s_view_data_Shape_Type_CIRCLE;
const s_view_data_Shape_Type s_view_data_Shape_Type_Shape_Type_MAX = s_view_data_Shape_Type_ARROW;
const int s_view_data_Shape_Type_Shape_Type_ARRAYSIZE = s_view_data_Shape_Type_Shape_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* s_view_data_Shape_Type_descriptor();
inline const ::std::string& s_view_data_Shape_Type_Name(s_view_data_Shape_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    s_view_data_Shape_Type_descriptor(), value);
}
inline bool s_view_data_Shape_Type_Parse(
    const ::std::string& name, s_view_data_Shape_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<s_view_data_Shape_Type>(
    s_view_data_Shape_Type_descriptor(), name, value);
}
enum s_view_data_Insert_Type {
  s_view_data_Insert_Type_NEW = 0,
  s_view_data_Insert_Type_MERGE = 1
};
bool s_view_data_Insert_Type_IsValid(int value);
const s_view_data_Insert_Type s_view_data_Insert_Type_Insert_Type_MIN = s_view_data_Insert_Type_NEW;
const s_view_data_Insert_Type s_view_data_Insert_Type_Insert_Type_MAX = s_view_data_Insert_Type_MERGE;
const int s_view_data_Insert_Type_Insert_Type_ARRAYSIZE = s_view_data_Insert_Type_Insert_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* s_view_data_Insert_Type_descriptor();
inline const ::std::string& s_view_data_Insert_Type_Name(s_view_data_Insert_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    s_view_data_Insert_Type_descriptor(), value);
}
inline bool s_view_data_Insert_Type_Parse(
    const ::std::string& name, s_view_data_Insert_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<s_view_data_Insert_Type>(
    s_view_data_Insert_Type_descriptor(), name, value);
}
// ===================================================================

class s_view_data : public ::google::protobuf::Message {
 public:
  s_view_data();
  virtual ~s_view_data();
  
  s_view_data(const s_view_data& from);
  
  inline s_view_data& operator=(const s_view_data& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_view_data& default_instance();
  
  void Swap(s_view_data* other);
  
  // implements Message ----------------------------------------------
  
  s_view_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_view_data& from);
  void MergeFrom(const s_view_data& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef s_view_data_Shape_Type Shape_Type;
  static const Shape_Type CIRCLE = s_view_data_Shape_Type_CIRCLE;
  static const Shape_Type TRIANGLE = s_view_data_Shape_Type_TRIANGLE;
  static const Shape_Type SQUARE = s_view_data_Shape_Type_SQUARE;
  static const Shape_Type ARROW = s_view_data_Shape_Type_ARROW;
  static inline bool Shape_Type_IsValid(int value) {
    return s_view_data_Shape_Type_IsValid(value);
  }
  static const Shape_Type Shape_Type_MIN =
    s_view_data_Shape_Type_Shape_Type_MIN;
  static const Shape_Type Shape_Type_MAX =
    s_view_data_Shape_Type_Shape_Type_MAX;
  static const int Shape_Type_ARRAYSIZE =
    s_view_data_Shape_Type_Shape_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Shape_Type_descriptor() {
    return s_view_data_Shape_Type_descriptor();
  }
  static inline const ::std::string& Shape_Type_Name(Shape_Type value) {
    return s_view_data_Shape_Type_Name(value);
  }
  static inline bool Shape_Type_Parse(const ::std::string& name,
      Shape_Type* value) {
    return s_view_data_Shape_Type_Parse(name, value);
  }
  
  typedef s_view_data_Insert_Type Insert_Type;
  static const Insert_Type NEW = s_view_data_Insert_Type_NEW;
  static const Insert_Type MERGE = s_view_data_Insert_Type_MERGE;
  static inline bool Insert_Type_IsValid(int value) {
    return s_view_data_Insert_Type_IsValid(value);
  }
  static const Insert_Type Insert_Type_MIN =
    s_view_data_Insert_Type_Insert_Type_MIN;
  static const Insert_Type Insert_Type_MAX =
    s_view_data_Insert_Type_Insert_Type_MAX;
  static const int Insert_Type_ARRAYSIZE =
    s_view_data_Insert_Type_Insert_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Insert_Type_descriptor() {
    return s_view_data_Insert_Type_descriptor();
  }
  static inline const ::std::string& Insert_Type_Name(Insert_Type value) {
    return s_view_data_Insert_Type_Name(value);
  }
  static inline bool Insert_Type_Parse(const ::std::string& name,
      Insert_Type* value) {
    return s_view_data_Insert_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required .KPS.s_view_data.Insert_Type insert_type = 2;
  inline bool has_insert_type() const;
  inline void clear_insert_type();
  static const int kInsertTypeFieldNumber = 2;
  inline ::KPS::s_view_data_Insert_Type insert_type() const;
  inline void set_insert_type(::KPS::s_view_data_Insert_Type value);
  
  // repeated .KPS.s_pos pos = 3;
  inline int pos_size() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline const ::KPS::s_pos& pos(int index) const;
  inline ::KPS::s_pos* mutable_pos(int index);
  inline ::KPS::s_pos* add_pos();
  inline const ::google::protobuf::RepeatedPtrField< ::KPS::s_pos >&
      pos() const;
  inline ::google::protobuf::RepeatedPtrField< ::KPS::s_pos >*
      mutable_pos();
  
  // repeated .KPS.s_point point = 4;
  inline int point_size() const;
  inline void clear_point();
  static const int kPointFieldNumber = 4;
  inline const ::KPS::s_point& point(int index) const;
  inline ::KPS::s_point* mutable_point(int index);
  inline ::KPS::s_point* add_point();
  inline const ::google::protobuf::RepeatedPtrField< ::KPS::s_point >&
      point() const;
  inline ::google::protobuf::RepeatedPtrField< ::KPS::s_point >*
      mutable_point();
  
  // optional .KPS.s_view_data.Shape_Type shape_type = 5;
  inline bool has_shape_type() const;
  inline void clear_shape_type();
  static const int kShapeTypeFieldNumber = 5;
  inline ::KPS::s_view_data_Shape_Type shape_type() const;
  inline void set_shape_type(::KPS::s_view_data_Shape_Type value);
  
  // optional .KPS.mp_lab lab = 6;
  inline bool has_lab() const;
  inline void clear_lab();
  static const int kLabFieldNumber = 6;
  inline const ::KPS::mp_lab& lab() const;
  inline ::KPS::mp_lab* mutable_lab();
  
  // @@protoc_insertion_point(class_scope:KPS.s_view_data)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  int insert_type_;
  ::google::protobuf::RepeatedPtrField< ::KPS::s_pos > pos_;
  ::google::protobuf::RepeatedPtrField< ::KPS::s_point > point_;
  int shape_type_;
  ::KPS::mp_lab* lab_;
  friend void  protobuf_AddDesc_view_5fdata_2eproto();
  friend void protobuf_AssignDesc_view_5fdata_2eproto();
  friend void protobuf_ShutdownFile_view_5fdata_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static s_view_data* default_instance_;
};
// ===================================================================


// ===================================================================

// s_view_data

// required string name = 1;
inline bool s_view_data::has_name() const {
  return _has_bit(0);
}
inline void s_view_data::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& s_view_data::name() const {
  return *name_;
}
inline void s_view_data::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void s_view_data::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void s_view_data::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_view_data::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required .KPS.s_view_data.Insert_Type insert_type = 2;
inline bool s_view_data::has_insert_type() const {
  return _has_bit(1);
}
inline void s_view_data::clear_insert_type() {
  insert_type_ = 0;
  _clear_bit(1);
}
inline ::KPS::s_view_data_Insert_Type s_view_data::insert_type() const {
  return static_cast< ::KPS::s_view_data_Insert_Type >(insert_type_);
}
inline void s_view_data::set_insert_type(::KPS::s_view_data_Insert_Type value) {
  GOOGLE_DCHECK(::KPS::s_view_data_Insert_Type_IsValid(value));
  _set_bit(1);
  insert_type_ = value;
}

// repeated .KPS.s_pos pos = 3;
inline int s_view_data::pos_size() const {
  return pos_.size();
}
inline void s_view_data::clear_pos() {
  pos_.Clear();
}
inline const ::KPS::s_pos& s_view_data::pos(int index) const {
  return pos_.Get(index);
}
inline ::KPS::s_pos* s_view_data::mutable_pos(int index) {
  return pos_.Mutable(index);
}
inline ::KPS::s_pos* s_view_data::add_pos() {
  return pos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KPS::s_pos >&
s_view_data::pos() const {
  return pos_;
}
inline ::google::protobuf::RepeatedPtrField< ::KPS::s_pos >*
s_view_data::mutable_pos() {
  return &pos_;
}

// repeated .KPS.s_point point = 4;
inline int s_view_data::point_size() const {
  return point_.size();
}
inline void s_view_data::clear_point() {
  point_.Clear();
}
inline const ::KPS::s_point& s_view_data::point(int index) const {
  return point_.Get(index);
}
inline ::KPS::s_point* s_view_data::mutable_point(int index) {
  return point_.Mutable(index);
}
inline ::KPS::s_point* s_view_data::add_point() {
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KPS::s_point >&
s_view_data::point() const {
  return point_;
}
inline ::google::protobuf::RepeatedPtrField< ::KPS::s_point >*
s_view_data::mutable_point() {
  return &point_;
}

// optional .KPS.s_view_data.Shape_Type shape_type = 5;
inline bool s_view_data::has_shape_type() const {
  return _has_bit(4);
}
inline void s_view_data::clear_shape_type() {
  shape_type_ = 0;
  _clear_bit(4);
}
inline ::KPS::s_view_data_Shape_Type s_view_data::shape_type() const {
  return static_cast< ::KPS::s_view_data_Shape_Type >(shape_type_);
}
inline void s_view_data::set_shape_type(::KPS::s_view_data_Shape_Type value) {
  GOOGLE_DCHECK(::KPS::s_view_data_Shape_Type_IsValid(value));
  _set_bit(4);
  shape_type_ = value;
}

// optional .KPS.mp_lab lab = 6;
inline bool s_view_data::has_lab() const {
  return _has_bit(5);
}
inline void s_view_data::clear_lab() {
  if (lab_ != NULL) lab_->::KPS::mp_lab::Clear();
  _clear_bit(5);
}
inline const ::KPS::mp_lab& s_view_data::lab() const {
  return lab_ != NULL ? *lab_ : *default_instance_->lab_;
}
inline ::KPS::mp_lab* s_view_data::mutable_lab() {
  _set_bit(5);
  if (lab_ == NULL) lab_ = new ::KPS::mp_lab;
  return lab_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KPS::s_view_data_Shape_Type>() {
  return ::KPS::s_view_data_Shape_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KPS::s_view_data_Insert_Type>() {
  return ::KPS::s_view_data_Insert_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_view_5fdata_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: processer.proto

#ifndef PROTOBUF_processer_2eproto__INCLUDED
#define PROTOBUF_processer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "base.pb.h"
#include "cargo.pb.h"
#include "pallet.pb.h"
#include "cargo_type.pb.h"
#include "pallet_type.pb.h"
#include "lab.pb.h"
// @@protoc_insertion_point(includes)

namespace KPS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_processer_2eproto();
void protobuf_AssignDesc_processer_2eproto();
void protobuf_ShutdownFile_processer_2eproto();

class s_processer;

// ===================================================================

class s_processer : public ::google::protobuf::Message {
 public:
  s_processer();
  virtual ~s_processer();
  
  s_processer(const s_processer& from);
  
  inline s_processer& operator=(const s_processer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const s_processer& default_instance();
  
  void Swap(s_processer* other);
  
  // implements Message ----------------------------------------------
  
  s_processer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const s_processer& from);
  void MergeFrom(const s_processer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .KPS.mp_item_base base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::KPS::mp_item_base& base() const;
  inline ::KPS::mp_item_base* mutable_base();
  
  // repeated .KPS.mp_schedule schedule = 2;
  inline int schedule_size() const;
  inline void clear_schedule();
  static const int kScheduleFieldNumber = 2;
  inline const ::KPS::mp_schedule& schedule(int index) const;
  inline ::KPS::mp_schedule* mutable_schedule(int index);
  inline ::KPS::mp_schedule* add_schedule();
  inline const ::google::protobuf::RepeatedPtrField< ::KPS::mp_schedule >&
      schedule() const;
  inline ::google::protobuf::RepeatedPtrField< ::KPS::mp_schedule >*
      mutable_schedule();
  
  // required uint32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // optional string processer_uuid = 4;
  inline bool has_processer_uuid() const;
  inline void clear_processer_uuid();
  static const int kProcesserUuidFieldNumber = 4;
  inline const ::std::string& processer_uuid() const;
  inline void set_processer_uuid(const ::std::string& value);
  inline void set_processer_uuid(const char* value);
  inline void set_processer_uuid(const char* value, size_t size);
  inline ::std::string* mutable_processer_uuid();
  
  // @@protoc_insertion_point(class_scope:KPS.s_processer)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::KPS::mp_item_base* base_;
  ::google::protobuf::RepeatedPtrField< ::KPS::mp_schedule > schedule_;
  ::google::protobuf::uint32 status_;
  ::std::string* processer_uuid_;
  static const ::std::string _default_processer_uuid_;
  friend void  protobuf_AddDesc_processer_2eproto();
  friend void protobuf_AssignDesc_processer_2eproto();
  friend void protobuf_ShutdownFile_processer_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static s_processer* default_instance_;
};
// ===================================================================


// ===================================================================

// s_processer

// required .KPS.mp_item_base base = 1;
inline bool s_processer::has_base() const {
  return _has_bit(0);
}
inline void s_processer::clear_base() {
  if (base_ != NULL) base_->::KPS::mp_item_base::Clear();
  _clear_bit(0);
}
inline const ::KPS::mp_item_base& s_processer::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::KPS::mp_item_base* s_processer::mutable_base() {
  _set_bit(0);
  if (base_ == NULL) base_ = new ::KPS::mp_item_base;
  return base_;
}

// repeated .KPS.mp_schedule schedule = 2;
inline int s_processer::schedule_size() const {
  return schedule_.size();
}
inline void s_processer::clear_schedule() {
  schedule_.Clear();
}
inline const ::KPS::mp_schedule& s_processer::schedule(int index) const {
  return schedule_.Get(index);
}
inline ::KPS::mp_schedule* s_processer::mutable_schedule(int index) {
  return schedule_.Mutable(index);
}
inline ::KPS::mp_schedule* s_processer::add_schedule() {
  return schedule_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KPS::mp_schedule >&
s_processer::schedule() const {
  return schedule_;
}
inline ::google::protobuf::RepeatedPtrField< ::KPS::mp_schedule >*
s_processer::mutable_schedule() {
  return &schedule_;
}

// required uint32 status = 3;
inline bool s_processer::has_status() const {
  return _has_bit(2);
}
inline void s_processer::clear_status() {
  status_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 s_processer::status() const {
  return status_;
}
inline void s_processer::set_status(::google::protobuf::uint32 value) {
  _set_bit(2);
  status_ = value;
}

// optional string processer_uuid = 4;
inline bool s_processer::has_processer_uuid() const {
  return _has_bit(3);
}
inline void s_processer::clear_processer_uuid() {
  if (processer_uuid_ != &_default_processer_uuid_) {
    processer_uuid_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& s_processer::processer_uuid() const {
  return *processer_uuid_;
}
inline void s_processer::set_processer_uuid(const ::std::string& value) {
  _set_bit(3);
  if (processer_uuid_ == &_default_processer_uuid_) {
    processer_uuid_ = new ::std::string;
  }
  processer_uuid_->assign(value);
}
inline void s_processer::set_processer_uuid(const char* value) {
  _set_bit(3);
  if (processer_uuid_ == &_default_processer_uuid_) {
    processer_uuid_ = new ::std::string;
  }
  processer_uuid_->assign(value);
}
inline void s_processer::set_processer_uuid(const char* value, size_t size) {
  _set_bit(3);
  if (processer_uuid_ == &_default_processer_uuid_) {
    processer_uuid_ = new ::std::string;
  }
  processer_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* s_processer::mutable_processer_uuid() {
  _set_bit(3);
  if (processer_uuid_ == &_default_processer_uuid_) {
    processer_uuid_ = new ::std::string;
  }
  return processer_uuid_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_processer_2eproto__INCLUDED

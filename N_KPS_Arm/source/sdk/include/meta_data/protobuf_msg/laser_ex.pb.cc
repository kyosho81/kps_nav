// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "laser_ex.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KPS {

namespace {

const ::google::protobuf::Descriptor* mp_laser_ex_para_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_laser_ex_para_reflection_ = NULL;
const ::google::protobuf::Descriptor* mp_laser_ex_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_laser_ex_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* mp_laser_ref_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_laser_ref_data_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_laser_5fex_2eproto() {
  protobuf_AddDesc_laser_5fex_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "laser_ex.proto");
  GOOGLE_CHECK(file != NULL);
  mp_laser_ex_para_descriptor_ = file->message_type(0);
  static const int mp_laser_ex_para_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ex_para, laser_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ex_para, laser_reverse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ex_para, laser_start_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ex_para, laser_range_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ex_para, laser_range_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ex_para, laser_dx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ex_para, laser_dy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ex_para, laser_resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ex_para, laser_max_ray_),
  };
  mp_laser_ex_para_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_laser_ex_para_descriptor_,
      mp_laser_ex_para::default_instance_,
      mp_laser_ex_para_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ex_para, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ex_para, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_laser_ex_para));
  mp_laser_ex_data_descriptor_ = file->message_type(1);
  static const int mp_laser_ex_data_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ex_data, stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ex_data, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ex_data, bean_dt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ex_data, used_ray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ex_data, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ex_data, intensities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ex_data, seg_),
  };
  mp_laser_ex_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_laser_ex_data_descriptor_,
      mp_laser_ex_data::default_instance_,
      mp_laser_ex_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ex_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ex_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_laser_ex_data));
  mp_laser_ref_data_descriptor_ = file->message_type(2);
  static const int mp_laser_ref_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ref_data, used_ray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ref_data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ref_data, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ref_data, y_),
  };
  mp_laser_ref_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_laser_ref_data_descriptor_,
      mp_laser_ref_data::default_instance_,
      mp_laser_ref_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ref_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_laser_ref_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_laser_ref_data));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_laser_5fex_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_laser_ex_para_descriptor_, &mp_laser_ex_para::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_laser_ex_data_descriptor_, &mp_laser_ex_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_laser_ref_data_descriptor_, &mp_laser_ref_data::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_laser_5fex_2eproto() {
  delete mp_laser_ex_para::default_instance_;
  delete mp_laser_ex_para_reflection_;
  delete mp_laser_ex_data::default_instance_;
  delete mp_laser_ex_data_reflection_;
  delete mp_laser_ref_data::default_instance_;
  delete mp_laser_ref_data_reflection_;
}

void protobuf_AddDesc_laser_5fex_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016laser_ex.proto\022\003KPS\"\335\001\n\020mp_laser_ex_pa"
    "ra\022\020\n\010laser_ip\030\001 \002(\t\022\025\n\rlaser_reverse\030\002 "
    "\002(\010\022\031\n\021laser_start_angle\030\003 \002(\002\022\027\n\017laser_"
    "range_max\030\004 \002(\002\022\027\n\017laser_range_min\030\005 \002(\002"
    "\022\020\n\010laser_dx\030\006 \002(\002\022\020\n\010laser_dy\030\007 \002(\002\022\030\n\020"
    "laser_resolution\030\010 \002(\002\022\025\n\rlaser_max_ray\030"
    "\t \002(\002\"\210\001\n\020mp_laser_ex_data\022\r\n\005stamp\030\001 \002("
    "\004\022\022\n\ntime_stamp\030\002 \002(\001\022\017\n\007bean_dt\030\003 \002(\002\022\020"
    "\n\010used_ray\030\004 \002(\005\022\014\n\004data\030\005 \003(\002\022\023\n\013intens"
    "ities\030\006 \003(\005\022\013\n\003seg\030\007 \003(\005\"G\n\021mp_laser_ref"
    "_data\022\020\n\010used_ray\030\001 \002(\005\022\n\n\002id\030\002 \003(\005\022\t\n\001x"
    "\030\003 \003(\002\022\t\n\001y\030\004 \003(\002", 457);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "laser_ex.proto", &protobuf_RegisterTypes);
  mp_laser_ex_para::default_instance_ = new mp_laser_ex_para();
  mp_laser_ex_data::default_instance_ = new mp_laser_ex_data();
  mp_laser_ref_data::default_instance_ = new mp_laser_ref_data();
  mp_laser_ex_para::default_instance_->InitAsDefaultInstance();
  mp_laser_ex_data::default_instance_->InitAsDefaultInstance();
  mp_laser_ref_data::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_laser_5fex_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_laser_5fex_2eproto {
  StaticDescriptorInitializer_laser_5fex_2eproto() {
    protobuf_AddDesc_laser_5fex_2eproto();
  }
} static_descriptor_initializer_laser_5fex_2eproto_;


// ===================================================================

const ::std::string mp_laser_ex_para::_default_laser_ip_;
#ifndef _MSC_VER
const int mp_laser_ex_para::kLaserIpFieldNumber;
const int mp_laser_ex_para::kLaserReverseFieldNumber;
const int mp_laser_ex_para::kLaserStartAngleFieldNumber;
const int mp_laser_ex_para::kLaserRangeMaxFieldNumber;
const int mp_laser_ex_para::kLaserRangeMinFieldNumber;
const int mp_laser_ex_para::kLaserDxFieldNumber;
const int mp_laser_ex_para::kLaserDyFieldNumber;
const int mp_laser_ex_para::kLaserResolutionFieldNumber;
const int mp_laser_ex_para::kLaserMaxRayFieldNumber;
#endif  // !_MSC_VER

mp_laser_ex_para::mp_laser_ex_para()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_laser_ex_para::InitAsDefaultInstance() {
}

mp_laser_ex_para::mp_laser_ex_para(const mp_laser_ex_para& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_laser_ex_para::SharedCtor() {
  _cached_size_ = 0;
  laser_ip_ = const_cast< ::std::string*>(&_default_laser_ip_);
  laser_reverse_ = false;
  laser_start_angle_ = 0;
  laser_range_max_ = 0;
  laser_range_min_ = 0;
  laser_dx_ = 0;
  laser_dy_ = 0;
  laser_resolution_ = 0;
  laser_max_ray_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_laser_ex_para::~mp_laser_ex_para() {
  SharedDtor();
}

void mp_laser_ex_para::SharedDtor() {
  if (laser_ip_ != &_default_laser_ip_) {
    delete laser_ip_;
  }
  if (this != default_instance_) {
  }
}

void mp_laser_ex_para::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_laser_ex_para::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_laser_ex_para_descriptor_;
}

const mp_laser_ex_para& mp_laser_ex_para::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_laser_5fex_2eproto();  return *default_instance_;
}

mp_laser_ex_para* mp_laser_ex_para::default_instance_ = NULL;

mp_laser_ex_para* mp_laser_ex_para::New() const {
  return new mp_laser_ex_para;
}

void mp_laser_ex_para::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (laser_ip_ != &_default_laser_ip_) {
        laser_ip_->clear();
      }
    }
    laser_reverse_ = false;
    laser_start_angle_ = 0;
    laser_range_max_ = 0;
    laser_range_min_ = 0;
    laser_dx_ = 0;
    laser_dy_ = 0;
    laser_resolution_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    laser_max_ray_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_laser_ex_para::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string laser_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_laser_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->laser_ip().data(), this->laser_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_laser_reverse;
        break;
      }
      
      // required bool laser_reverse = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laser_reverse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &laser_reverse_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_laser_start_angle;
        break;
      }
      
      // required float laser_start_angle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_laser_start_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &laser_start_angle_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_laser_range_max;
        break;
      }
      
      // required float laser_range_max = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_laser_range_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &laser_range_max_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_laser_range_min;
        break;
      }
      
      // required float laser_range_min = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_laser_range_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &laser_range_min_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_laser_dx;
        break;
      }
      
      // required float laser_dx = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_laser_dx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &laser_dx_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_laser_dy;
        break;
      }
      
      // required float laser_dy = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_laser_dy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &laser_dy_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_laser_resolution;
        break;
      }
      
      // required float laser_resolution = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_laser_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &laser_resolution_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_laser_max_ray;
        break;
      }
      
      // required float laser_max_ray = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_laser_max_ray:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &laser_max_ray_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_laser_ex_para::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string laser_ip = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->laser_ip().data(), this->laser_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->laser_ip(), output);
  }
  
  // required bool laser_reverse = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->laser_reverse(), output);
  }
  
  // required float laser_start_angle = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->laser_start_angle(), output);
  }
  
  // required float laser_range_max = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->laser_range_max(), output);
  }
  
  // required float laser_range_min = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->laser_range_min(), output);
  }
  
  // required float laser_dx = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->laser_dx(), output);
  }
  
  // required float laser_dy = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->laser_dy(), output);
  }
  
  // required float laser_resolution = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->laser_resolution(), output);
  }
  
  // required float laser_max_ray = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->laser_max_ray(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_laser_ex_para::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string laser_ip = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->laser_ip().data(), this->laser_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->laser_ip(), target);
  }
  
  // required bool laser_reverse = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->laser_reverse(), target);
  }
  
  // required float laser_start_angle = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->laser_start_angle(), target);
  }
  
  // required float laser_range_max = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->laser_range_max(), target);
  }
  
  // required float laser_range_min = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->laser_range_min(), target);
  }
  
  // required float laser_dx = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->laser_dx(), target);
  }
  
  // required float laser_dy = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->laser_dy(), target);
  }
  
  // required float laser_resolution = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->laser_resolution(), target);
  }
  
  // required float laser_max_ray = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->laser_max_ray(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_laser_ex_para::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string laser_ip = 1;
    if (has_laser_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->laser_ip());
    }
    
    // required bool laser_reverse = 2;
    if (has_laser_reverse()) {
      total_size += 1 + 1;
    }
    
    // required float laser_start_angle = 3;
    if (has_laser_start_angle()) {
      total_size += 1 + 4;
    }
    
    // required float laser_range_max = 4;
    if (has_laser_range_max()) {
      total_size += 1 + 4;
    }
    
    // required float laser_range_min = 5;
    if (has_laser_range_min()) {
      total_size += 1 + 4;
    }
    
    // required float laser_dx = 6;
    if (has_laser_dx()) {
      total_size += 1 + 4;
    }
    
    // required float laser_dy = 7;
    if (has_laser_dy()) {
      total_size += 1 + 4;
    }
    
    // required float laser_resolution = 8;
    if (has_laser_resolution()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float laser_max_ray = 9;
    if (has_laser_max_ray()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_laser_ex_para::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_laser_ex_para* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_laser_ex_para*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_laser_ex_para::MergeFrom(const mp_laser_ex_para& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_laser_ip(from.laser_ip());
    }
    if (from._has_bit(1)) {
      set_laser_reverse(from.laser_reverse());
    }
    if (from._has_bit(2)) {
      set_laser_start_angle(from.laser_start_angle());
    }
    if (from._has_bit(3)) {
      set_laser_range_max(from.laser_range_max());
    }
    if (from._has_bit(4)) {
      set_laser_range_min(from.laser_range_min());
    }
    if (from._has_bit(5)) {
      set_laser_dx(from.laser_dx());
    }
    if (from._has_bit(6)) {
      set_laser_dy(from.laser_dy());
    }
    if (from._has_bit(7)) {
      set_laser_resolution(from.laser_resolution());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_laser_max_ray(from.laser_max_ray());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_laser_ex_para::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_laser_ex_para::CopyFrom(const mp_laser_ex_para& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_laser_ex_para::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void mp_laser_ex_para::Swap(mp_laser_ex_para* other) {
  if (other != this) {
    std::swap(laser_ip_, other->laser_ip_);
    std::swap(laser_reverse_, other->laser_reverse_);
    std::swap(laser_start_angle_, other->laser_start_angle_);
    std::swap(laser_range_max_, other->laser_range_max_);
    std::swap(laser_range_min_, other->laser_range_min_);
    std::swap(laser_dx_, other->laser_dx_);
    std::swap(laser_dy_, other->laser_dy_);
    std::swap(laser_resolution_, other->laser_resolution_);
    std::swap(laser_max_ray_, other->laser_max_ray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_laser_ex_para::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_laser_ex_para_descriptor_;
  metadata.reflection = mp_laser_ex_para_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mp_laser_ex_data::kStampFieldNumber;
const int mp_laser_ex_data::kTimeStampFieldNumber;
const int mp_laser_ex_data::kBeanDtFieldNumber;
const int mp_laser_ex_data::kUsedRayFieldNumber;
const int mp_laser_ex_data::kDataFieldNumber;
const int mp_laser_ex_data::kIntensitiesFieldNumber;
const int mp_laser_ex_data::kSegFieldNumber;
#endif  // !_MSC_VER

mp_laser_ex_data::mp_laser_ex_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_laser_ex_data::InitAsDefaultInstance() {
}

mp_laser_ex_data::mp_laser_ex_data(const mp_laser_ex_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_laser_ex_data::SharedCtor() {
  _cached_size_ = 0;
  stamp_ = GOOGLE_ULONGLONG(0);
  time_stamp_ = 0;
  bean_dt_ = 0;
  used_ray_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_laser_ex_data::~mp_laser_ex_data() {
  SharedDtor();
}

void mp_laser_ex_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mp_laser_ex_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_laser_ex_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_laser_ex_data_descriptor_;
}

const mp_laser_ex_data& mp_laser_ex_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_laser_5fex_2eproto();  return *default_instance_;
}

mp_laser_ex_data* mp_laser_ex_data::default_instance_ = NULL;

mp_laser_ex_data* mp_laser_ex_data::New() const {
  return new mp_laser_ex_data;
}

void mp_laser_ex_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stamp_ = GOOGLE_ULONGLONG(0);
    time_stamp_ = 0;
    bean_dt_ = 0;
    used_ray_ = 0;
  }
  data_.Clear();
  intensities_.Clear();
  seg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_laser_ex_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 stamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stamp_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_time_stamp;
        break;
      }
      
      // required double time_stamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_stamp_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_bean_dt;
        break;
      }
      
      // required float bean_dt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bean_dt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bean_dt_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_used_ray;
        break;
      }
      
      // required int32 used_ray = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_ray:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_ray_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_data;
        break;
      }
      
      // repeated float data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_data;
        if (input->ExpectTag(48)) goto parse_intensities;
        break;
      }
      
      // repeated int32 intensities = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intensities:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_intensities())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_intensities())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_intensities;
        if (input->ExpectTag(56)) goto parse_seg;
        break;
      }
      
      // repeated int32 seg = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_seg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_seg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_seg;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_laser_ex_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 stamp = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stamp(), output);
  }
  
  // required double time_stamp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time_stamp(), output);
  }
  
  // required float bean_dt = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bean_dt(), output);
  }
  
  // required int32 used_ray = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->used_ray(), output);
  }
  
  // repeated float data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->data(i), output);
  }
  
  // repeated int32 intensities = 6;
  for (int i = 0; i < this->intensities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->intensities(i), output);
  }
  
  // repeated int32 seg = 7;
  for (int i = 0; i < this->seg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->seg(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_laser_ex_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 stamp = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stamp(), target);
  }
  
  // required double time_stamp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time_stamp(), target);
  }
  
  // required float bean_dt = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bean_dt(), target);
  }
  
  // required int32 used_ray = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->used_ray(), target);
  }
  
  // repeated float data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->data(i), target);
  }
  
  // repeated int32 intensities = 6;
  for (int i = 0; i < this->intensities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->intensities(i), target);
  }
  
  // repeated int32 seg = 7;
  for (int i = 0; i < this->seg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->seg(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_laser_ex_data::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 stamp = 1;
    if (has_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stamp());
    }
    
    // required double time_stamp = 2;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }
    
    // required float bean_dt = 3;
    if (has_bean_dt()) {
      total_size += 1 + 4;
    }
    
    // required int32 used_ray = 4;
    if (has_used_ray()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_ray());
    }
    
  }
  // repeated float data = 5;
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }
  
  // repeated int32 intensities = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->intensities_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->intensities(i));
    }
    total_size += 1 * this->intensities_size() + data_size;
  }
  
  // repeated int32 seg = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->seg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->seg(i));
    }
    total_size += 1 * this->seg_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_laser_ex_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_laser_ex_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_laser_ex_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_laser_ex_data::MergeFrom(const mp_laser_ex_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  intensities_.MergeFrom(from.intensities_);
  seg_.MergeFrom(from.seg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_stamp(from.stamp());
    }
    if (from._has_bit(1)) {
      set_time_stamp(from.time_stamp());
    }
    if (from._has_bit(2)) {
      set_bean_dt(from.bean_dt());
    }
    if (from._has_bit(3)) {
      set_used_ray(from.used_ray());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_laser_ex_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_laser_ex_data::CopyFrom(const mp_laser_ex_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_laser_ex_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void mp_laser_ex_data::Swap(mp_laser_ex_data* other) {
  if (other != this) {
    std::swap(stamp_, other->stamp_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(bean_dt_, other->bean_dt_);
    std::swap(used_ray_, other->used_ray_);
    data_.Swap(&other->data_);
    intensities_.Swap(&other->intensities_);
    seg_.Swap(&other->seg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_laser_ex_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_laser_ex_data_descriptor_;
  metadata.reflection = mp_laser_ex_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mp_laser_ref_data::kUsedRayFieldNumber;
const int mp_laser_ref_data::kIdFieldNumber;
const int mp_laser_ref_data::kXFieldNumber;
const int mp_laser_ref_data::kYFieldNumber;
#endif  // !_MSC_VER

mp_laser_ref_data::mp_laser_ref_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_laser_ref_data::InitAsDefaultInstance() {
}

mp_laser_ref_data::mp_laser_ref_data(const mp_laser_ref_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_laser_ref_data::SharedCtor() {
  _cached_size_ = 0;
  used_ray_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_laser_ref_data::~mp_laser_ref_data() {
  SharedDtor();
}

void mp_laser_ref_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mp_laser_ref_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_laser_ref_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_laser_ref_data_descriptor_;
}

const mp_laser_ref_data& mp_laser_ref_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_laser_5fex_2eproto();  return *default_instance_;
}

mp_laser_ref_data* mp_laser_ref_data::default_instance_ = NULL;

mp_laser_ref_data* mp_laser_ref_data::New() const {
  return new mp_laser_ref_data;
}

void mp_laser_ref_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    used_ray_ = 0;
  }
  id_.Clear();
  x_.Clear();
  y_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_laser_ref_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 used_ray = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_ray_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // repeated int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        if (input->ExpectTag(29)) goto parse_x;
        break;
      }
      
      // repeated float x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_x())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_x())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_x;
        if (input->ExpectTag(37)) goto parse_y;
        break;
      }
      
      // repeated float y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_y())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_y())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_y;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_laser_ref_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 used_ray = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->used_ray(), output);
  }
  
  // repeated int32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->id(i), output);
  }
  
  // repeated float x = 3;
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->x(i), output);
  }
  
  // repeated float y = 4;
  for (int i = 0; i < this->y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->y(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_laser_ref_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 used_ray = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->used_ray(), target);
  }
  
  // repeated int32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->id(i), target);
  }
  
  // repeated float x = 3;
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->x(i), target);
  }
  
  // repeated float y = 4;
  for (int i = 0; i < this->y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->y(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_laser_ref_data::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 used_ray = 1;
    if (has_used_ray()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->used_ray());
    }
    
  }
  // repeated int32 id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }
  
  // repeated float x = 3;
  {
    int data_size = 0;
    data_size = 4 * this->x_size();
    total_size += 1 * this->x_size() + data_size;
  }
  
  // repeated float y = 4;
  {
    int data_size = 0;
    data_size = 4 * this->y_size();
    total_size += 1 * this->y_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_laser_ref_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_laser_ref_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_laser_ref_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_laser_ref_data::MergeFrom(const mp_laser_ref_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_used_ray(from.used_ray());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_laser_ref_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_laser_ref_data::CopyFrom(const mp_laser_ref_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_laser_ref_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void mp_laser_ref_data::Swap(mp_laser_ref_data* other) {
  if (other != this) {
    std::swap(used_ray_, other->used_ray_);
    id_.Swap(&other->id_);
    x_.Swap(&other->x_);
    y_.Swap(&other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_laser_ref_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_laser_ref_data_descriptor_;
  metadata.reflection = mp_laser_ref_data_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pallet_cargo.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KPS {

namespace {

const ::google::protobuf::Descriptor* mp_pallet_cargo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_pallet_cargo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pallet_5fcargo_2eproto() {
  protobuf_AddDesc_pallet_5fcargo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pallet_cargo.proto");
  GOOGLE_CHECK(file != NULL);
  mp_pallet_cargo_descriptor_ = file->message_type(0);
  static const int mp_pallet_cargo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_cargo, auto_create_pallet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_cargo, auto_destruct_pallet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_cargo, pallet_type_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_cargo, cargo_type_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_cargo, ms_produce_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_cargo, ms_consume_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_cargo, full_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_cargo, current_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_cargo, cargo_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_cargo, operation_list_),
  };
  mp_pallet_cargo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_pallet_cargo_descriptor_,
      mp_pallet_cargo::default_instance_,
      mp_pallet_cargo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_cargo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_cargo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_pallet_cargo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pallet_5fcargo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_pallet_cargo_descriptor_, &mp_pallet_cargo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pallet_5fcargo_2eproto() {
  delete mp_pallet_cargo::default_instance_;
  delete mp_pallet_cargo_reflection_;
}

void protobuf_AddDesc_pallet_5fcargo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022pallet_cargo.proto\022\003KPS\"\205\002\n\017mp_pallet_"
    "cargo\022\032\n\022auto_create_pallet\030\001 \002(\010\022\034\n\024aut"
    "o_destruct_pallet\030\002 \002(\010\022\030\n\020pallet_type_u"
    "uid\030\003 \002(\t\022\027\n\017cargo_type_uuid\030\004 \002(\t\022\027\n\017ms"
    "_produce_time\030\005 \002(\r\022\027\n\017ms_consume_time\030\006"
    " \002(\r\022\021\n\tfull_size\030\007 \002(\r\022\024\n\014current_size\030"
    "\010 \002(\r\022\022\n\ncargo_uuid\030\t \003(\t\022\026\n\016operation_l"
    "ist\030\n \002(\t", 289);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pallet_cargo.proto", &protobuf_RegisterTypes);
  mp_pallet_cargo::default_instance_ = new mp_pallet_cargo();
  mp_pallet_cargo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pallet_5fcargo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pallet_5fcargo_2eproto {
  StaticDescriptorInitializer_pallet_5fcargo_2eproto() {
    protobuf_AddDesc_pallet_5fcargo_2eproto();
  }
} static_descriptor_initializer_pallet_5fcargo_2eproto_;


// ===================================================================

const ::std::string mp_pallet_cargo::_default_pallet_type_uuid_;
const ::std::string mp_pallet_cargo::_default_cargo_type_uuid_;
const ::std::string mp_pallet_cargo::_default_operation_list_;
#ifndef _MSC_VER
const int mp_pallet_cargo::kAutoCreatePalletFieldNumber;
const int mp_pallet_cargo::kAutoDestructPalletFieldNumber;
const int mp_pallet_cargo::kPalletTypeUuidFieldNumber;
const int mp_pallet_cargo::kCargoTypeUuidFieldNumber;
const int mp_pallet_cargo::kMsProduceTimeFieldNumber;
const int mp_pallet_cargo::kMsConsumeTimeFieldNumber;
const int mp_pallet_cargo::kFullSizeFieldNumber;
const int mp_pallet_cargo::kCurrentSizeFieldNumber;
const int mp_pallet_cargo::kCargoUuidFieldNumber;
const int mp_pallet_cargo::kOperationListFieldNumber;
#endif  // !_MSC_VER

mp_pallet_cargo::mp_pallet_cargo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_pallet_cargo::InitAsDefaultInstance() {
}

mp_pallet_cargo::mp_pallet_cargo(const mp_pallet_cargo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_pallet_cargo::SharedCtor() {
  _cached_size_ = 0;
  auto_create_pallet_ = false;
  auto_destruct_pallet_ = false;
  pallet_type_uuid_ = const_cast< ::std::string*>(&_default_pallet_type_uuid_);
  cargo_type_uuid_ = const_cast< ::std::string*>(&_default_cargo_type_uuid_);
  ms_produce_time_ = 0u;
  ms_consume_time_ = 0u;
  full_size_ = 0u;
  current_size_ = 0u;
  operation_list_ = const_cast< ::std::string*>(&_default_operation_list_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_pallet_cargo::~mp_pallet_cargo() {
  SharedDtor();
}

void mp_pallet_cargo::SharedDtor() {
  if (pallet_type_uuid_ != &_default_pallet_type_uuid_) {
    delete pallet_type_uuid_;
  }
  if (cargo_type_uuid_ != &_default_cargo_type_uuid_) {
    delete cargo_type_uuid_;
  }
  if (operation_list_ != &_default_operation_list_) {
    delete operation_list_;
  }
  if (this != default_instance_) {
  }
}

void mp_pallet_cargo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_pallet_cargo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_pallet_cargo_descriptor_;
}

const mp_pallet_cargo& mp_pallet_cargo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pallet_5fcargo_2eproto();  return *default_instance_;
}

mp_pallet_cargo* mp_pallet_cargo::default_instance_ = NULL;

mp_pallet_cargo* mp_pallet_cargo::New() const {
  return new mp_pallet_cargo;
}

void mp_pallet_cargo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    auto_create_pallet_ = false;
    auto_destruct_pallet_ = false;
    if (_has_bit(2)) {
      if (pallet_type_uuid_ != &_default_pallet_type_uuid_) {
        pallet_type_uuid_->clear();
      }
    }
    if (_has_bit(3)) {
      if (cargo_type_uuid_ != &_default_cargo_type_uuid_) {
        cargo_type_uuid_->clear();
      }
    }
    ms_produce_time_ = 0u;
    ms_consume_time_ = 0u;
    full_size_ = 0u;
    current_size_ = 0u;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (_has_bit(9)) {
      if (operation_list_ != &_default_operation_list_) {
        operation_list_->clear();
      }
    }
  }
  cargo_uuid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_pallet_cargo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool auto_create_pallet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_create_pallet_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_auto_destruct_pallet;
        break;
      }
      
      // required bool auto_destruct_pallet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_destruct_pallet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_destruct_pallet_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pallet_type_uuid;
        break;
      }
      
      // required string pallet_type_uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pallet_type_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pallet_type_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pallet_type_uuid().data(), this->pallet_type_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cargo_type_uuid;
        break;
      }
      
      // required string cargo_type_uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cargo_type_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cargo_type_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cargo_type_uuid().data(), this->cargo_type_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ms_produce_time;
        break;
      }
      
      // required uint32 ms_produce_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ms_produce_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ms_produce_time_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ms_consume_time;
        break;
      }
      
      // required uint32 ms_consume_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ms_consume_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ms_consume_time_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_full_size;
        break;
      }
      
      // required uint32 full_size = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_full_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &full_size_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_current_size;
        break;
      }
      
      // required uint32 current_size = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_size_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_cargo_uuid;
        break;
      }
      
      // repeated string cargo_uuid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cargo_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cargo_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cargo_uuid(0).data(), this->cargo_uuid(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_cargo_uuid;
        if (input->ExpectTag(82)) goto parse_operation_list;
        break;
      }
      
      // required string operation_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operation_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operation_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operation_list().data(), this->operation_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_pallet_cargo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool auto_create_pallet = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->auto_create_pallet(), output);
  }
  
  // required bool auto_destruct_pallet = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->auto_destruct_pallet(), output);
  }
  
  // required string pallet_type_uuid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pallet_type_uuid().data(), this->pallet_type_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pallet_type_uuid(), output);
  }
  
  // required string cargo_type_uuid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cargo_type_uuid().data(), this->cargo_type_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cargo_type_uuid(), output);
  }
  
  // required uint32 ms_produce_time = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ms_produce_time(), output);
  }
  
  // required uint32 ms_consume_time = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ms_consume_time(), output);
  }
  
  // required uint32 full_size = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->full_size(), output);
  }
  
  // required uint32 current_size = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->current_size(), output);
  }
  
  // repeated string cargo_uuid = 9;
  for (int i = 0; i < this->cargo_uuid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->cargo_uuid(i).data(), this->cargo_uuid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->cargo_uuid(i), output);
  }
  
  // required string operation_list = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operation_list().data(), this->operation_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->operation_list(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_pallet_cargo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool auto_create_pallet = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->auto_create_pallet(), target);
  }
  
  // required bool auto_destruct_pallet = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->auto_destruct_pallet(), target);
  }
  
  // required string pallet_type_uuid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pallet_type_uuid().data(), this->pallet_type_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pallet_type_uuid(), target);
  }
  
  // required string cargo_type_uuid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cargo_type_uuid().data(), this->cargo_type_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cargo_type_uuid(), target);
  }
  
  // required uint32 ms_produce_time = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ms_produce_time(), target);
  }
  
  // required uint32 ms_consume_time = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ms_consume_time(), target);
  }
  
  // required uint32 full_size = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->full_size(), target);
  }
  
  // required uint32 current_size = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->current_size(), target);
  }
  
  // repeated string cargo_uuid = 9;
  for (int i = 0; i < this->cargo_uuid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cargo_uuid(i).data(), this->cargo_uuid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->cargo_uuid(i), target);
  }
  
  // required string operation_list = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operation_list().data(), this->operation_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->operation_list(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_pallet_cargo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool auto_create_pallet = 1;
    if (has_auto_create_pallet()) {
      total_size += 1 + 1;
    }
    
    // required bool auto_destruct_pallet = 2;
    if (has_auto_destruct_pallet()) {
      total_size += 1 + 1;
    }
    
    // required string pallet_type_uuid = 3;
    if (has_pallet_type_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pallet_type_uuid());
    }
    
    // required string cargo_type_uuid = 4;
    if (has_cargo_type_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cargo_type_uuid());
    }
    
    // required uint32 ms_produce_time = 5;
    if (has_ms_produce_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ms_produce_time());
    }
    
    // required uint32 ms_consume_time = 6;
    if (has_ms_consume_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ms_consume_time());
    }
    
    // required uint32 full_size = 7;
    if (has_full_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->full_size());
    }
    
    // required uint32 current_size = 8;
    if (has_current_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_size());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required string operation_list = 10;
    if (has_operation_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operation_list());
    }
    
  }
  // repeated string cargo_uuid = 9;
  total_size += 1 * this->cargo_uuid_size();
  for (int i = 0; i < this->cargo_uuid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cargo_uuid(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_pallet_cargo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_pallet_cargo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_pallet_cargo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_pallet_cargo::MergeFrom(const mp_pallet_cargo& from) {
  GOOGLE_CHECK_NE(&from, this);
  cargo_uuid_.MergeFrom(from.cargo_uuid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_auto_create_pallet(from.auto_create_pallet());
    }
    if (from._has_bit(1)) {
      set_auto_destruct_pallet(from.auto_destruct_pallet());
    }
    if (from._has_bit(2)) {
      set_pallet_type_uuid(from.pallet_type_uuid());
    }
    if (from._has_bit(3)) {
      set_cargo_type_uuid(from.cargo_type_uuid());
    }
    if (from._has_bit(4)) {
      set_ms_produce_time(from.ms_produce_time());
    }
    if (from._has_bit(5)) {
      set_ms_consume_time(from.ms_consume_time());
    }
    if (from._has_bit(6)) {
      set_full_size(from.full_size());
    }
    if (from._has_bit(7)) {
      set_current_size(from.current_size());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from._has_bit(9)) {
      set_operation_list(from.operation_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_pallet_cargo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_pallet_cargo::CopyFrom(const mp_pallet_cargo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_pallet_cargo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000002ff) != 0x000002ff) return false;
  
  return true;
}

void mp_pallet_cargo::Swap(mp_pallet_cargo* other) {
  if (other != this) {
    std::swap(auto_create_pallet_, other->auto_create_pallet_);
    std::swap(auto_destruct_pallet_, other->auto_destruct_pallet_);
    std::swap(pallet_type_uuid_, other->pallet_type_uuid_);
    std::swap(cargo_type_uuid_, other->cargo_type_uuid_);
    std::swap(ms_produce_time_, other->ms_produce_time_);
    std::swap(ms_consume_time_, other->ms_consume_time_);
    std::swap(full_size_, other->full_size_);
    std::swap(current_size_, other->current_size_);
    cargo_uuid_.Swap(&other->cargo_uuid_);
    std::swap(operation_list_, other->operation_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_pallet_cargo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_pallet_cargo_descriptor_;
  metadata.reflection = mp_pallet_cargo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "reflector.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KPS {

namespace {

const ::google::protobuf::Descriptor* mp_refector_ref_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_refector_ref_reflection_ = NULL;
const ::google::protobuf::Descriptor* mp_refector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_refector_reflection_ = NULL;
const ::google::protobuf::Descriptor* mp_refs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_refs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_reflector_2eproto() {
  protobuf_AddDesc_reflector_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "reflector.proto");
  GOOGLE_CHECK(file != NULL);
  mp_refector_ref_descriptor_ = file->message_type(0);
  static const int mp_refector_ref_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_refector_ref, ref_id__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_refector_ref, ref_dis__),
  };
  mp_refector_ref_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_refector_ref_descriptor_,
      mp_refector_ref::default_instance_,
      mp_refector_ref_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_refector_ref, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_refector_ref, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_refector_ref));
  mp_refector_descriptor_ = file->message_type(1);
  static const int mp_refector_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_refector, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_refector, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_refector, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_refector, ref__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_refector, lab_id_),
  };
  mp_refector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_refector_descriptor_,
      mp_refector::default_instance_,
      mp_refector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_refector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_refector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_refector));
  mp_refs_descriptor_ = file->message_type(2);
  static const int mp_refs_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_refs, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_refs, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_refs, y_),
  };
  mp_refs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_refs_descriptor_,
      mp_refs::default_instance_,
      mp_refs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_refs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_refs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_refs));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_reflector_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_refector_ref_descriptor_, &mp_refector_ref::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_refector_descriptor_, &mp_refector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_refs_descriptor_, &mp_refs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_reflector_2eproto() {
  delete mp_refector_ref::default_instance_;
  delete mp_refector_ref_reflection_;
  delete mp_refector::default_instance_;
  delete mp_refector_reflection_;
  delete mp_refs::default_instance_;
  delete mp_refs_reflection_;
}

void protobuf_AddDesc_reflector_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017reflector.proto\022\003KPS\"4\n\017mp_refector_re"
    "f\022\017\n\007ref_id_\030\001 \002(\r\022\020\n\010ref_dis_\030\002 \002(\002\"c\n\013"
    "mp_refector\022\n\n\002id\030\001 \002(\r\022\t\n\001x\030\002 \002(\002\022\t\n\001y\030"
    "\003 \002(\002\022\"\n\004ref_\030\004 \003(\0132\024.KPS.mp_refector_re"
    "f\022\016\n\006lab_id\030\005 \001(\r\"+\n\007mp_refs\022\n\n\002id\030\001 \003(\r"
    "\022\t\n\001x\030\002 \003(\002\022\t\n\001y\030\003 \003(\002", 222);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "reflector.proto", &protobuf_RegisterTypes);
  mp_refector_ref::default_instance_ = new mp_refector_ref();
  mp_refector::default_instance_ = new mp_refector();
  mp_refs::default_instance_ = new mp_refs();
  mp_refector_ref::default_instance_->InitAsDefaultInstance();
  mp_refector::default_instance_->InitAsDefaultInstance();
  mp_refs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_reflector_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_reflector_2eproto {
  StaticDescriptorInitializer_reflector_2eproto() {
    protobuf_AddDesc_reflector_2eproto();
  }
} static_descriptor_initializer_reflector_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int mp_refector_ref::kRefIdFieldNumber;
const int mp_refector_ref::kRefDisFieldNumber;
#endif  // !_MSC_VER

mp_refector_ref::mp_refector_ref()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_refector_ref::InitAsDefaultInstance() {
}

mp_refector_ref::mp_refector_ref(const mp_refector_ref& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_refector_ref::SharedCtor() {
  _cached_size_ = 0;
  ref_id__ = 0u;
  ref_dis__ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_refector_ref::~mp_refector_ref() {
  SharedDtor();
}

void mp_refector_ref::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mp_refector_ref::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_refector_ref::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_refector_ref_descriptor_;
}

const mp_refector_ref& mp_refector_ref::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_reflector_2eproto();  return *default_instance_;
}

mp_refector_ref* mp_refector_ref::default_instance_ = NULL;

mp_refector_ref* mp_refector_ref::New() const {
  return new mp_refector_ref;
}

void mp_refector_ref::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ref_id__ = 0u;
    ref_dis__ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_refector_ref::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ref_id_ = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ref_id__)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_ref_dis_;
        break;
      }
      
      // required float ref_dis_ = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ref_dis_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ref_dis__)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_refector_ref::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ref_id_ = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ref_id_(), output);
  }
  
  // required float ref_dis_ = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ref_dis_(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_refector_ref::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ref_id_ = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ref_id_(), target);
  }
  
  // required float ref_dis_ = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ref_dis_(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_refector_ref::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ref_id_ = 1;
    if (has_ref_id_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ref_id_());
    }
    
    // required float ref_dis_ = 2;
    if (has_ref_dis_()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_refector_ref::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_refector_ref* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_refector_ref*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_refector_ref::MergeFrom(const mp_refector_ref& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ref_id_(from.ref_id_());
    }
    if (from._has_bit(1)) {
      set_ref_dis_(from.ref_dis_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_refector_ref::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_refector_ref::CopyFrom(const mp_refector_ref& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_refector_ref::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void mp_refector_ref::Swap(mp_refector_ref* other) {
  if (other != this) {
    std::swap(ref_id__, other->ref_id__);
    std::swap(ref_dis__, other->ref_dis__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_refector_ref::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_refector_ref_descriptor_;
  metadata.reflection = mp_refector_ref_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mp_refector::kIdFieldNumber;
const int mp_refector::kXFieldNumber;
const int mp_refector::kYFieldNumber;
const int mp_refector::kRefFieldNumber;
const int mp_refector::kLabIdFieldNumber;
#endif  // !_MSC_VER

mp_refector::mp_refector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_refector::InitAsDefaultInstance() {
}

mp_refector::mp_refector(const mp_refector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_refector::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  x_ = 0;
  y_ = 0;
  lab_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_refector::~mp_refector() {
  SharedDtor();
}

void mp_refector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mp_refector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_refector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_refector_descriptor_;
}

const mp_refector& mp_refector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_reflector_2eproto();  return *default_instance_;
}

mp_refector* mp_refector::default_instance_ = NULL;

mp_refector* mp_refector::New() const {
  return new mp_refector;
}

void mp_refector::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    x_ = 0;
    y_ = 0;
    lab_id_ = 0u;
  }
  ref__.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_refector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }
      
      // required float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }
      
      // required float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ref_;
        break;
      }
      
      // repeated .KPS.mp_refector_ref ref_ = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ref_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ref_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ref_;
        if (input->ExpectTag(40)) goto parse_lab_id;
        break;
      }
      
      // optional uint32 lab_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lab_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lab_id_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_refector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required float x = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }
  
  // required float y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }
  
  // repeated .KPS.mp_refector_ref ref_ = 4;
  for (int i = 0; i < this->ref__size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ref_(i), output);
  }
  
  // optional uint32 lab_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lab_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_refector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required float x = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }
  
  // required float y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }
  
  // repeated .KPS.mp_refector_ref ref_ = 4;
  for (int i = 0; i < this->ref__size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ref_(i), target);
  }
  
  // optional uint32 lab_id = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lab_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_refector::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 lab_id = 5;
    if (has_lab_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lab_id());
    }
    
  }
  // repeated .KPS.mp_refector_ref ref_ = 4;
  total_size += 1 * this->ref__size();
  for (int i = 0; i < this->ref__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ref_(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_refector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_refector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_refector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_refector::MergeFrom(const mp_refector& from) {
  GOOGLE_CHECK_NE(&from, this);
  ref__.MergeFrom(from.ref__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_x(from.x());
    }
    if (from._has_bit(2)) {
      set_y(from.y());
    }
    if (from._has_bit(4)) {
      set_lab_id(from.lab_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_refector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_refector::CopyFrom(const mp_refector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_refector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < ref__size(); i++) {
    if (!this->ref_(i).IsInitialized()) return false;
  }
  return true;
}

void mp_refector::Swap(mp_refector* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    ref__.Swap(&other->ref__);
    std::swap(lab_id_, other->lab_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_refector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_refector_descriptor_;
  metadata.reflection = mp_refector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mp_refs::kIdFieldNumber;
const int mp_refs::kXFieldNumber;
const int mp_refs::kYFieldNumber;
#endif  // !_MSC_VER

mp_refs::mp_refs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_refs::InitAsDefaultInstance() {
}

mp_refs::mp_refs(const mp_refs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_refs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_refs::~mp_refs() {
  SharedDtor();
}

void mp_refs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mp_refs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_refs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_refs_descriptor_;
}

const mp_refs& mp_refs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_reflector_2eproto();  return *default_instance_;
}

mp_refs* mp_refs::default_instance_ = NULL;

mp_refs* mp_refs::New() const {
  return new mp_refs;
}

void mp_refs::Clear() {
  id_.Clear();
  x_.Clear();
  y_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_refs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }
      
      // repeated float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_x())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_x())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }
      
      // repeated float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_y())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_y())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_refs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->id(i), output);
  }
  
  // repeated float x = 2;
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->x(i), output);
  }
  
  // repeated float y = 3;
  for (int i = 0; i < this->y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->y(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_refs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->id(i), target);
  }
  
  // repeated float x = 2;
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->x(i), target);
  }
  
  // repeated float y = 3;
  for (int i = 0; i < this->y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->y(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_refs::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }
  
  // repeated float x = 2;
  {
    int data_size = 0;
    data_size = 4 * this->x_size();
    total_size += 1 * this->x_size() + data_size;
  }
  
  // repeated float y = 3;
  {
    int data_size = 0;
    data_size = 4 * this->y_size();
    total_size += 1 * this->y_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_refs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_refs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_refs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_refs::MergeFrom(const mp_refs& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_refs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_refs::CopyFrom(const mp_refs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_refs::IsInitialized() const {
  
  return true;
}

void mp_refs::Swap(mp_refs* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    x_.Swap(&other->x_);
    y_.Swap(&other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_refs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_refs_descriptor_;
  metadata.reflection = mp_refs_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pallet.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KPS {

namespace {

const ::google::protobuf::Descriptor* mp_pallet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_pallet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pallet_2eproto() {
  protobuf_AddDesc_pallet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pallet.proto");
  GOOGLE_CHECK(file != NULL);
  mp_pallet_descriptor_ = file->message_type(0);
  static const int mp_pallet_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet, pallet_type_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet, pallet_cargo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet, full_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet, empty_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet, cur_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet, cur_volume_),
  };
  mp_pallet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_pallet_descriptor_,
      mp_pallet::default_instance_,
      mp_pallet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_pallet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pallet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_pallet_descriptor_, &mp_pallet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pallet_2eproto() {
  delete mp_pallet::default_instance_;
  delete mp_pallet_reflection_;
}

void protobuf_AddDesc_pallet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::KPS::protobuf_AddDesc_base_2eproto();
  ::KPS::protobuf_AddDesc_cargo_5ftype_2eproto();
  ::KPS::protobuf_AddDesc_pallet_5ftype_2eproto();
  ::KPS::protobuf_AddDesc_pallet_5fcargo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014pallet.proto\022\003KPS\032\nbase.proto\032\020cargo_t"
    "ype.proto\032\021pallet_type.proto\032\022pallet_car"
    "go.proto\"\275\001\n\tmp_pallet\022\037\n\004base\030\001 \002(\0132\021.K"
    "PS.mp_item_base\022\030\n\020pallet_type_uuid\030\002 \002("
    "\t\022*\n\014pallet_cargo\030\003 \001(\0132\024.KPS.mp_pallet_"
    "cargo\022\017\n\007full_ok\030\004 \001(\010\022\020\n\010empty_ok\030\005 \001(\010"
    "\022\022\n\ncur_weight\030\006 \001(\t\022\022\n\ncur_volume\030\007 \001(\t", 280);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pallet.proto", &protobuf_RegisterTypes);
  mp_pallet::default_instance_ = new mp_pallet();
  mp_pallet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pallet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pallet_2eproto {
  StaticDescriptorInitializer_pallet_2eproto() {
    protobuf_AddDesc_pallet_2eproto();
  }
} static_descriptor_initializer_pallet_2eproto_;


// ===================================================================

const ::std::string mp_pallet::_default_pallet_type_uuid_;
const ::std::string mp_pallet::_default_cur_weight_;
const ::std::string mp_pallet::_default_cur_volume_;
#ifndef _MSC_VER
const int mp_pallet::kBaseFieldNumber;
const int mp_pallet::kPalletTypeUuidFieldNumber;
const int mp_pallet::kPalletCargoFieldNumber;
const int mp_pallet::kFullOkFieldNumber;
const int mp_pallet::kEmptyOkFieldNumber;
const int mp_pallet::kCurWeightFieldNumber;
const int mp_pallet::kCurVolumeFieldNumber;
#endif  // !_MSC_VER

mp_pallet::mp_pallet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_pallet::InitAsDefaultInstance() {
  base_ = const_cast< ::KPS::mp_item_base*>(&::KPS::mp_item_base::default_instance());
  pallet_cargo_ = const_cast< ::KPS::mp_pallet_cargo*>(&::KPS::mp_pallet_cargo::default_instance());
}

mp_pallet::mp_pallet(const mp_pallet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_pallet::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  pallet_type_uuid_ = const_cast< ::std::string*>(&_default_pallet_type_uuid_);
  pallet_cargo_ = NULL;
  full_ok_ = false;
  empty_ok_ = false;
  cur_weight_ = const_cast< ::std::string*>(&_default_cur_weight_);
  cur_volume_ = const_cast< ::std::string*>(&_default_cur_volume_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_pallet::~mp_pallet() {
  SharedDtor();
}

void mp_pallet::SharedDtor() {
  if (pallet_type_uuid_ != &_default_pallet_type_uuid_) {
    delete pallet_type_uuid_;
  }
  if (cur_weight_ != &_default_cur_weight_) {
    delete cur_weight_;
  }
  if (cur_volume_ != &_default_cur_volume_) {
    delete cur_volume_;
  }
  if (this != default_instance_) {
    delete base_;
    delete pallet_cargo_;
  }
}

void mp_pallet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_pallet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_pallet_descriptor_;
}

const mp_pallet& mp_pallet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pallet_2eproto();  return *default_instance_;
}

mp_pallet* mp_pallet::default_instance_ = NULL;

mp_pallet* mp_pallet::New() const {
  return new mp_pallet;
}

void mp_pallet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (base_ != NULL) base_->::KPS::mp_item_base::Clear();
    }
    if (_has_bit(1)) {
      if (pallet_type_uuid_ != &_default_pallet_type_uuid_) {
        pallet_type_uuid_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pallet_cargo_ != NULL) pallet_cargo_->::KPS::mp_pallet_cargo::Clear();
    }
    full_ok_ = false;
    empty_ok_ = false;
    if (_has_bit(5)) {
      if (cur_weight_ != &_default_cur_weight_) {
        cur_weight_->clear();
      }
    }
    if (_has_bit(6)) {
      if (cur_volume_ != &_default_cur_volume_) {
        cur_volume_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_pallet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KPS.mp_item_base base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pallet_type_uuid;
        break;
      }
      
      // required string pallet_type_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pallet_type_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pallet_type_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pallet_type_uuid().data(), this->pallet_type_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pallet_cargo;
        break;
      }
      
      // optional .KPS.mp_pallet_cargo pallet_cargo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pallet_cargo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pallet_cargo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_full_ok;
        break;
      }
      
      // optional bool full_ok = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_full_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &full_ok_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_empty_ok;
        break;
      }
      
      // optional bool empty_ok = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_empty_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &empty_ok_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cur_weight;
        break;
      }
      
      // optional string cur_weight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cur_weight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cur_weight()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cur_weight().data(), this->cur_weight().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_cur_volume;
        break;
      }
      
      // optional string cur_volume = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cur_volume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cur_volume()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cur_volume().data(), this->cur_volume().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_pallet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KPS.mp_item_base base = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // required string pallet_type_uuid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pallet_type_uuid().data(), this->pallet_type_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pallet_type_uuid(), output);
  }
  
  // optional .KPS.mp_pallet_cargo pallet_cargo = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pallet_cargo(), output);
  }
  
  // optional bool full_ok = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->full_ok(), output);
  }
  
  // optional bool empty_ok = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->empty_ok(), output);
  }
  
  // optional string cur_weight = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cur_weight().data(), this->cur_weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->cur_weight(), output);
  }
  
  // optional string cur_volume = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cur_volume().data(), this->cur_volume().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->cur_volume(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_pallet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KPS.mp_item_base base = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // required string pallet_type_uuid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pallet_type_uuid().data(), this->pallet_type_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pallet_type_uuid(), target);
  }
  
  // optional .KPS.mp_pallet_cargo pallet_cargo = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pallet_cargo(), target);
  }
  
  // optional bool full_ok = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->full_ok(), target);
  }
  
  // optional bool empty_ok = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->empty_ok(), target);
  }
  
  // optional string cur_weight = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cur_weight().data(), this->cur_weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cur_weight(), target);
  }
  
  // optional string cur_volume = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cur_volume().data(), this->cur_volume().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->cur_volume(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_pallet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KPS.mp_item_base base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // required string pallet_type_uuid = 2;
    if (has_pallet_type_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pallet_type_uuid());
    }
    
    // optional .KPS.mp_pallet_cargo pallet_cargo = 3;
    if (has_pallet_cargo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pallet_cargo());
    }
    
    // optional bool full_ok = 4;
    if (has_full_ok()) {
      total_size += 1 + 1;
    }
    
    // optional bool empty_ok = 5;
    if (has_empty_ok()) {
      total_size += 1 + 1;
    }
    
    // optional string cur_weight = 6;
    if (has_cur_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cur_weight());
    }
    
    // optional string cur_volume = 7;
    if (has_cur_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cur_volume());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_pallet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_pallet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_pallet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_pallet::MergeFrom(const mp_pallet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_base()->::KPS::mp_item_base::MergeFrom(from.base());
    }
    if (from._has_bit(1)) {
      set_pallet_type_uuid(from.pallet_type_uuid());
    }
    if (from._has_bit(2)) {
      mutable_pallet_cargo()->::KPS::mp_pallet_cargo::MergeFrom(from.pallet_cargo());
    }
    if (from._has_bit(3)) {
      set_full_ok(from.full_ok());
    }
    if (from._has_bit(4)) {
      set_empty_ok(from.empty_ok());
    }
    if (from._has_bit(5)) {
      set_cur_weight(from.cur_weight());
    }
    if (from._has_bit(6)) {
      set_cur_volume(from.cur_volume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_pallet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_pallet::CopyFrom(const mp_pallet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_pallet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (has_pallet_cargo()) {
    if (!this->pallet_cargo().IsInitialized()) return false;
  }
  return true;
}

void mp_pallet::Swap(mp_pallet* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(pallet_type_uuid_, other->pallet_type_uuid_);
    std::swap(pallet_cargo_, other->pallet_cargo_);
    std::swap(full_ok_, other->full_ok_);
    std::swap(empty_ok_, other->empty_ok_);
    std::swap(cur_weight_, other->cur_weight_);
    std::swap(cur_volume_, other->cur_volume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_pallet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_pallet_descriptor_;
  metadata.reflection = mp_pallet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

// @@protoc_insertion_point(global_scope)

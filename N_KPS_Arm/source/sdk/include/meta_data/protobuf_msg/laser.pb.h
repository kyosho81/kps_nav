// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: laser.proto

#ifndef PROTOBUF_laser_2eproto__INCLUDED
#define PROTOBUF_laser_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace KPS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_laser_2eproto();
void protobuf_AssignDesc_laser_2eproto();
void protobuf_ShutdownFile_laser_2eproto();

class mp_laser_para;
class mp_laser_data;
class mp_chk_laser_range;

enum mp_chk_laser_range_Range_Type {
  mp_chk_laser_range_Range_Type_FIX_SLOW = 0,
  mp_chk_laser_range_Range_Type_FIX_STOP_IN = 1,
  mp_chk_laser_range_Range_Type_FIX_STOP_OUT = 2,
  mp_chk_laser_range_Range_Type_DY_ROT = 3,
  mp_chk_laser_range_Range_Type_DY_ROTGO = 4
};
bool mp_chk_laser_range_Range_Type_IsValid(int value);
const mp_chk_laser_range_Range_Type mp_chk_laser_range_Range_Type_Range_Type_MIN = mp_chk_laser_range_Range_Type_FIX_SLOW;
const mp_chk_laser_range_Range_Type mp_chk_laser_range_Range_Type_Range_Type_MAX = mp_chk_laser_range_Range_Type_DY_ROTGO;
const int mp_chk_laser_range_Range_Type_Range_Type_ARRAYSIZE = mp_chk_laser_range_Range_Type_Range_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* mp_chk_laser_range_Range_Type_descriptor();
inline const ::std::string& mp_chk_laser_range_Range_Type_Name(mp_chk_laser_range_Range_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    mp_chk_laser_range_Range_Type_descriptor(), value);
}
inline bool mp_chk_laser_range_Range_Type_Parse(
    const ::std::string& name, mp_chk_laser_range_Range_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<mp_chk_laser_range_Range_Type>(
    mp_chk_laser_range_Range_Type_descriptor(), name, value);
}
// ===================================================================

class mp_laser_para : public ::google::protobuf::Message {
 public:
  mp_laser_para();
  virtual ~mp_laser_para();
  
  mp_laser_para(const mp_laser_para& from);
  
  inline mp_laser_para& operator=(const mp_laser_para& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mp_laser_para& default_instance();
  
  void Swap(mp_laser_para* other);
  
  // implements Message ----------------------------------------------
  
  mp_laser_para* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mp_laser_para& from);
  void MergeFrom(const mp_laser_para& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string laser_ip = 1;
  inline bool has_laser_ip() const;
  inline void clear_laser_ip();
  static const int kLaserIpFieldNumber = 1;
  inline const ::std::string& laser_ip() const;
  inline void set_laser_ip(const ::std::string& value);
  inline void set_laser_ip(const char* value);
  inline void set_laser_ip(const char* value, size_t size);
  inline ::std::string* mutable_laser_ip();
  
  // required bool laser_reverse = 2;
  inline bool has_laser_reverse() const;
  inline void clear_laser_reverse();
  static const int kLaserReverseFieldNumber = 2;
  inline bool laser_reverse() const;
  inline void set_laser_reverse(bool value);
  
  // required float laser_start_angle = 3;
  inline bool has_laser_start_angle() const;
  inline void clear_laser_start_angle();
  static const int kLaserStartAngleFieldNumber = 3;
  inline float laser_start_angle() const;
  inline void set_laser_start_angle(float value);
  
  // required float laser_range_max = 4;
  inline bool has_laser_range_max() const;
  inline void clear_laser_range_max();
  static const int kLaserRangeMaxFieldNumber = 4;
  inline float laser_range_max() const;
  inline void set_laser_range_max(float value);
  
  // required float laser_range_min = 5;
  inline bool has_laser_range_min() const;
  inline void clear_laser_range_min();
  static const int kLaserRangeMinFieldNumber = 5;
  inline float laser_range_min() const;
  inline void set_laser_range_min(float value);
  
  // required float laser_dx = 6;
  inline bool has_laser_dx() const;
  inline void clear_laser_dx();
  static const int kLaserDxFieldNumber = 6;
  inline float laser_dx() const;
  inline void set_laser_dx(float value);
  
  // required float laser_dy = 7;
  inline bool has_laser_dy() const;
  inline void clear_laser_dy();
  static const int kLaserDyFieldNumber = 7;
  inline float laser_dy() const;
  inline void set_laser_dy(float value);
  
  // required float laser_resolution = 8;
  inline bool has_laser_resolution() const;
  inline void clear_laser_resolution();
  static const int kLaserResolutionFieldNumber = 8;
  inline float laser_resolution() const;
  inline void set_laser_resolution(float value);
  
  // required float laser_max_ray = 9;
  inline bool has_laser_max_ray() const;
  inline void clear_laser_max_ray();
  static const int kLaserMaxRayFieldNumber = 9;
  inline float laser_max_ray() const;
  inline void set_laser_max_ray(float value);
  
  // @@protoc_insertion_point(class_scope:KPS.mp_laser_para)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* laser_ip_;
  static const ::std::string _default_laser_ip_;
  bool laser_reverse_;
  float laser_start_angle_;
  float laser_range_max_;
  float laser_range_min_;
  float laser_dx_;
  float laser_dy_;
  float laser_resolution_;
  float laser_max_ray_;
  friend void  protobuf_AddDesc_laser_2eproto();
  friend void protobuf_AssignDesc_laser_2eproto();
  friend void protobuf_ShutdownFile_laser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static mp_laser_para* default_instance_;
};
// -------------------------------------------------------------------

class mp_laser_data : public ::google::protobuf::Message {
 public:
  mp_laser_data();
  virtual ~mp_laser_data();
  
  mp_laser_data(const mp_laser_data& from);
  
  inline mp_laser_data& operator=(const mp_laser_data& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mp_laser_data& default_instance();
  
  void Swap(mp_laser_data* other);
  
  // implements Message ----------------------------------------------
  
  mp_laser_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mp_laser_data& from);
  void MergeFrom(const mp_laser_data& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 stamp = 1;
  inline bool has_stamp() const;
  inline void clear_stamp();
  static const int kStampFieldNumber = 1;
  inline ::google::protobuf::uint64 stamp() const;
  inline void set_stamp(::google::protobuf::uint64 value);
  
  // required int32 used_ray = 2;
  inline bool has_used_ray() const;
  inline void clear_used_ray();
  static const int kUsedRayFieldNumber = 2;
  inline ::google::protobuf::int32 used_ray() const;
  inline void set_used_ray(::google::protobuf::int32 value);
  
  // repeated float data = 3;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();
  
  // repeated int32 uesd = 4;
  inline int uesd_size() const;
  inline void clear_uesd();
  static const int kUesdFieldNumber = 4;
  inline ::google::protobuf::int32 uesd(int index) const;
  inline void set_uesd(int index, ::google::protobuf::int32 value);
  inline void add_uesd(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      uesd() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_uesd();
  
  // @@protoc_insertion_point(class_scope:KPS.mp_laser_data)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 stamp_;
  ::google::protobuf::int32 used_ray_;
  ::google::protobuf::RepeatedField< float > data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > uesd_;
  friend void  protobuf_AddDesc_laser_2eproto();
  friend void protobuf_AssignDesc_laser_2eproto();
  friend void protobuf_ShutdownFile_laser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static mp_laser_data* default_instance_;
};
// -------------------------------------------------------------------

class mp_chk_laser_range : public ::google::protobuf::Message {
 public:
  mp_chk_laser_range();
  virtual ~mp_chk_laser_range();
  
  mp_chk_laser_range(const mp_chk_laser_range& from);
  
  inline mp_chk_laser_range& operator=(const mp_chk_laser_range& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mp_chk_laser_range& default_instance();
  
  void Swap(mp_chk_laser_range* other);
  
  // implements Message ----------------------------------------------
  
  mp_chk_laser_range* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mp_chk_laser_range& from);
  void MergeFrom(const mp_chk_laser_range& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef mp_chk_laser_range_Range_Type Range_Type;
  static const Range_Type FIX_SLOW = mp_chk_laser_range_Range_Type_FIX_SLOW;
  static const Range_Type FIX_STOP_IN = mp_chk_laser_range_Range_Type_FIX_STOP_IN;
  static const Range_Type FIX_STOP_OUT = mp_chk_laser_range_Range_Type_FIX_STOP_OUT;
  static const Range_Type DY_ROT = mp_chk_laser_range_Range_Type_DY_ROT;
  static const Range_Type DY_ROTGO = mp_chk_laser_range_Range_Type_DY_ROTGO;
  static inline bool Range_Type_IsValid(int value) {
    return mp_chk_laser_range_Range_Type_IsValid(value);
  }
  static const Range_Type Range_Type_MIN =
    mp_chk_laser_range_Range_Type_Range_Type_MIN;
  static const Range_Type Range_Type_MAX =
    mp_chk_laser_range_Range_Type_Range_Type_MAX;
  static const int Range_Type_ARRAYSIZE =
    mp_chk_laser_range_Range_Type_Range_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Range_Type_descriptor() {
    return mp_chk_laser_range_Range_Type_descriptor();
  }
  static inline const ::std::string& Range_Type_Name(Range_Type value) {
    return mp_chk_laser_range_Range_Type_Name(value);
  }
  static inline bool Range_Type_Parse(const ::std::string& name,
      Range_Type* value) {
    return mp_chk_laser_range_Range_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .KPS.mp_laser_data laser_data = 1;
  inline bool has_laser_data() const;
  inline void clear_laser_data();
  static const int kLaserDataFieldNumber = 1;
  inline const ::KPS::mp_laser_data& laser_data() const;
  inline ::KPS::mp_laser_data* mutable_laser_data();
  
  // required .KPS.mp_chk_laser_range.Range_Type range_type = 2;
  inline bool has_range_type() const;
  inline void clear_range_type();
  static const int kRangeTypeFieldNumber = 2;
  inline ::KPS::mp_chk_laser_range_Range_Type range_type() const;
  inline void set_range_type(::KPS::mp_chk_laser_range_Range_Type value);
  
  // required .KPS.mp_laser_para laser_para = 3;
  inline bool has_laser_para() const;
  inline void clear_laser_para();
  static const int kLaserParaFieldNumber = 3;
  inline const ::KPS::mp_laser_para& laser_para() const;
  inline ::KPS::mp_laser_para* mutable_laser_para();
  
  // @@protoc_insertion_point(class_scope:KPS.mp_chk_laser_range)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::KPS::mp_laser_data* laser_data_;
  int range_type_;
  ::KPS::mp_laser_para* laser_para_;
  friend void  protobuf_AddDesc_laser_2eproto();
  friend void protobuf_AssignDesc_laser_2eproto();
  friend void protobuf_ShutdownFile_laser_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static mp_chk_laser_range* default_instance_;
};
// ===================================================================


// ===================================================================

// mp_laser_para

// required string laser_ip = 1;
inline bool mp_laser_para::has_laser_ip() const {
  return _has_bit(0);
}
inline void mp_laser_para::clear_laser_ip() {
  if (laser_ip_ != &_default_laser_ip_) {
    laser_ip_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& mp_laser_para::laser_ip() const {
  return *laser_ip_;
}
inline void mp_laser_para::set_laser_ip(const ::std::string& value) {
  _set_bit(0);
  if (laser_ip_ == &_default_laser_ip_) {
    laser_ip_ = new ::std::string;
  }
  laser_ip_->assign(value);
}
inline void mp_laser_para::set_laser_ip(const char* value) {
  _set_bit(0);
  if (laser_ip_ == &_default_laser_ip_) {
    laser_ip_ = new ::std::string;
  }
  laser_ip_->assign(value);
}
inline void mp_laser_para::set_laser_ip(const char* value, size_t size) {
  _set_bit(0);
  if (laser_ip_ == &_default_laser_ip_) {
    laser_ip_ = new ::std::string;
  }
  laser_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mp_laser_para::mutable_laser_ip() {
  _set_bit(0);
  if (laser_ip_ == &_default_laser_ip_) {
    laser_ip_ = new ::std::string;
  }
  return laser_ip_;
}

// required bool laser_reverse = 2;
inline bool mp_laser_para::has_laser_reverse() const {
  return _has_bit(1);
}
inline void mp_laser_para::clear_laser_reverse() {
  laser_reverse_ = false;
  _clear_bit(1);
}
inline bool mp_laser_para::laser_reverse() const {
  return laser_reverse_;
}
inline void mp_laser_para::set_laser_reverse(bool value) {
  _set_bit(1);
  laser_reverse_ = value;
}

// required float laser_start_angle = 3;
inline bool mp_laser_para::has_laser_start_angle() const {
  return _has_bit(2);
}
inline void mp_laser_para::clear_laser_start_angle() {
  laser_start_angle_ = 0;
  _clear_bit(2);
}
inline float mp_laser_para::laser_start_angle() const {
  return laser_start_angle_;
}
inline void mp_laser_para::set_laser_start_angle(float value) {
  _set_bit(2);
  laser_start_angle_ = value;
}

// required float laser_range_max = 4;
inline bool mp_laser_para::has_laser_range_max() const {
  return _has_bit(3);
}
inline void mp_laser_para::clear_laser_range_max() {
  laser_range_max_ = 0;
  _clear_bit(3);
}
inline float mp_laser_para::laser_range_max() const {
  return laser_range_max_;
}
inline void mp_laser_para::set_laser_range_max(float value) {
  _set_bit(3);
  laser_range_max_ = value;
}

// required float laser_range_min = 5;
inline bool mp_laser_para::has_laser_range_min() const {
  return _has_bit(4);
}
inline void mp_laser_para::clear_laser_range_min() {
  laser_range_min_ = 0;
  _clear_bit(4);
}
inline float mp_laser_para::laser_range_min() const {
  return laser_range_min_;
}
inline void mp_laser_para::set_laser_range_min(float value) {
  _set_bit(4);
  laser_range_min_ = value;
}

// required float laser_dx = 6;
inline bool mp_laser_para::has_laser_dx() const {
  return _has_bit(5);
}
inline void mp_laser_para::clear_laser_dx() {
  laser_dx_ = 0;
  _clear_bit(5);
}
inline float mp_laser_para::laser_dx() const {
  return laser_dx_;
}
inline void mp_laser_para::set_laser_dx(float value) {
  _set_bit(5);
  laser_dx_ = value;
}

// required float laser_dy = 7;
inline bool mp_laser_para::has_laser_dy() const {
  return _has_bit(6);
}
inline void mp_laser_para::clear_laser_dy() {
  laser_dy_ = 0;
  _clear_bit(6);
}
inline float mp_laser_para::laser_dy() const {
  return laser_dy_;
}
inline void mp_laser_para::set_laser_dy(float value) {
  _set_bit(6);
  laser_dy_ = value;
}

// required float laser_resolution = 8;
inline bool mp_laser_para::has_laser_resolution() const {
  return _has_bit(7);
}
inline void mp_laser_para::clear_laser_resolution() {
  laser_resolution_ = 0;
  _clear_bit(7);
}
inline float mp_laser_para::laser_resolution() const {
  return laser_resolution_;
}
inline void mp_laser_para::set_laser_resolution(float value) {
  _set_bit(7);
  laser_resolution_ = value;
}

// required float laser_max_ray = 9;
inline bool mp_laser_para::has_laser_max_ray() const {
  return _has_bit(8);
}
inline void mp_laser_para::clear_laser_max_ray() {
  laser_max_ray_ = 0;
  _clear_bit(8);
}
inline float mp_laser_para::laser_max_ray() const {
  return laser_max_ray_;
}
inline void mp_laser_para::set_laser_max_ray(float value) {
  _set_bit(8);
  laser_max_ray_ = value;
}

// -------------------------------------------------------------------

// mp_laser_data

// required uint64 stamp = 1;
inline bool mp_laser_data::has_stamp() const {
  return _has_bit(0);
}
inline void mp_laser_data::clear_stamp() {
  stamp_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 mp_laser_data::stamp() const {
  return stamp_;
}
inline void mp_laser_data::set_stamp(::google::protobuf::uint64 value) {
  _set_bit(0);
  stamp_ = value;
}

// required int32 used_ray = 2;
inline bool mp_laser_data::has_used_ray() const {
  return _has_bit(1);
}
inline void mp_laser_data::clear_used_ray() {
  used_ray_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 mp_laser_data::used_ray() const {
  return used_ray_;
}
inline void mp_laser_data::set_used_ray(::google::protobuf::int32 value) {
  _set_bit(1);
  used_ray_ = value;
}

// repeated float data = 3;
inline int mp_laser_data::data_size() const {
  return data_.size();
}
inline void mp_laser_data::clear_data() {
  data_.Clear();
}
inline float mp_laser_data::data(int index) const {
  return data_.Get(index);
}
inline void mp_laser_data::set_data(int index, float value) {
  data_.Set(index, value);
}
inline void mp_laser_data::add_data(float value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
mp_laser_data::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
mp_laser_data::mutable_data() {
  return &data_;
}

// repeated int32 uesd = 4;
inline int mp_laser_data::uesd_size() const {
  return uesd_.size();
}
inline void mp_laser_data::clear_uesd() {
  uesd_.Clear();
}
inline ::google::protobuf::int32 mp_laser_data::uesd(int index) const {
  return uesd_.Get(index);
}
inline void mp_laser_data::set_uesd(int index, ::google::protobuf::int32 value) {
  uesd_.Set(index, value);
}
inline void mp_laser_data::add_uesd(::google::protobuf::int32 value) {
  uesd_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
mp_laser_data::uesd() const {
  return uesd_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
mp_laser_data::mutable_uesd() {
  return &uesd_;
}

// -------------------------------------------------------------------

// mp_chk_laser_range

// required .KPS.mp_laser_data laser_data = 1;
inline bool mp_chk_laser_range::has_laser_data() const {
  return _has_bit(0);
}
inline void mp_chk_laser_range::clear_laser_data() {
  if (laser_data_ != NULL) laser_data_->::KPS::mp_laser_data::Clear();
  _clear_bit(0);
}
inline const ::KPS::mp_laser_data& mp_chk_laser_range::laser_data() const {
  return laser_data_ != NULL ? *laser_data_ : *default_instance_->laser_data_;
}
inline ::KPS::mp_laser_data* mp_chk_laser_range::mutable_laser_data() {
  _set_bit(0);
  if (laser_data_ == NULL) laser_data_ = new ::KPS::mp_laser_data;
  return laser_data_;
}

// required .KPS.mp_chk_laser_range.Range_Type range_type = 2;
inline bool mp_chk_laser_range::has_range_type() const {
  return _has_bit(1);
}
inline void mp_chk_laser_range::clear_range_type() {
  range_type_ = 0;
  _clear_bit(1);
}
inline ::KPS::mp_chk_laser_range_Range_Type mp_chk_laser_range::range_type() const {
  return static_cast< ::KPS::mp_chk_laser_range_Range_Type >(range_type_);
}
inline void mp_chk_laser_range::set_range_type(::KPS::mp_chk_laser_range_Range_Type value) {
  GOOGLE_DCHECK(::KPS::mp_chk_laser_range_Range_Type_IsValid(value));
  _set_bit(1);
  range_type_ = value;
}

// required .KPS.mp_laser_para laser_para = 3;
inline bool mp_chk_laser_range::has_laser_para() const {
  return _has_bit(2);
}
inline void mp_chk_laser_range::clear_laser_para() {
  if (laser_para_ != NULL) laser_para_->::KPS::mp_laser_para::Clear();
  _clear_bit(2);
}
inline const ::KPS::mp_laser_para& mp_chk_laser_range::laser_para() const {
  return laser_para_ != NULL ? *laser_para_ : *default_instance_->laser_para_;
}
inline ::KPS::mp_laser_para* mp_chk_laser_range::mutable_laser_para() {
  _set_bit(2);
  if (laser_para_ == NULL) laser_para_ = new ::KPS::mp_laser_para;
  return laser_para_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KPS::mp_chk_laser_range_Range_Type>() {
  return ::KPS::mp_chk_laser_range_Range_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_laser_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "map.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KPS {

namespace {

const ::google::protobuf::Descriptor* mp_map_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_map_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* mp_map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_map_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_map_2eproto() {
  protobuf_AddDesc_map_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "map.proto");
  GOOGLE_CHECK(file != NULL);
  mp_map_data_descriptor_ = file->message_type(0);
  static const int mp_map_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_map_data, gx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_map_data, gy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_map_data, value_),
  };
  mp_map_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_map_data_descriptor_,
      mp_map_data::default_instance_,
      mp_map_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_map_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_map_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_map_data));
  mp_map_descriptor_ = file->message_type(1);
  static const int mp_map_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_map, map_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_map, origin_gx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_map, origin_gy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_map, origin_wx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_map, origin_wy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_map, resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_map, data_),
  };
  mp_map_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_map_descriptor_,
      mp_map::default_instance_,
      mp_map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_map, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_map, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_map));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_map_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_map_data_descriptor_, &mp_map_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_map_descriptor_, &mp_map::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_map_2eproto() {
  delete mp_map_data::default_instance_;
  delete mp_map_data_reflection_;
  delete mp_map::default_instance_;
  delete mp_map_reflection_;
}

void protobuf_AddDesc_map_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmap.proto\022\003KPS\"4\n\013mp_map_data\022\n\n\002gx\030\001 "
    "\002(\r\022\n\n\002gy\030\002 \002(\r\022\r\n\005value\030\003 \002(\r\"\232\001\n\006mp_ma"
    "p\022\020\n\010map_name\030\001 \002(\t\022\021\n\torigin_gx\030\002 \002(\r\022\021"
    "\n\torigin_gy\030\003 \002(\r\022\021\n\torigin_wx\030\004 \002(\002\022\021\n\t"
    "origin_wy\030\005 \002(\002\022\022\n\nresolution\030\006 \002(\002\022\036\n\004d"
    "ata\030\007 \003(\0132\020.KPS.mp_map_data", 227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "map.proto", &protobuf_RegisterTypes);
  mp_map_data::default_instance_ = new mp_map_data();
  mp_map::default_instance_ = new mp_map();
  mp_map_data::default_instance_->InitAsDefaultInstance();
  mp_map::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_map_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_map_2eproto {
  StaticDescriptorInitializer_map_2eproto() {
    protobuf_AddDesc_map_2eproto();
  }
} static_descriptor_initializer_map_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int mp_map_data::kGxFieldNumber;
const int mp_map_data::kGyFieldNumber;
const int mp_map_data::kValueFieldNumber;
#endif  // !_MSC_VER

mp_map_data::mp_map_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_map_data::InitAsDefaultInstance() {
}

mp_map_data::mp_map_data(const mp_map_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_map_data::SharedCtor() {
  _cached_size_ = 0;
  gx_ = 0u;
  gy_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_map_data::~mp_map_data() {
  SharedDtor();
}

void mp_map_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mp_map_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_map_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_map_data_descriptor_;
}

const mp_map_data& mp_map_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();  return *default_instance_;
}

mp_map_data* mp_map_data::default_instance_ = NULL;

mp_map_data* mp_map_data::New() const {
  return new mp_map_data;
}

void mp_map_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gx_ = 0u;
    gy_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_map_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gx_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gy;
        break;
      }
      
      // required uint32 gy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gy_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }
      
      // required uint32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_map_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gx = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gx(), output);
  }
  
  // required uint32 gy = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gy(), output);
  }
  
  // required uint32 value = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_map_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gx = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gx(), target);
  }
  
  // required uint32 gy = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gy(), target);
  }
  
  // required uint32 value = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_map_data::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gx = 1;
    if (has_gx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gx());
    }
    
    // required uint32 gy = 2;
    if (has_gy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gy());
    }
    
    // required uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_map_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_map_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_map_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_map_data::MergeFrom(const mp_map_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_gx(from.gx());
    }
    if (from._has_bit(1)) {
      set_gy(from.gy());
    }
    if (from._has_bit(2)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_map_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_map_data::CopyFrom(const mp_map_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_map_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void mp_map_data::Swap(mp_map_data* other) {
  if (other != this) {
    std::swap(gx_, other->gx_);
    std::swap(gy_, other->gy_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_map_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_map_data_descriptor_;
  metadata.reflection = mp_map_data_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string mp_map::_default_map_name_;
#ifndef _MSC_VER
const int mp_map::kMapNameFieldNumber;
const int mp_map::kOriginGxFieldNumber;
const int mp_map::kOriginGyFieldNumber;
const int mp_map::kOriginWxFieldNumber;
const int mp_map::kOriginWyFieldNumber;
const int mp_map::kResolutionFieldNumber;
const int mp_map::kDataFieldNumber;
#endif  // !_MSC_VER

mp_map::mp_map()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_map::InitAsDefaultInstance() {
}

mp_map::mp_map(const mp_map& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_map::SharedCtor() {
  _cached_size_ = 0;
  map_name_ = const_cast< ::std::string*>(&_default_map_name_);
  origin_gx_ = 0u;
  origin_gy_ = 0u;
  origin_wx_ = 0;
  origin_wy_ = 0;
  resolution_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_map::~mp_map() {
  SharedDtor();
}

void mp_map::SharedDtor() {
  if (map_name_ != &_default_map_name_) {
    delete map_name_;
  }
  if (this != default_instance_) {
  }
}

void mp_map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_map_descriptor_;
}

const mp_map& mp_map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_map_2eproto();  return *default_instance_;
}

mp_map* mp_map::default_instance_ = NULL;

mp_map* mp_map::New() const {
  return new mp_map;
}

void mp_map::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (map_name_ != &_default_map_name_) {
        map_name_->clear();
      }
    }
    origin_gx_ = 0u;
    origin_gy_ = 0u;
    origin_wx_ = 0;
    origin_wy_ = 0;
    resolution_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string map_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->map_name().data(), this->map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_origin_gx;
        break;
      }
      
      // required uint32 origin_gx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_origin_gx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_gx_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_origin_gy;
        break;
      }
      
      // required uint32 origin_gy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_origin_gy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_gy_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_origin_wx;
        break;
      }
      
      // required float origin_wx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_origin_wx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &origin_wx_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_origin_wy;
        break;
      }
      
      // required float origin_wy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_origin_wy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &origin_wy_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_resolution;
        break;
      }
      
      // required float resolution = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &resolution_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_data;
        break;
      }
      
      // repeated .KPS.mp_map_data data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string map_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->map_name(), output);
  }
  
  // required uint32 origin_gx = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->origin_gx(), output);
  }
  
  // required uint32 origin_gy = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->origin_gy(), output);
  }
  
  // required float origin_wx = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->origin_wx(), output);
  }
  
  // required float origin_wy = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->origin_wy(), output);
  }
  
  // required float resolution = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->resolution(), output);
  }
  
  // repeated .KPS.mp_map_data data = 7;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string map_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->map_name(), target);
  }
  
  // required uint32 origin_gx = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->origin_gx(), target);
  }
  
  // required uint32 origin_gy = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->origin_gy(), target);
  }
  
  // required float origin_wx = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->origin_wx(), target);
  }
  
  // required float origin_wy = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->origin_wy(), target);
  }
  
  // required float resolution = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->resolution(), target);
  }
  
  // repeated .KPS.mp_map_data data = 7;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_map::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string map_name = 1;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }
    
    // required uint32 origin_gx = 2;
    if (has_origin_gx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origin_gx());
    }
    
    // required uint32 origin_gy = 3;
    if (has_origin_gy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origin_gy());
    }
    
    // required float origin_wx = 4;
    if (has_origin_wx()) {
      total_size += 1 + 4;
    }
    
    // required float origin_wy = 5;
    if (has_origin_wy()) {
      total_size += 1 + 4;
    }
    
    // required float resolution = 6;
    if (has_resolution()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .KPS.mp_map_data data = 7;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_map::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_map::MergeFrom(const mp_map& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_map_name(from.map_name());
    }
    if (from._has_bit(1)) {
      set_origin_gx(from.origin_gx());
    }
    if (from._has_bit(2)) {
      set_origin_gy(from.origin_gy());
    }
    if (from._has_bit(3)) {
      set_origin_wx(from.origin_wx());
    }
    if (from._has_bit(4)) {
      set_origin_wy(from.origin_wy());
    }
    if (from._has_bit(5)) {
      set_resolution(from.resolution());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_map::CopyFrom(const mp_map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_map::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void mp_map::Swap(mp_map* other) {
  if (other != this) {
    std::swap(map_name_, other->map_name_);
    std::swap(origin_gx_, other->origin_gx_);
    std::swap(origin_gy_, other->origin_gy_);
    std::swap(origin_wx_, other->origin_wx_);
    std::swap(origin_wy_, other->origin_wy_);
    std::swap(resolution_, other->resolution_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_map_descriptor_;
  metadata.reflection = mp_map_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

// @@protoc_insertion_point(global_scope)

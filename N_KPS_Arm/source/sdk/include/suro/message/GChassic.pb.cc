// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GChassic.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GMotorSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMotorSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* GRobotSpeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GRobotSpeed_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GRobotSpeed_ControlMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GRobotPWM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GRobotPWM_reflection_ = NULL;
const ::google::protobuf::Descriptor* GRobotSpeedControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GRobotSpeedControl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GRobotSpeedControl_RobotSpeedControlType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GOdometer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GOdometer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GOdometer_OdometerMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GChassicData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GChassicData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMotorDebugMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMotorDebugMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GChassicDebugMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GChassicDebugMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GChassic_2eproto() {
  protobuf_AddDesc_GChassic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GChassic.proto");
  GOOGLE_CHECK(file != NULL);
  GMotorSet_descriptor_ = file->message_type(0);
  static const int GMotorSet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMotorSet, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMotorSet, id_),
  };
  GMotorSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMotorSet_descriptor_,
      GMotorSet::default_instance_,
      GMotorSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMotorSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMotorSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMotorSet));
  GRobotSpeed_descriptor_ = file->message_type(1);
  static const int GRobotSpeed_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobotSpeed, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobotSpeed, vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobotSpeed, vy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobotSpeed, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobotSpeed, motors_),
  };
  GRobotSpeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GRobotSpeed_descriptor_,
      GRobotSpeed::default_instance_,
      GRobotSpeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobotSpeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobotSpeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GRobotSpeed));
  GRobotSpeed_ControlMode_descriptor_ = GRobotSpeed_descriptor_->enum_type(0);
  GRobotPWM_descriptor_ = file->message_type(2);
  static const int GRobotPWM_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobotPWM, d1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobotPWM, d2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobotPWM, d3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobotPWM, d4_),
  };
  GRobotPWM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GRobotPWM_descriptor_,
      GRobotPWM::default_instance_,
      GRobotPWM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobotPWM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobotPWM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GRobotPWM));
  GRobotSpeedControl_descriptor_ = file->message_type(3);
  static const int GRobotSpeedControl_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobotSpeedControl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobotSpeedControl, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobotSpeedControl, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobotSpeedControl, pwm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobotSpeedControl, clean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobotSpeedControl, nodename_),
  };
  GRobotSpeedControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GRobotSpeedControl_descriptor_,
      GRobotSpeedControl::default_instance_,
      GRobotSpeedControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobotSpeedControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobotSpeedControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GRobotSpeedControl));
  GRobotSpeedControl_RobotSpeedControlType_descriptor_ = GRobotSpeedControl_descriptor_->enum_type(0);
  GOdometer_descriptor_ = file->message_type(4);
  static const int GOdometer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOdometer, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOdometer, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOdometer, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOdometer, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOdometer, motors_),
  };
  GOdometer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GOdometer_descriptor_,
      GOdometer::default_instance_,
      GOdometer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOdometer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GOdometer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GOdometer));
  GOdometer_OdometerMode_descriptor_ = GOdometer_descriptor_->enum_type(0);
  GChassicData_descriptor_ = file->message_type(5);
  static const int GChassicData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GChassicData, odometer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GChassicData, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GChassicData, pwm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GChassicData, time_stamp_),
  };
  GChassicData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GChassicData_descriptor_,
      GChassicData::default_instance_,
      GChassicData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GChassicData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GChassicData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GChassicData));
  GMotorDebugMessage_descriptor_ = file->message_type(6);
  static const int GMotorDebugMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMotorDebugMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMotorDebugMessage, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMotorDebugMessage, voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMotorDebugMessage, targetvel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMotorDebugMessage, actualvel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMotorDebugMessage, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMotorDebugMessage, errortype_),
  };
  GMotorDebugMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMotorDebugMessage_descriptor_,
      GMotorDebugMessage::default_instance_,
      GMotorDebugMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMotorDebugMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMotorDebugMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMotorDebugMessage));
  GChassicDebugMessage_descriptor_ = file->message_type(7);
  static const int GChassicDebugMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GChassicDebugMessage, errortype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GChassicDebugMessage, errordesption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GChassicDebugMessage, motors_),
  };
  GChassicDebugMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GChassicDebugMessage_descriptor_,
      GChassicDebugMessage::default_instance_,
      GChassicDebugMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GChassicDebugMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GChassicDebugMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GChassicDebugMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GChassic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMotorSet_descriptor_, &GMotorSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GRobotSpeed_descriptor_, &GRobotSpeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GRobotPWM_descriptor_, &GRobotPWM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GRobotSpeedControl_descriptor_, &GRobotSpeedControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GOdometer_descriptor_, &GOdometer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GChassicData_descriptor_, &GChassicData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMotorDebugMessage_descriptor_, &GMotorDebugMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GChassicDebugMessage_descriptor_, &GChassicDebugMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GChassic_2eproto() {
  delete GMotorSet::default_instance_;
  delete GMotorSet_reflection_;
  delete GRobotSpeed::default_instance_;
  delete GRobotSpeed_reflection_;
  delete GRobotPWM::default_instance_;
  delete GRobotPWM_reflection_;
  delete GRobotSpeedControl::default_instance_;
  delete GRobotSpeedControl_reflection_;
  delete GOdometer::default_instance_;
  delete GOdometer_reflection_;
  delete GChassicData::default_instance_;
  delete GChassicData_reflection_;
  delete GMotorDebugMessage::default_instance_;
  delete GMotorDebugMessage_reflection_;
  delete GChassicDebugMessage::default_instance_;
  delete GChassicDebugMessage_reflection_;
}

void protobuf_AddDesc_GChassic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016GChassic.proto\"&\n\tGMotorSet\022\r\n\005speed\030\001"
    " \001(\001\022\n\n\002id\030\002 \001(\005\"\252\001\n\013GRobotSpeed\022&\n\004mode"
    "\030\001 \001(\0162\030.GRobotSpeed.ControlMode\022\n\n\002vx\030\002"
    " \001(\001\022\n\n\002vy\030\003 \001(\001\022\t\n\001w\030\004 \001(\001\022\032\n\006motors\030\005 "
    "\003(\0132\n.GMotorSet\"4\n\013ControlMode\022\013\n\007COMBIN"
    "E\020\001\022\016\n\nSEPARATELY\020\002\022\010\n\004BOTH\020\003\";\n\tGRobotP"
    "WM\022\n\n\002d1\030\001 \001(\005\022\n\n\002d2\030\002 \001(\005\022\n\n\002d3\030\003 \001(\005\022\n"
    "\n\002d4\030\004 \001(\005\"\203\003\n\022GRobotSpeedControl\022L\n\004typ"
    "e\030\001 \001(\0162).GRobotSpeedControl.RobotSpeedC"
    "ontrolType:\023ROBOT_SPEED_CONTROL\022\033\n\005speed"
    "\030\002 \001(\0132\014.GRobotSpeed\022\020\n\005level\030\003 \001(\005:\0011\022\027"
    "\n\003pwm\030\004 \001(\0132\n.GRobotPWM\022\r\n\005clean\030\005 \001(\005\022\020"
    "\n\010nodeName\030\006 \001(\t\"\265\001\n\025RobotSpeedControlTy"
    "pe\022\027\n\023ROBOT_SPEED_CONTROL\020\001\022\031\n\025ROBOT_SPE"
    "ED_SET_LEVEL\020\002\022\033\n\027ROBOT_SPEED_MOTOR_GUAR"
    "D\020\003\022\033\n\027ROBOT_SPEED_GUARD_CLEAR\020\004\022\025\n\021ROBO"
    "T_PWM_CONTROL\020\005\022\027\n\023ROBOT_SPEED_DISABLE\020\006"
    "\"\240\001\n\tGOdometer\022%\n\004mode\030\001 \001(\0162\027.GOdometer"
    ".OdometerMode\022\t\n\001x\030\002 \001(\001\022\t\n\001y\030\003 \001(\001\022\r\n\005a"
    "ngle\030\004 \001(\001\022\032\n\006motors\030\005 \003(\0132\n.GMotorSet\"+"
    "\n\014OdometerMode\022\013\n\007COMBINE\020\001\022\016\n\nSEPARATEL"
    "Y\020\002\"v\n\014GChassicData\022\034\n\010odometer\030\001 \001(\0132\n."
    "GOdometer\022\033\n\005speed\030\002 \001(\0132\014.GRobotSpeed\022\027"
    "\n\003pwm\030\003 \001(\0132\n.GRobotPWM\022\022\n\ntime_stamp\030\004 "
    "\001(\001\"\220\001\n\022GMotorDebugMessage\022\n\n\002id\030\001 \002(\005\022\017"
    "\n\007current\030\002 \001(\001\022\017\n\007voltage\030\003 \001(\001\022\021\n\ttarg"
    "etVel\030\004 \001(\001\022\021\n\tactualVel\030\005 \001(\001\022\023\n\013descri"
    "ption\030\006 \001(\t\022\021\n\terrorType\030\007 \001(\005\"e\n\024GChass"
    "icDebugMessage\022\021\n\terrorType\030\001 \001(\005\022\025\n\rerr"
    "orDesption\030\002 \001(\t\022#\n\006motors\030\003 \003(\0132\023.GMoto"
    "rDebugMessage", 1213);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GChassic.proto", &protobuf_RegisterTypes);
  GMotorSet::default_instance_ = new GMotorSet();
  GRobotSpeed::default_instance_ = new GRobotSpeed();
  GRobotPWM::default_instance_ = new GRobotPWM();
  GRobotSpeedControl::default_instance_ = new GRobotSpeedControl();
  GOdometer::default_instance_ = new GOdometer();
  GChassicData::default_instance_ = new GChassicData();
  GMotorDebugMessage::default_instance_ = new GMotorDebugMessage();
  GChassicDebugMessage::default_instance_ = new GChassicDebugMessage();
  GMotorSet::default_instance_->InitAsDefaultInstance();
  GRobotSpeed::default_instance_->InitAsDefaultInstance();
  GRobotPWM::default_instance_->InitAsDefaultInstance();
  GRobotSpeedControl::default_instance_->InitAsDefaultInstance();
  GOdometer::default_instance_->InitAsDefaultInstance();
  GChassicData::default_instance_->InitAsDefaultInstance();
  GMotorDebugMessage::default_instance_->InitAsDefaultInstance();
  GChassicDebugMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GChassic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GChassic_2eproto {
  StaticDescriptorInitializer_GChassic_2eproto() {
    protobuf_AddDesc_GChassic_2eproto();
  }
} static_descriptor_initializer_GChassic_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GMotorSet::kSpeedFieldNumber;
const int GMotorSet::kIdFieldNumber;
#endif  // !_MSC_VER

GMotorSet::GMotorSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMotorSet::InitAsDefaultInstance() {
}

GMotorSet::GMotorSet(const GMotorSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMotorSet::SharedCtor() {
  _cached_size_ = 0;
  speed_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMotorSet::~GMotorSet() {
  SharedDtor();
}

void GMotorSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMotorSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMotorSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMotorSet_descriptor_;
}

const GMotorSet& GMotorSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GChassic_2eproto();  return *default_instance_;
}

GMotorSet* GMotorSet::default_instance_ = NULL;

GMotorSet* GMotorSet::New() const {
  return new GMotorSet;
}

void GMotorSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    speed_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMotorSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double speed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMotorSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double speed = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->speed(), output);
  }
  
  // optional int32 id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMotorSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double speed = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->speed(), target);
  }
  
  // optional int32 id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMotorSet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double speed = 1;
    if (has_speed()) {
      total_size += 1 + 8;
    }
    
    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMotorSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMotorSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMotorSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMotorSet::MergeFrom(const GMotorSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_speed(from.speed());
    }
    if (from._has_bit(1)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMotorSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMotorSet::CopyFrom(const GMotorSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMotorSet::IsInitialized() const {
  
  return true;
}

void GMotorSet::Swap(GMotorSet* other) {
  if (other != this) {
    std::swap(speed_, other->speed_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMotorSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMotorSet_descriptor_;
  metadata.reflection = GMotorSet_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GRobotSpeed_ControlMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GRobotSpeed_ControlMode_descriptor_;
}
bool GRobotSpeed_ControlMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GRobotSpeed_ControlMode GRobotSpeed::COMBINE;
const GRobotSpeed_ControlMode GRobotSpeed::SEPARATELY;
const GRobotSpeed_ControlMode GRobotSpeed::BOTH;
const GRobotSpeed_ControlMode GRobotSpeed::ControlMode_MIN;
const GRobotSpeed_ControlMode GRobotSpeed::ControlMode_MAX;
const int GRobotSpeed::ControlMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GRobotSpeed::kModeFieldNumber;
const int GRobotSpeed::kVxFieldNumber;
const int GRobotSpeed::kVyFieldNumber;
const int GRobotSpeed::kWFieldNumber;
const int GRobotSpeed::kMotorsFieldNumber;
#endif  // !_MSC_VER

GRobotSpeed::GRobotSpeed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GRobotSpeed::InitAsDefaultInstance() {
}

GRobotSpeed::GRobotSpeed(const GRobotSpeed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GRobotSpeed::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 1;
  vx_ = 0;
  vy_ = 0;
  w_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GRobotSpeed::~GRobotSpeed() {
  SharedDtor();
}

void GRobotSpeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GRobotSpeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GRobotSpeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GRobotSpeed_descriptor_;
}

const GRobotSpeed& GRobotSpeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GChassic_2eproto();  return *default_instance_;
}

GRobotSpeed* GRobotSpeed::default_instance_ = NULL;

GRobotSpeed* GRobotSpeed::New() const {
  return new GRobotSpeed;
}

void GRobotSpeed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 1;
    vx_ = 0;
    vy_ = 0;
    w_ = 0;
  }
  motors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GRobotSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GRobotSpeed.ControlMode mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GRobotSpeed_ControlMode_IsValid(value)) {
            set_mode(static_cast< ::GRobotSpeed_ControlMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_vx;
        break;
      }
      
      // optional double vx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vx_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_vy;
        break;
      }
      
      // optional double vy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vy_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_w;
        break;
      }
      
      // optional double w = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_motors;
        break;
      }
      
      // repeated .GMotorSet motors = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_motors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_motors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_motors;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GRobotSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GRobotSpeed.ControlMode mode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }
  
  // optional double vx = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->vx(), output);
  }
  
  // optional double vy = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->vy(), output);
  }
  
  // optional double w = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->w(), output);
  }
  
  // repeated .GMotorSet motors = 5;
  for (int i = 0; i < this->motors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->motors(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GRobotSpeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GRobotSpeed.ControlMode mode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }
  
  // optional double vx = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->vx(), target);
  }
  
  // optional double vy = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->vy(), target);
  }
  
  // optional double w = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->w(), target);
  }
  
  // repeated .GMotorSet motors = 5;
  for (int i = 0; i < this->motors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->motors(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GRobotSpeed::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GRobotSpeed.ControlMode mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }
    
    // optional double vx = 2;
    if (has_vx()) {
      total_size += 1 + 8;
    }
    
    // optional double vy = 3;
    if (has_vy()) {
      total_size += 1 + 8;
    }
    
    // optional double w = 4;
    if (has_w()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .GMotorSet motors = 5;
  total_size += 1 * this->motors_size();
  for (int i = 0; i < this->motors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->motors(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GRobotSpeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GRobotSpeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GRobotSpeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GRobotSpeed::MergeFrom(const GRobotSpeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  motors_.MergeFrom(from.motors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mode(from.mode());
    }
    if (from._has_bit(1)) {
      set_vx(from.vx());
    }
    if (from._has_bit(2)) {
      set_vy(from.vy());
    }
    if (from._has_bit(3)) {
      set_w(from.w());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GRobotSpeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GRobotSpeed::CopyFrom(const GRobotSpeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GRobotSpeed::IsInitialized() const {
  
  return true;
}

void GRobotSpeed::Swap(GRobotSpeed* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(vx_, other->vx_);
    std::swap(vy_, other->vy_);
    std::swap(w_, other->w_);
    motors_.Swap(&other->motors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GRobotSpeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GRobotSpeed_descriptor_;
  metadata.reflection = GRobotSpeed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GRobotPWM::kD1FieldNumber;
const int GRobotPWM::kD2FieldNumber;
const int GRobotPWM::kD3FieldNumber;
const int GRobotPWM::kD4FieldNumber;
#endif  // !_MSC_VER

GRobotPWM::GRobotPWM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GRobotPWM::InitAsDefaultInstance() {
}

GRobotPWM::GRobotPWM(const GRobotPWM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GRobotPWM::SharedCtor() {
  _cached_size_ = 0;
  d1_ = 0;
  d2_ = 0;
  d3_ = 0;
  d4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GRobotPWM::~GRobotPWM() {
  SharedDtor();
}

void GRobotPWM::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GRobotPWM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GRobotPWM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GRobotPWM_descriptor_;
}

const GRobotPWM& GRobotPWM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GChassic_2eproto();  return *default_instance_;
}

GRobotPWM* GRobotPWM::default_instance_ = NULL;

GRobotPWM* GRobotPWM::New() const {
  return new GRobotPWM;
}

void GRobotPWM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    d1_ = 0;
    d2_ = 0;
    d3_ = 0;
    d4_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GRobotPWM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 d1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &d1_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_d2;
        break;
      }
      
      // optional int32 d2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_d2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &d2_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_d3;
        break;
      }
      
      // optional int32 d3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_d3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &d3_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_d4;
        break;
      }
      
      // optional int32 d4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_d4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &d4_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GRobotPWM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 d1 = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->d1(), output);
  }
  
  // optional int32 d2 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->d2(), output);
  }
  
  // optional int32 d3 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->d3(), output);
  }
  
  // optional int32 d4 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->d4(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GRobotPWM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 d1 = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->d1(), target);
  }
  
  // optional int32 d2 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->d2(), target);
  }
  
  // optional int32 d3 = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->d3(), target);
  }
  
  // optional int32 d4 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->d4(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GRobotPWM::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 d1 = 1;
    if (has_d1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->d1());
    }
    
    // optional int32 d2 = 2;
    if (has_d2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->d2());
    }
    
    // optional int32 d3 = 3;
    if (has_d3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->d3());
    }
    
    // optional int32 d4 = 4;
    if (has_d4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->d4());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GRobotPWM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GRobotPWM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GRobotPWM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GRobotPWM::MergeFrom(const GRobotPWM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_d1(from.d1());
    }
    if (from._has_bit(1)) {
      set_d2(from.d2());
    }
    if (from._has_bit(2)) {
      set_d3(from.d3());
    }
    if (from._has_bit(3)) {
      set_d4(from.d4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GRobotPWM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GRobotPWM::CopyFrom(const GRobotPWM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GRobotPWM::IsInitialized() const {
  
  return true;
}

void GRobotPWM::Swap(GRobotPWM* other) {
  if (other != this) {
    std::swap(d1_, other->d1_);
    std::swap(d2_, other->d2_);
    std::swap(d3_, other->d3_);
    std::swap(d4_, other->d4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GRobotPWM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GRobotPWM_descriptor_;
  metadata.reflection = GRobotPWM_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GRobotSpeedControl_RobotSpeedControlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GRobotSpeedControl_RobotSpeedControlType_descriptor_;
}
bool GRobotSpeedControl_RobotSpeedControlType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GRobotSpeedControl_RobotSpeedControlType GRobotSpeedControl::ROBOT_SPEED_CONTROL;
const GRobotSpeedControl_RobotSpeedControlType GRobotSpeedControl::ROBOT_SPEED_SET_LEVEL;
const GRobotSpeedControl_RobotSpeedControlType GRobotSpeedControl::ROBOT_SPEED_MOTOR_GUARD;
const GRobotSpeedControl_RobotSpeedControlType GRobotSpeedControl::ROBOT_SPEED_GUARD_CLEAR;
const GRobotSpeedControl_RobotSpeedControlType GRobotSpeedControl::ROBOT_PWM_CONTROL;
const GRobotSpeedControl_RobotSpeedControlType GRobotSpeedControl::ROBOT_SPEED_DISABLE;
const GRobotSpeedControl_RobotSpeedControlType GRobotSpeedControl::RobotSpeedControlType_MIN;
const GRobotSpeedControl_RobotSpeedControlType GRobotSpeedControl::RobotSpeedControlType_MAX;
const int GRobotSpeedControl::RobotSpeedControlType_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string GRobotSpeedControl::_default_nodename_;
#ifndef _MSC_VER
const int GRobotSpeedControl::kTypeFieldNumber;
const int GRobotSpeedControl::kSpeedFieldNumber;
const int GRobotSpeedControl::kLevelFieldNumber;
const int GRobotSpeedControl::kPwmFieldNumber;
const int GRobotSpeedControl::kCleanFieldNumber;
const int GRobotSpeedControl::kNodeNameFieldNumber;
#endif  // !_MSC_VER

GRobotSpeedControl::GRobotSpeedControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GRobotSpeedControl::InitAsDefaultInstance() {
  speed_ = const_cast< ::GRobotSpeed*>(&::GRobotSpeed::default_instance());
  pwm_ = const_cast< ::GRobotPWM*>(&::GRobotPWM::default_instance());
}

GRobotSpeedControl::GRobotSpeedControl(const GRobotSpeedControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GRobotSpeedControl::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  speed_ = NULL;
  level_ = 1;
  pwm_ = NULL;
  clean_ = 0;
  nodename_ = const_cast< ::std::string*>(&_default_nodename_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GRobotSpeedControl::~GRobotSpeedControl() {
  SharedDtor();
}

void GRobotSpeedControl::SharedDtor() {
  if (nodename_ != &_default_nodename_) {
    delete nodename_;
  }
  if (this != default_instance_) {
    delete speed_;
    delete pwm_;
  }
}

void GRobotSpeedControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GRobotSpeedControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GRobotSpeedControl_descriptor_;
}

const GRobotSpeedControl& GRobotSpeedControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GChassic_2eproto();  return *default_instance_;
}

GRobotSpeedControl* GRobotSpeedControl::default_instance_ = NULL;

GRobotSpeedControl* GRobotSpeedControl::New() const {
  return new GRobotSpeedControl;
}

void GRobotSpeedControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (_has_bit(1)) {
      if (speed_ != NULL) speed_->::GRobotSpeed::Clear();
    }
    level_ = 1;
    if (_has_bit(3)) {
      if (pwm_ != NULL) pwm_->::GRobotPWM::Clear();
    }
    clean_ = 0;
    if (_has_bit(5)) {
      if (nodename_ != &_default_nodename_) {
        nodename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GRobotSpeedControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GRobotSpeedControl.RobotSpeedControlType type = 1 [default = ROBOT_SPEED_CONTROL];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GRobotSpeedControl_RobotSpeedControlType_IsValid(value)) {
            set_type(static_cast< ::GRobotSpeedControl_RobotSpeedControlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_speed;
        break;
      }
      
      // optional .GRobotSpeed speed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional int32 level = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pwm;
        break;
      }
      
      // optional .GRobotPWM pwm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pwm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_clean;
        break;
      }
      
      // optional int32 clean = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clean_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_nodeName;
        break;
      }
      
      // optional string nodeName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodename().data(), this->nodename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GRobotSpeedControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GRobotSpeedControl.RobotSpeedControlType type = 1 [default = ROBOT_SPEED_CONTROL];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .GRobotSpeed speed = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->speed(), output);
  }
  
  // optional int32 level = 3 [default = 1];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  // optional .GRobotPWM pwm = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pwm(), output);
  }
  
  // optional int32 clean = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->clean(), output);
  }
  
  // optional string nodeName = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodename().data(), this->nodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->nodename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GRobotSpeedControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GRobotSpeedControl.RobotSpeedControlType type = 1 [default = ROBOT_SPEED_CONTROL];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .GRobotSpeed speed = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->speed(), target);
  }
  
  // optional int32 level = 3 [default = 1];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }
  
  // optional .GRobotPWM pwm = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pwm(), target);
  }
  
  // optional int32 clean = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->clean(), target);
  }
  
  // optional string nodeName = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodename().data(), this->nodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->nodename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GRobotSpeedControl::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GRobotSpeedControl.RobotSpeedControlType type = 1 [default = ROBOT_SPEED_CONTROL];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .GRobotSpeed speed = 2;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speed());
    }
    
    // optional int32 level = 3 [default = 1];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional .GRobotPWM pwm = 4;
    if (has_pwm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pwm());
    }
    
    // optional int32 clean = 5;
    if (has_clean()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clean());
    }
    
    // optional string nodeName = 6;
    if (has_nodename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GRobotSpeedControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GRobotSpeedControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GRobotSpeedControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GRobotSpeedControl::MergeFrom(const GRobotSpeedControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      mutable_speed()->::GRobotSpeed::MergeFrom(from.speed());
    }
    if (from._has_bit(2)) {
      set_level(from.level());
    }
    if (from._has_bit(3)) {
      mutable_pwm()->::GRobotPWM::MergeFrom(from.pwm());
    }
    if (from._has_bit(4)) {
      set_clean(from.clean());
    }
    if (from._has_bit(5)) {
      set_nodename(from.nodename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GRobotSpeedControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GRobotSpeedControl::CopyFrom(const GRobotSpeedControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GRobotSpeedControl::IsInitialized() const {
  
  return true;
}

void GRobotSpeedControl::Swap(GRobotSpeedControl* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(speed_, other->speed_);
    std::swap(level_, other->level_);
    std::swap(pwm_, other->pwm_);
    std::swap(clean_, other->clean_);
    std::swap(nodename_, other->nodename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GRobotSpeedControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GRobotSpeedControl_descriptor_;
  metadata.reflection = GRobotSpeedControl_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GOdometer_OdometerMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GOdometer_OdometerMode_descriptor_;
}
bool GOdometer_OdometerMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GOdometer_OdometerMode GOdometer::COMBINE;
const GOdometer_OdometerMode GOdometer::SEPARATELY;
const GOdometer_OdometerMode GOdometer::OdometerMode_MIN;
const GOdometer_OdometerMode GOdometer::OdometerMode_MAX;
const int GOdometer::OdometerMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GOdometer::kModeFieldNumber;
const int GOdometer::kXFieldNumber;
const int GOdometer::kYFieldNumber;
const int GOdometer::kAngleFieldNumber;
const int GOdometer::kMotorsFieldNumber;
#endif  // !_MSC_VER

GOdometer::GOdometer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GOdometer::InitAsDefaultInstance() {
}

GOdometer::GOdometer(const GOdometer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GOdometer::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 1;
  x_ = 0;
  y_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GOdometer::~GOdometer() {
  SharedDtor();
}

void GOdometer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GOdometer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GOdometer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GOdometer_descriptor_;
}

const GOdometer& GOdometer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GChassic_2eproto();  return *default_instance_;
}

GOdometer* GOdometer::default_instance_ = NULL;

GOdometer* GOdometer::New() const {
  return new GOdometer;
}

void GOdometer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 1;
    x_ = 0;
    y_ = 0;
    angle_ = 0;
  }
  motors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GOdometer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GOdometer.OdometerMode mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GOdometer_OdometerMode_IsValid(value)) {
            set_mode(static_cast< ::GOdometer_OdometerMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_x;
        break;
      }
      
      // optional double x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_y;
        break;
      }
      
      // optional double y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_angle;
        break;
      }
      
      // optional double angle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_motors;
        break;
      }
      
      // repeated .GMotorSet motors = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_motors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_motors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_motors;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GOdometer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GOdometer.OdometerMode mode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }
  
  // optional double x = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }
  
  // optional double y = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }
  
  // optional double angle = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->angle(), output);
  }
  
  // repeated .GMotorSet motors = 5;
  for (int i = 0; i < this->motors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->motors(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GOdometer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GOdometer.OdometerMode mode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }
  
  // optional double x = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }
  
  // optional double y = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }
  
  // optional double angle = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->angle(), target);
  }
  
  // repeated .GMotorSet motors = 5;
  for (int i = 0; i < this->motors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->motors(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GOdometer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GOdometer.OdometerMode mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }
    
    // optional double x = 2;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // optional double y = 3;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // optional double angle = 4;
    if (has_angle()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .GMotorSet motors = 5;
  total_size += 1 * this->motors_size();
  for (int i = 0; i < this->motors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->motors(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GOdometer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GOdometer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GOdometer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GOdometer::MergeFrom(const GOdometer& from) {
  GOOGLE_CHECK_NE(&from, this);
  motors_.MergeFrom(from.motors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mode(from.mode());
    }
    if (from._has_bit(1)) {
      set_x(from.x());
    }
    if (from._has_bit(2)) {
      set_y(from.y());
    }
    if (from._has_bit(3)) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GOdometer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GOdometer::CopyFrom(const GOdometer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GOdometer::IsInitialized() const {
  
  return true;
}

void GOdometer::Swap(GOdometer* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(angle_, other->angle_);
    motors_.Swap(&other->motors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GOdometer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GOdometer_descriptor_;
  metadata.reflection = GOdometer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GChassicData::kOdometerFieldNumber;
const int GChassicData::kSpeedFieldNumber;
const int GChassicData::kPwmFieldNumber;
const int GChassicData::kTimeStampFieldNumber;
#endif  // !_MSC_VER

GChassicData::GChassicData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GChassicData::InitAsDefaultInstance() {
  odometer_ = const_cast< ::GOdometer*>(&::GOdometer::default_instance());
  speed_ = const_cast< ::GRobotSpeed*>(&::GRobotSpeed::default_instance());
  pwm_ = const_cast< ::GRobotPWM*>(&::GRobotPWM::default_instance());
}

GChassicData::GChassicData(const GChassicData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GChassicData::SharedCtor() {
  _cached_size_ = 0;
  odometer_ = NULL;
  speed_ = NULL;
  pwm_ = NULL;
  time_stamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GChassicData::~GChassicData() {
  SharedDtor();
}

void GChassicData::SharedDtor() {
  if (this != default_instance_) {
    delete odometer_;
    delete speed_;
    delete pwm_;
  }
}

void GChassicData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GChassicData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GChassicData_descriptor_;
}

const GChassicData& GChassicData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GChassic_2eproto();  return *default_instance_;
}

GChassicData* GChassicData::default_instance_ = NULL;

GChassicData* GChassicData::New() const {
  return new GChassicData;
}

void GChassicData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (odometer_ != NULL) odometer_->::GOdometer::Clear();
    }
    if (_has_bit(1)) {
      if (speed_ != NULL) speed_->::GRobotSpeed::Clear();
    }
    if (_has_bit(2)) {
      if (pwm_ != NULL) pwm_->::GRobotPWM::Clear();
    }
    time_stamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GChassicData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GOdometer odometer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_odometer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_speed;
        break;
      }
      
      // optional .GRobotSpeed speed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pwm;
        break;
      }
      
      // optional .GRobotPWM pwm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pwm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_time_stamp;
        break;
      }
      
      // optional double time_stamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_stamp_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GChassicData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GOdometer odometer = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->odometer(), output);
  }
  
  // optional .GRobotSpeed speed = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->speed(), output);
  }
  
  // optional .GRobotPWM pwm = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pwm(), output);
  }
  
  // optional double time_stamp = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->time_stamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GChassicData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GOdometer odometer = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->odometer(), target);
  }
  
  // optional .GRobotSpeed speed = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->speed(), target);
  }
  
  // optional .GRobotPWM pwm = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pwm(), target);
  }
  
  // optional double time_stamp = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->time_stamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GChassicData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GOdometer odometer = 1;
    if (has_odometer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->odometer());
    }
    
    // optional .GRobotSpeed speed = 2;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speed());
    }
    
    // optional .GRobotPWM pwm = 3;
    if (has_pwm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pwm());
    }
    
    // optional double time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GChassicData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GChassicData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GChassicData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GChassicData::MergeFrom(const GChassicData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_odometer()->::GOdometer::MergeFrom(from.odometer());
    }
    if (from._has_bit(1)) {
      mutable_speed()->::GRobotSpeed::MergeFrom(from.speed());
    }
    if (from._has_bit(2)) {
      mutable_pwm()->::GRobotPWM::MergeFrom(from.pwm());
    }
    if (from._has_bit(3)) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GChassicData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GChassicData::CopyFrom(const GChassicData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GChassicData::IsInitialized() const {
  
  return true;
}

void GChassicData::Swap(GChassicData* other) {
  if (other != this) {
    std::swap(odometer_, other->odometer_);
    std::swap(speed_, other->speed_);
    std::swap(pwm_, other->pwm_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GChassicData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GChassicData_descriptor_;
  metadata.reflection = GChassicData_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GMotorDebugMessage::_default_description_;
#ifndef _MSC_VER
const int GMotorDebugMessage::kIdFieldNumber;
const int GMotorDebugMessage::kCurrentFieldNumber;
const int GMotorDebugMessage::kVoltageFieldNumber;
const int GMotorDebugMessage::kTargetVelFieldNumber;
const int GMotorDebugMessage::kActualVelFieldNumber;
const int GMotorDebugMessage::kDescriptionFieldNumber;
const int GMotorDebugMessage::kErrorTypeFieldNumber;
#endif  // !_MSC_VER

GMotorDebugMessage::GMotorDebugMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMotorDebugMessage::InitAsDefaultInstance() {
}

GMotorDebugMessage::GMotorDebugMessage(const GMotorDebugMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMotorDebugMessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  current_ = 0;
  voltage_ = 0;
  targetvel_ = 0;
  actualvel_ = 0;
  description_ = const_cast< ::std::string*>(&_default_description_);
  errortype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMotorDebugMessage::~GMotorDebugMessage() {
  SharedDtor();
}

void GMotorDebugMessage::SharedDtor() {
  if (description_ != &_default_description_) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void GMotorDebugMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMotorDebugMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMotorDebugMessage_descriptor_;
}

const GMotorDebugMessage& GMotorDebugMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GChassic_2eproto();  return *default_instance_;
}

GMotorDebugMessage* GMotorDebugMessage::default_instance_ = NULL;

GMotorDebugMessage* GMotorDebugMessage::New() const {
  return new GMotorDebugMessage;
}

void GMotorDebugMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    current_ = 0;
    voltage_ = 0;
    targetvel_ = 0;
    actualvel_ = 0;
    if (_has_bit(5)) {
      if (description_ != &_default_description_) {
        description_->clear();
      }
    }
    errortype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMotorDebugMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_current;
        break;
      }
      
      // optional double current = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &current_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_voltage;
        break;
      }
      
      // optional double voltage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &voltage_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_targetVel;
        break;
      }
      
      // optional double targetVel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_targetVel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &targetvel_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_actualVel;
        break;
      }
      
      // optional double actualVel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_actualVel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &actualvel_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_description;
        break;
      }
      
      // optional string description = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_errorType;
        break;
      }
      
      // optional int32 errorType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errortype_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMotorDebugMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional double current = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->current(), output);
  }
  
  // optional double voltage = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->voltage(), output);
  }
  
  // optional double targetVel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->targetvel(), output);
  }
  
  // optional double actualVel = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->actualvel(), output);
  }
  
  // optional string description = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->description(), output);
  }
  
  // optional int32 errorType = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->errortype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMotorDebugMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional double current = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->current(), target);
  }
  
  // optional double voltage = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->voltage(), target);
  }
  
  // optional double targetVel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->targetvel(), target);
  }
  
  // optional double actualVel = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->actualvel(), target);
  }
  
  // optional string description = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->description(), target);
  }
  
  // optional int32 errorType = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->errortype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMotorDebugMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional double current = 2;
    if (has_current()) {
      total_size += 1 + 8;
    }
    
    // optional double voltage = 3;
    if (has_voltage()) {
      total_size += 1 + 8;
    }
    
    // optional double targetVel = 4;
    if (has_targetvel()) {
      total_size += 1 + 8;
    }
    
    // optional double actualVel = 5;
    if (has_actualvel()) {
      total_size += 1 + 8;
    }
    
    // optional string description = 6;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // optional int32 errorType = 7;
    if (has_errortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errortype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMotorDebugMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMotorDebugMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMotorDebugMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMotorDebugMessage::MergeFrom(const GMotorDebugMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_current(from.current());
    }
    if (from._has_bit(2)) {
      set_voltage(from.voltage());
    }
    if (from._has_bit(3)) {
      set_targetvel(from.targetvel());
    }
    if (from._has_bit(4)) {
      set_actualvel(from.actualvel());
    }
    if (from._has_bit(5)) {
      set_description(from.description());
    }
    if (from._has_bit(6)) {
      set_errortype(from.errortype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMotorDebugMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMotorDebugMessage::CopyFrom(const GMotorDebugMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMotorDebugMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GMotorDebugMessage::Swap(GMotorDebugMessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(current_, other->current_);
    std::swap(voltage_, other->voltage_);
    std::swap(targetvel_, other->targetvel_);
    std::swap(actualvel_, other->actualvel_);
    std::swap(description_, other->description_);
    std::swap(errortype_, other->errortype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMotorDebugMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMotorDebugMessage_descriptor_;
  metadata.reflection = GMotorDebugMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GChassicDebugMessage::_default_errordesption_;
#ifndef _MSC_VER
const int GChassicDebugMessage::kErrorTypeFieldNumber;
const int GChassicDebugMessage::kErrorDesptionFieldNumber;
const int GChassicDebugMessage::kMotorsFieldNumber;
#endif  // !_MSC_VER

GChassicDebugMessage::GChassicDebugMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GChassicDebugMessage::InitAsDefaultInstance() {
}

GChassicDebugMessage::GChassicDebugMessage(const GChassicDebugMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GChassicDebugMessage::SharedCtor() {
  _cached_size_ = 0;
  errortype_ = 0;
  errordesption_ = const_cast< ::std::string*>(&_default_errordesption_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GChassicDebugMessage::~GChassicDebugMessage() {
  SharedDtor();
}

void GChassicDebugMessage::SharedDtor() {
  if (errordesption_ != &_default_errordesption_) {
    delete errordesption_;
  }
  if (this != default_instance_) {
  }
}

void GChassicDebugMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GChassicDebugMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GChassicDebugMessage_descriptor_;
}

const GChassicDebugMessage& GChassicDebugMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GChassic_2eproto();  return *default_instance_;
}

GChassicDebugMessage* GChassicDebugMessage::default_instance_ = NULL;

GChassicDebugMessage* GChassicDebugMessage::New() const {
  return new GChassicDebugMessage;
}

void GChassicDebugMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errortype_ = 0;
    if (_has_bit(1)) {
      if (errordesption_ != &_default_errordesption_) {
        errordesption_->clear();
      }
    }
  }
  motors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GChassicDebugMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 errorType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errortype_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_errorDesption;
        break;
      }
      
      // optional string errorDesption = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorDesption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errordesption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errordesption().data(), this->errordesption().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_motors;
        break;
      }
      
      // repeated .GMotorDebugMessage motors = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_motors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_motors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_motors;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GChassicDebugMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 errorType = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errortype(), output);
  }
  
  // optional string errorDesption = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errordesption().data(), this->errordesption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errordesption(), output);
  }
  
  // repeated .GMotorDebugMessage motors = 3;
  for (int i = 0; i < this->motors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->motors(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GChassicDebugMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 errorType = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errortype(), target);
  }
  
  // optional string errorDesption = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errordesption().data(), this->errordesption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errordesption(), target);
  }
  
  // repeated .GMotorDebugMessage motors = 3;
  for (int i = 0; i < this->motors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->motors(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GChassicDebugMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 errorType = 1;
    if (has_errortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errortype());
    }
    
    // optional string errorDesption = 2;
    if (has_errordesption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errordesption());
    }
    
  }
  // repeated .GMotorDebugMessage motors = 3;
  total_size += 1 * this->motors_size();
  for (int i = 0; i < this->motors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->motors(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GChassicDebugMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GChassicDebugMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GChassicDebugMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GChassicDebugMessage::MergeFrom(const GChassicDebugMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  motors_.MergeFrom(from.motors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errortype(from.errortype());
    }
    if (from._has_bit(1)) {
      set_errordesption(from.errordesption());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GChassicDebugMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GChassicDebugMessage::CopyFrom(const GChassicDebugMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GChassicDebugMessage::IsInitialized() const {
  
  for (int i = 0; i < motors_size(); i++) {
    if (!this->motors(i).IsInitialized()) return false;
  }
  return true;
}

void GChassicDebugMessage::Swap(GChassicDebugMessage* other) {
  if (other != this) {
    std::swap(errortype_, other->errortype_);
    std::swap(errordesption_, other->errordesption_);
    motors_.Swap(&other->motors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GChassicDebugMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GChassicDebugMessage_descriptor_;
  metadata.reflection = GChassicDebugMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

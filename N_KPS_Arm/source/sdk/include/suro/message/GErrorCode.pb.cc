// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GErrorCode.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GErrorCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GErrorCode_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GErrorCode_2eproto() {
  protobuf_AddDesc_GErrorCode_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GErrorCode.proto");
  GOOGLE_CHECK(file != NULL);
  GErrorCode_descriptor_ = file->message_type(0);
  static const int GErrorCode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GErrorCode, process_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GErrorCode, process_status_),
  };
  GErrorCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GErrorCode_descriptor_,
      GErrorCode::default_instance_,
      GErrorCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GErrorCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GErrorCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GErrorCode));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GErrorCode_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GErrorCode_descriptor_, &GErrorCode::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GErrorCode_2eproto() {
  delete GErrorCode::default_instance_;
  delete GErrorCode_reflection_;
}

void protobuf_AddDesc_GErrorCode_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020GErrorCode.proto\":\n\nGErrorCode\022\024\n\014proc"
    "ess_name\030\001 \002(\014\022\026\n\016process_status\030\002 \002(\005", 78);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GErrorCode.proto", &protobuf_RegisterTypes);
  GErrorCode::default_instance_ = new GErrorCode();
  GErrorCode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GErrorCode_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GErrorCode_2eproto {
  StaticDescriptorInitializer_GErrorCode_2eproto() {
    protobuf_AddDesc_GErrorCode_2eproto();
  }
} static_descriptor_initializer_GErrorCode_2eproto_;


// ===================================================================

const ::std::string GErrorCode::_default_process_name_;
#ifndef _MSC_VER
const int GErrorCode::kProcessNameFieldNumber;
const int GErrorCode::kProcessStatusFieldNumber;
#endif  // !_MSC_VER

GErrorCode::GErrorCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GErrorCode::InitAsDefaultInstance() {
}

GErrorCode::GErrorCode(const GErrorCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GErrorCode::SharedCtor() {
  _cached_size_ = 0;
  process_name_ = const_cast< ::std::string*>(&_default_process_name_);
  process_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GErrorCode::~GErrorCode() {
  SharedDtor();
}

void GErrorCode::SharedDtor() {
  if (process_name_ != &_default_process_name_) {
    delete process_name_;
  }
  if (this != default_instance_) {
  }
}

void GErrorCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GErrorCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GErrorCode_descriptor_;
}

const GErrorCode& GErrorCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GErrorCode_2eproto();  return *default_instance_;
}

GErrorCode* GErrorCode::default_instance_ = NULL;

GErrorCode* GErrorCode::New() const {
  return new GErrorCode;
}

void GErrorCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (process_name_ != &_default_process_name_) {
        process_name_->clear();
      }
    }
    process_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GErrorCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes process_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_process_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_process_status;
        break;
      }
      
      // required int32 process_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_status_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GErrorCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes process_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->process_name(), output);
  }
  
  // required int32 process_status = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->process_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GErrorCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes process_name = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->process_name(), target);
  }
  
  // required int32 process_status = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->process_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GErrorCode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes process_name = 1;
    if (has_process_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->process_name());
    }
    
    // required int32 process_status = 2;
    if (has_process_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->process_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GErrorCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GErrorCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GErrorCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GErrorCode::MergeFrom(const GErrorCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_process_name(from.process_name());
    }
    if (from._has_bit(1)) {
      set_process_status(from.process_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GErrorCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GErrorCode::CopyFrom(const GErrorCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GErrorCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GErrorCode::Swap(GErrorCode* other) {
  if (other != this) {
    std::swap(process_name_, other->process_name_);
    std::swap(process_status_, other->process_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GErrorCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GErrorCode_descriptor_;
  metadata.reflection = GErrorCode_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

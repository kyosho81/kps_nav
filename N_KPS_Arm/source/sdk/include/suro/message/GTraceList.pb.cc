// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GTraceList.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GTracePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTracePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTraceSeg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTraceSeg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTraceList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTraceList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GTraceList_ExecuteStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GTraceList_2eproto() {
  protobuf_AddDesc_GTraceList_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GTraceList.proto");
  GOOGLE_CHECK(file != NULL);
  GTracePoint_descriptor_ = file->message_type(0);
  static const int GTracePoint_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTracePoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTracePoint, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTracePoint, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTracePoint, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTracePoint, starter_),
  };
  GTracePoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTracePoint_descriptor_,
      GTracePoint::default_instance_,
      GTracePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTracePoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTracePoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTracePoint));
  GTraceSeg_descriptor_ = file->message_type(1);
  static const int GTraceSeg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTraceSeg, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTraceSeg, second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTraceSeg, finished_),
  };
  GTraceSeg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTraceSeg_descriptor_,
      GTraceSeg::default_instance_,
      GTraceSeg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTraceSeg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTraceSeg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTraceSeg));
  GTraceList_descriptor_ = file->message_type(2);
  static const int GTraceList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTraceList, lists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTraceList, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTraceList, status_),
  };
  GTraceList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTraceList_descriptor_,
      GTraceList::default_instance_,
      GTraceList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTraceList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTraceList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTraceList));
  GTraceList_ExecuteStatus_descriptor_ = GTraceList_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GTraceList_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTracePoint_descriptor_, &GTracePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTraceSeg_descriptor_, &GTraceSeg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTraceList_descriptor_, &GTraceList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GTraceList_2eproto() {
  delete GTracePoint::default_instance_;
  delete GTracePoint_reflection_;
  delete GTraceSeg::default_instance_;
  delete GTraceSeg_reflection_;
  delete GTraceList::default_instance_;
  delete GTraceList_reflection_;
}

void protobuf_AddDesc_GTraceList_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020GTraceList.proto\"R\n\013GTracePoint\022\t\n\001x\030\001"
    " \002(\001\022\t\n\001y\030\002 \002(\001\022\r\n\005angle\030\003 \002(\001\022\r\n\005speed\030"
    "\004 \001(\005\022\017\n\007starter\030\005 \001(\005\"X\n\tGTraceSeg\022\033\n\005f"
    "irst\030\001 \002(\0132\014.GTracePoint\022\034\n\006second\030\002 \002(\013"
    "2\014.GTracePoint\022\020\n\010finished\030\003 \002(\001\"\262\002\n\nGTr"
    "aceList\022\031\n\005lists\030\001 \003(\0132\n.GTraceSeg\022\013\n\003ma"
    "p\030\002 \002(\014\022)\n\006status\030\003 \001(\0162\031.GTraceList.Exe"
    "cuteStatus\"\320\001\n\rExecuteStatus\022\027\n\023EXECUTE_"
    "STATUS_IDLE\020\001\022\030\n\024EXECUTE_STATUS_TRACE\020\002\022"
    "\032\n\026EXECUTE_STATUS_BLOCKED\020\003\022\035\n\031EXECUTE_S"
    "TATUS_CIRCUMVENT\020\004\022\033\n\027EXECUTE_STATUS_FIN"
    "ISHED\020\005\022\034\n\030EXECUTE_STATUS_EXCEPTION\020\006\022\026\n"
    "\022EXECUTE_STATUS_MAX\020\007", 501);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GTraceList.proto", &protobuf_RegisterTypes);
  GTracePoint::default_instance_ = new GTracePoint();
  GTraceSeg::default_instance_ = new GTraceSeg();
  GTraceList::default_instance_ = new GTraceList();
  GTracePoint::default_instance_->InitAsDefaultInstance();
  GTraceSeg::default_instance_->InitAsDefaultInstance();
  GTraceList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GTraceList_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GTraceList_2eproto {
  StaticDescriptorInitializer_GTraceList_2eproto() {
    protobuf_AddDesc_GTraceList_2eproto();
  }
} static_descriptor_initializer_GTraceList_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GTracePoint::kXFieldNumber;
const int GTracePoint::kYFieldNumber;
const int GTracePoint::kAngleFieldNumber;
const int GTracePoint::kSpeedFieldNumber;
const int GTracePoint::kStarterFieldNumber;
#endif  // !_MSC_VER

GTracePoint::GTracePoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTracePoint::InitAsDefaultInstance() {
}

GTracePoint::GTracePoint(const GTracePoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTracePoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  angle_ = 0;
  speed_ = 0;
  starter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTracePoint::~GTracePoint() {
  SharedDtor();
}

void GTracePoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTracePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTracePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTracePoint_descriptor_;
}

const GTracePoint& GTracePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GTraceList_2eproto();  return *default_instance_;
}

GTracePoint* GTracePoint::default_instance_ = NULL;

GTracePoint* GTracePoint::New() const {
  return new GTracePoint;
}

void GTracePoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    angle_ = 0;
    speed_ = 0;
    starter_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTracePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }
      
      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_angle;
        break;
      }
      
      // required double angle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_speed;
        break;
      }
      
      // optional int32 speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_starter;
        break;
      }
      
      // optional int32 starter = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starter_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTracePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }
  
  // required double y = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }
  
  // required double angle = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->angle(), output);
  }
  
  // optional int32 speed = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->speed(), output);
  }
  
  // optional int32 starter = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->starter(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTracePoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }
  
  // required double y = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }
  
  // required double angle = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->angle(), target);
  }
  
  // optional int32 speed = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->speed(), target);
  }
  
  // optional int32 starter = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->starter(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTracePoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // required double angle = 3;
    if (has_angle()) {
      total_size += 1 + 8;
    }
    
    // optional int32 speed = 4;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }
    
    // optional int32 starter = 5;
    if (has_starter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starter());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTracePoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTracePoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTracePoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTracePoint::MergeFrom(const GTracePoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_x(from.x());
    }
    if (from._has_bit(1)) {
      set_y(from.y());
    }
    if (from._has_bit(2)) {
      set_angle(from.angle());
    }
    if (from._has_bit(3)) {
      set_speed(from.speed());
    }
    if (from._has_bit(4)) {
      set_starter(from.starter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTracePoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTracePoint::CopyFrom(const GTracePoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTracePoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void GTracePoint::Swap(GTracePoint* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(angle_, other->angle_);
    std::swap(speed_, other->speed_);
    std::swap(starter_, other->starter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTracePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTracePoint_descriptor_;
  metadata.reflection = GTracePoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTraceSeg::kFirstFieldNumber;
const int GTraceSeg::kSecondFieldNumber;
const int GTraceSeg::kFinishedFieldNumber;
#endif  // !_MSC_VER

GTraceSeg::GTraceSeg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTraceSeg::InitAsDefaultInstance() {
  first_ = const_cast< ::GTracePoint*>(&::GTracePoint::default_instance());
  second_ = const_cast< ::GTracePoint*>(&::GTracePoint::default_instance());
}

GTraceSeg::GTraceSeg(const GTraceSeg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTraceSeg::SharedCtor() {
  _cached_size_ = 0;
  first_ = NULL;
  second_ = NULL;
  finished_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTraceSeg::~GTraceSeg() {
  SharedDtor();
}

void GTraceSeg::SharedDtor() {
  if (this != default_instance_) {
    delete first_;
    delete second_;
  }
}

void GTraceSeg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTraceSeg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTraceSeg_descriptor_;
}

const GTraceSeg& GTraceSeg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GTraceList_2eproto();  return *default_instance_;
}

GTraceSeg* GTraceSeg::default_instance_ = NULL;

GTraceSeg* GTraceSeg::New() const {
  return new GTraceSeg;
}

void GTraceSeg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (first_ != NULL) first_->::GTracePoint::Clear();
    }
    if (_has_bit(1)) {
      if (second_ != NULL) second_->::GTracePoint::Clear();
    }
    finished_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTraceSeg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GTracePoint first = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_second;
        break;
      }
      
      // required .GTracePoint second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_second:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_second()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_finished;
        break;
      }
      
      // required double finished = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &finished_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTraceSeg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GTracePoint first = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->first(), output);
  }
  
  // required .GTracePoint second = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->second(), output);
  }
  
  // required double finished = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->finished(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTraceSeg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GTracePoint first = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->first(), target);
  }
  
  // required .GTracePoint second = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->second(), target);
  }
  
  // required double finished = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->finished(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTraceSeg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GTracePoint first = 1;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->first());
    }
    
    // required .GTracePoint second = 2;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->second());
    }
    
    // required double finished = 3;
    if (has_finished()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTraceSeg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTraceSeg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTraceSeg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTraceSeg::MergeFrom(const GTraceSeg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_first()->::GTracePoint::MergeFrom(from.first());
    }
    if (from._has_bit(1)) {
      mutable_second()->::GTracePoint::MergeFrom(from.second());
    }
    if (from._has_bit(2)) {
      set_finished(from.finished());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTraceSeg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTraceSeg::CopyFrom(const GTraceSeg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTraceSeg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_first()) {
    if (!this->first().IsInitialized()) return false;
  }
  if (has_second()) {
    if (!this->second().IsInitialized()) return false;
  }
  return true;
}

void GTraceSeg::Swap(GTraceSeg* other) {
  if (other != this) {
    std::swap(first_, other->first_);
    std::swap(second_, other->second_);
    std::swap(finished_, other->finished_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTraceSeg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTraceSeg_descriptor_;
  metadata.reflection = GTraceSeg_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GTraceList_ExecuteStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTraceList_ExecuteStatus_descriptor_;
}
bool GTraceList_ExecuteStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GTraceList_ExecuteStatus GTraceList::EXECUTE_STATUS_IDLE;
const GTraceList_ExecuteStatus GTraceList::EXECUTE_STATUS_TRACE;
const GTraceList_ExecuteStatus GTraceList::EXECUTE_STATUS_BLOCKED;
const GTraceList_ExecuteStatus GTraceList::EXECUTE_STATUS_CIRCUMVENT;
const GTraceList_ExecuteStatus GTraceList::EXECUTE_STATUS_FINISHED;
const GTraceList_ExecuteStatus GTraceList::EXECUTE_STATUS_EXCEPTION;
const GTraceList_ExecuteStatus GTraceList::EXECUTE_STATUS_MAX;
const GTraceList_ExecuteStatus GTraceList::ExecuteStatus_MIN;
const GTraceList_ExecuteStatus GTraceList::ExecuteStatus_MAX;
const int GTraceList::ExecuteStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string GTraceList::_default_map_;
#ifndef _MSC_VER
const int GTraceList::kListsFieldNumber;
const int GTraceList::kMapFieldNumber;
const int GTraceList::kStatusFieldNumber;
#endif  // !_MSC_VER

GTraceList::GTraceList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTraceList::InitAsDefaultInstance() {
}

GTraceList::GTraceList(const GTraceList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTraceList::SharedCtor() {
  _cached_size_ = 0;
  map_ = const_cast< ::std::string*>(&_default_map_);
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTraceList::~GTraceList() {
  SharedDtor();
}

void GTraceList::SharedDtor() {
  if (map_ != &_default_map_) {
    delete map_;
  }
  if (this != default_instance_) {
  }
}

void GTraceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTraceList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTraceList_descriptor_;
}

const GTraceList& GTraceList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GTraceList_2eproto();  return *default_instance_;
}

GTraceList* GTraceList::default_instance_ = NULL;

GTraceList* GTraceList::New() const {
  return new GTraceList;
}

void GTraceList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (map_ != &_default_map_) {
        map_->clear();
      }
    }
    status_ = 1;
  }
  lists_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTraceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GTraceSeg lists = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lists()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lists;
        if (input->ExpectTag(18)) goto parse_map;
        break;
      }
      
      // required bytes map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // optional .GTraceList.ExecuteStatus status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GTraceList_ExecuteStatus_IsValid(value)) {
            set_status(static_cast< ::GTraceList_ExecuteStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTraceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GTraceSeg lists = 1;
  for (int i = 0; i < this->lists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lists(i), output);
  }
  
  // required bytes map = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->map(), output);
  }
  
  // optional .GTraceList.ExecuteStatus status = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTraceList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GTraceSeg lists = 1;
  for (int i = 0; i < this->lists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lists(i), target);
  }
  
  // required bytes map = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->map(), target);
  }
  
  // optional .GTraceList.ExecuteStatus status = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTraceList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bytes map = 2;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map());
    }
    
    // optional .GTraceList.ExecuteStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
  }
  // repeated .GTraceSeg lists = 1;
  total_size += 1 * this->lists_size();
  for (int i = 0; i < this->lists_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lists(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTraceList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTraceList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTraceList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTraceList::MergeFrom(const GTraceList& from) {
  GOOGLE_CHECK_NE(&from, this);
  lists_.MergeFrom(from.lists_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_map(from.map());
    }
    if (from._has_bit(2)) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTraceList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTraceList::CopyFrom(const GTraceList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTraceList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < lists_size(); i++) {
    if (!this->lists(i).IsInitialized()) return false;
  }
  return true;
}

void GTraceList::Swap(GTraceList* other) {
  if (other != this) {
    lists_.Swap(&other->lists_);
    std::swap(map_, other->map_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTraceList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTraceList_descriptor_;
  metadata.reflection = GTraceList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

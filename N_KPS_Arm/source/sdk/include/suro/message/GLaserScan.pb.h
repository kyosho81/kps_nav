// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GLaserScan.proto

#ifndef PROTOBUF_GLaserScan_2eproto__INCLUDED
#define PROTOBUF_GLaserScan_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GLaserScan_2eproto();
void protobuf_AssignDesc_GLaserScan_2eproto();
void protobuf_ShutdownFile_GLaserScan_2eproto();

class GBeam;
class GEcho;
class GLaserScan;

// ===================================================================

class GBeam : public ::google::protobuf::Message {
 public:
  GBeam();
  virtual ~GBeam();
  
  GBeam(const GBeam& from);
  
  inline GBeam& operator=(const GBeam& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GBeam& default_instance();
  
  void Swap(GBeam* other);
  
  // implements Message ----------------------------------------------
  
  GBeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GBeam& from);
  void MergeFrom(const GBeam& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional double angle = 1;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 1;
  inline double angle() const;
  inline void set_angle(double value);
  
  // optional double dist = 2;
  inline bool has_dist() const;
  inline void clear_dist();
  static const int kDistFieldNumber = 2;
  inline double dist() const;
  inline void set_dist(double value);
  
  // optional bool validity = 3;
  inline bool has_validity() const;
  inline void clear_validity();
  static const int kValidityFieldNumber = 3;
  inline bool validity() const;
  inline void set_validity(bool value);
  
  // optional double RSSI = 4;
  inline bool has_rssi() const;
  inline void clear_rssi();
  static const int kRSSIFieldNumber = 4;
  inline double rssi() const;
  inline void set_rssi(double value);
  
  // @@protoc_insertion_point(class_scope:GBeam)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double angle_;
  double dist_;
  bool validity_;
  double rssi_;
  friend void  protobuf_AddDesc_GLaserScan_2eproto();
  friend void protobuf_AssignDesc_GLaserScan_2eproto();
  friend void protobuf_ShutdownFile_GLaserScan_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GBeam* default_instance_;
};
// -------------------------------------------------------------------

class GEcho : public ::google::protobuf::Message {
 public:
  GEcho();
  virtual ~GEcho();
  
  GEcho(const GEcho& from);
  
  inline GEcho& operator=(const GEcho& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GEcho& default_instance();
  
  void Swap(GEcho* other);
  
  // implements Message ----------------------------------------------
  
  GEcho* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GEcho& from);
  void MergeFrom(const GEcho& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .GBeam beams = 1;
  inline int beams_size() const;
  inline void clear_beams();
  static const int kBeamsFieldNumber = 1;
  inline const ::GBeam& beams(int index) const;
  inline ::GBeam* mutable_beams(int index);
  inline ::GBeam* add_beams();
  inline const ::google::protobuf::RepeatedPtrField< ::GBeam >&
      beams() const;
  inline ::google::protobuf::RepeatedPtrField< ::GBeam >*
      mutable_beams();
  
  // @@protoc_insertion_point(class_scope:GEcho)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::GBeam > beams_;
  friend void  protobuf_AddDesc_GLaserScan_2eproto();
  friend void protobuf_AssignDesc_GLaserScan_2eproto();
  friend void protobuf_ShutdownFile_GLaserScan_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GEcho* default_instance_;
};
// -------------------------------------------------------------------

class GLaserScan : public ::google::protobuf::Message {
 public:
  GLaserScan();
  virtual ~GLaserScan();
  
  GLaserScan(const GLaserScan& from);
  
  inline GLaserScan& operator=(const GLaserScan& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GLaserScan& default_instance();
  
  void Swap(GLaserScan* other);
  
  // implements Message ----------------------------------------------
  
  GLaserScan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GLaserScan& from);
  void MergeFrom(const GLaserScan& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .GBeam beams = 1;
  inline int beams_size() const;
  inline void clear_beams();
  static const int kBeamsFieldNumber = 1;
  inline const ::GBeam& beams(int index) const;
  inline ::GBeam* mutable_beams(int index);
  inline ::GBeam* add_beams();
  inline const ::google::protobuf::RepeatedPtrField< ::GBeam >&
      beams() const;
  inline ::google::protobuf::RepeatedPtrField< ::GBeam >*
      mutable_beams();
  
  // optional double time_stamp = 2;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  inline double time_stamp() const;
  inline void set_time_stamp(double value);
  
  // repeated .GEcho echos = 3;
  inline int echos_size() const;
  inline void clear_echos();
  static const int kEchosFieldNumber = 3;
  inline const ::GEcho& echos(int index) const;
  inline ::GEcho* mutable_echos(int index);
  inline ::GEcho* add_echos();
  inline const ::google::protobuf::RepeatedPtrField< ::GEcho >&
      echos() const;
  inline ::google::protobuf::RepeatedPtrField< ::GEcho >*
      mutable_echos();
  
  // optional int32 message_counter = 4;
  inline bool has_message_counter() const;
  inline void clear_message_counter();
  static const int kMessageCounterFieldNumber = 4;
  inline ::google::protobuf::int32 message_counter() const;
  inline void set_message_counter(::google::protobuf::int32 value);
  
  // optional int32 scan_counter = 5;
  inline bool has_scan_counter() const;
  inline void clear_scan_counter();
  static const int kScanCounterFieldNumber = 5;
  inline ::google::protobuf::int32 scan_counter() const;
  inline void set_scan_counter(::google::protobuf::int32 value);
  
  // optional double powerup_duration = 6;
  inline bool has_powerup_duration() const;
  inline void clear_powerup_duration();
  static const int kPowerupDurationFieldNumber = 6;
  inline double powerup_duration() const;
  inline void set_powerup_duration(double value);
  
  // optional double transmission_duration = 7;
  inline bool has_transmission_duration() const;
  inline void clear_transmission_duration();
  static const int kTransmissionDurationFieldNumber = 7;
  inline double transmission_duration() const;
  inline void set_transmission_duration(double value);
  
  // @@protoc_insertion_point(class_scope:GLaserScan)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::GBeam > beams_;
  double time_stamp_;
  ::google::protobuf::RepeatedPtrField< ::GEcho > echos_;
  ::google::protobuf::int32 message_counter_;
  ::google::protobuf::int32 scan_counter_;
  double powerup_duration_;
  double transmission_duration_;
  friend void  protobuf_AddDesc_GLaserScan_2eproto();
  friend void protobuf_AssignDesc_GLaserScan_2eproto();
  friend void protobuf_ShutdownFile_GLaserScan_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GLaserScan* default_instance_;
};
// ===================================================================


// ===================================================================

// GBeam

// optional double angle = 1;
inline bool GBeam::has_angle() const {
  return _has_bit(0);
}
inline void GBeam::clear_angle() {
  angle_ = 0;
  _clear_bit(0);
}
inline double GBeam::angle() const {
  return angle_;
}
inline void GBeam::set_angle(double value) {
  _set_bit(0);
  angle_ = value;
}

// optional double dist = 2;
inline bool GBeam::has_dist() const {
  return _has_bit(1);
}
inline void GBeam::clear_dist() {
  dist_ = 0;
  _clear_bit(1);
}
inline double GBeam::dist() const {
  return dist_;
}
inline void GBeam::set_dist(double value) {
  _set_bit(1);
  dist_ = value;
}

// optional bool validity = 3;
inline bool GBeam::has_validity() const {
  return _has_bit(2);
}
inline void GBeam::clear_validity() {
  validity_ = false;
  _clear_bit(2);
}
inline bool GBeam::validity() const {
  return validity_;
}
inline void GBeam::set_validity(bool value) {
  _set_bit(2);
  validity_ = value;
}

// optional double RSSI = 4;
inline bool GBeam::has_rssi() const {
  return _has_bit(3);
}
inline void GBeam::clear_rssi() {
  rssi_ = 0;
  _clear_bit(3);
}
inline double GBeam::rssi() const {
  return rssi_;
}
inline void GBeam::set_rssi(double value) {
  _set_bit(3);
  rssi_ = value;
}

// -------------------------------------------------------------------

// GEcho

// repeated .GBeam beams = 1;
inline int GEcho::beams_size() const {
  return beams_.size();
}
inline void GEcho::clear_beams() {
  beams_.Clear();
}
inline const ::GBeam& GEcho::beams(int index) const {
  return beams_.Get(index);
}
inline ::GBeam* GEcho::mutable_beams(int index) {
  return beams_.Mutable(index);
}
inline ::GBeam* GEcho::add_beams() {
  return beams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GBeam >&
GEcho::beams() const {
  return beams_;
}
inline ::google::protobuf::RepeatedPtrField< ::GBeam >*
GEcho::mutable_beams() {
  return &beams_;
}

// -------------------------------------------------------------------

// GLaserScan

// repeated .GBeam beams = 1;
inline int GLaserScan::beams_size() const {
  return beams_.size();
}
inline void GLaserScan::clear_beams() {
  beams_.Clear();
}
inline const ::GBeam& GLaserScan::beams(int index) const {
  return beams_.Get(index);
}
inline ::GBeam* GLaserScan::mutable_beams(int index) {
  return beams_.Mutable(index);
}
inline ::GBeam* GLaserScan::add_beams() {
  return beams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GBeam >&
GLaserScan::beams() const {
  return beams_;
}
inline ::google::protobuf::RepeatedPtrField< ::GBeam >*
GLaserScan::mutable_beams() {
  return &beams_;
}

// optional double time_stamp = 2;
inline bool GLaserScan::has_time_stamp() const {
  return _has_bit(1);
}
inline void GLaserScan::clear_time_stamp() {
  time_stamp_ = 0;
  _clear_bit(1);
}
inline double GLaserScan::time_stamp() const {
  return time_stamp_;
}
inline void GLaserScan::set_time_stamp(double value) {
  _set_bit(1);
  time_stamp_ = value;
}

// repeated .GEcho echos = 3;
inline int GLaserScan::echos_size() const {
  return echos_.size();
}
inline void GLaserScan::clear_echos() {
  echos_.Clear();
}
inline const ::GEcho& GLaserScan::echos(int index) const {
  return echos_.Get(index);
}
inline ::GEcho* GLaserScan::mutable_echos(int index) {
  return echos_.Mutable(index);
}
inline ::GEcho* GLaserScan::add_echos() {
  return echos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GEcho >&
GLaserScan::echos() const {
  return echos_;
}
inline ::google::protobuf::RepeatedPtrField< ::GEcho >*
GLaserScan::mutable_echos() {
  return &echos_;
}

// optional int32 message_counter = 4;
inline bool GLaserScan::has_message_counter() const {
  return _has_bit(3);
}
inline void GLaserScan::clear_message_counter() {
  message_counter_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 GLaserScan::message_counter() const {
  return message_counter_;
}
inline void GLaserScan::set_message_counter(::google::protobuf::int32 value) {
  _set_bit(3);
  message_counter_ = value;
}

// optional int32 scan_counter = 5;
inline bool GLaserScan::has_scan_counter() const {
  return _has_bit(4);
}
inline void GLaserScan::clear_scan_counter() {
  scan_counter_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 GLaserScan::scan_counter() const {
  return scan_counter_;
}
inline void GLaserScan::set_scan_counter(::google::protobuf::int32 value) {
  _set_bit(4);
  scan_counter_ = value;
}

// optional double powerup_duration = 6;
inline bool GLaserScan::has_powerup_duration() const {
  return _has_bit(5);
}
inline void GLaserScan::clear_powerup_duration() {
  powerup_duration_ = 0;
  _clear_bit(5);
}
inline double GLaserScan::powerup_duration() const {
  return powerup_duration_;
}
inline void GLaserScan::set_powerup_duration(double value) {
  _set_bit(5);
  powerup_duration_ = value;
}

// optional double transmission_duration = 7;
inline bool GLaserScan::has_transmission_duration() const {
  return _has_bit(6);
}
inline void GLaserScan::clear_transmission_duration() {
  transmission_duration_ = 0;
  _clear_bit(6);
}
inline double GLaserScan::transmission_duration() const {
  return transmission_duration_;
}
inline void GLaserScan::set_transmission_duration(double value) {
  _set_bit(6);
  transmission_duration_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GLaserScan_2eproto__INCLUDED

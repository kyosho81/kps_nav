// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GRobPosFind.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GRobPosQuality_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GRobPosQuality_reflection_ = NULL;
const ::google::protobuf::Descriptor* GFindRobPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GFindRobPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* GFindRobPosStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GFindRobPosStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GFindRobPosStatus_FindPosStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GWandererCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GWandererCmd_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GRobPosFind_2eproto() {
  protobuf_AddDesc_GRobPosFind_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GRobPosFind.proto");
  GOOGLE_CHECK(file != NULL);
  GRobPosQuality_descriptor_ = file->message_type(0);
  static const int GRobPosQuality_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobPosQuality, entropy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobPosQuality, confidence_),
  };
  GRobPosQuality_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GRobPosQuality_descriptor_,
      GRobPosQuality::default_instance_,
      GRobPosQuality_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobPosQuality, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GRobPosQuality, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GRobPosQuality));
  GFindRobPos_descriptor_ = file->message_type(1);
  static const int GFindRobPos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GFindRobPos, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GFindRobPos, timeout_),
  };
  GFindRobPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GFindRobPos_descriptor_,
      GFindRobPos::default_instance_,
      GFindRobPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GFindRobPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GFindRobPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GFindRobPos));
  GFindRobPosStatus_descriptor_ = file->message_type(2);
  static const int GFindRobPosStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GFindRobPosStatus, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GFindRobPosStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GFindRobPosStatus, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GFindRobPosStatus, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GFindRobPosStatus, angle_),
  };
  GFindRobPosStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GFindRobPosStatus_descriptor_,
      GFindRobPosStatus::default_instance_,
      GFindRobPosStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GFindRobPosStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GFindRobPosStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GFindRobPosStatus));
  GFindRobPosStatus_FindPosStatus_descriptor_ = GFindRobPosStatus_descriptor_->enum_type(0);
  GWandererCmd_descriptor_ = file->message_type(3);
  static const int GWandererCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWandererCmd, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWandererCmd, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWandererCmd, heading_),
  };
  GWandererCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GWandererCmd_descriptor_,
      GWandererCmd::default_instance_,
      GWandererCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWandererCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWandererCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GWandererCmd));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GRobPosFind_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GRobPosQuality_descriptor_, &GRobPosQuality::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GFindRobPos_descriptor_, &GFindRobPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GFindRobPosStatus_descriptor_, &GFindRobPosStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GWandererCmd_descriptor_, &GWandererCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GRobPosFind_2eproto() {
  delete GRobPosQuality::default_instance_;
  delete GRobPosQuality_reflection_;
  delete GFindRobPos::default_instance_;
  delete GFindRobPos_reflection_;
  delete GFindRobPosStatus::default_instance_;
  delete GFindRobPosStatus_reflection_;
  delete GWandererCmd::default_instance_;
  delete GWandererCmd_reflection_;
}

void protobuf_AddDesc_GRobPosFind_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021GRobPosFind.proto\"5\n\016GRobPosQuality\022\017\n"
    "\007entropy\030\001 \002(\001\022\022\n\nconfidence\030\002 \002(\001\",\n\013GF"
    "indRobPos\022\014\n\004file\030\001 \002(\t\022\017\n\007timeout\030\002 \001(\005"
    "\"\355\001\n\021GFindRobPosStatus\022\014\n\004file\030\001 \002(\t\0220\n\006"
    "status\030\002 \002(\0162 .GFindRobPosStatus.FindPos"
    "Status\022\t\n\001x\030\003 \001(\001\022\t\n\001y\030\004 \001(\001\022\r\n\005angle\030\005 "
    "\001(\001\"s\n\rFindPosStatus\022\021\n\rFIND_POS_IDLE\020\001\022"
    "\024\n\020FIND_POS_LOADING\020\002\022\024\n\020FIND_POS_RUNNIN"
    "G\020\003\022\020\n\014FIND_POS_SUC\020\004\022\021\n\rFIND_POS_FAIL\020\005"
    "\"@\n\014GWandererCmd\022\017\n\007timeout\030\001 \002(\005\022\016\n\006rad"
    "ius\030\002 \001(\001\022\017\n\007heading\030\003 \001(\001", 426);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GRobPosFind.proto", &protobuf_RegisterTypes);
  GRobPosQuality::default_instance_ = new GRobPosQuality();
  GFindRobPos::default_instance_ = new GFindRobPos();
  GFindRobPosStatus::default_instance_ = new GFindRobPosStatus();
  GWandererCmd::default_instance_ = new GWandererCmd();
  GRobPosQuality::default_instance_->InitAsDefaultInstance();
  GFindRobPos::default_instance_->InitAsDefaultInstance();
  GFindRobPosStatus::default_instance_->InitAsDefaultInstance();
  GWandererCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GRobPosFind_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GRobPosFind_2eproto {
  StaticDescriptorInitializer_GRobPosFind_2eproto() {
    protobuf_AddDesc_GRobPosFind_2eproto();
  }
} static_descriptor_initializer_GRobPosFind_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GRobPosQuality::kEntropyFieldNumber;
const int GRobPosQuality::kConfidenceFieldNumber;
#endif  // !_MSC_VER

GRobPosQuality::GRobPosQuality()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GRobPosQuality::InitAsDefaultInstance() {
}

GRobPosQuality::GRobPosQuality(const GRobPosQuality& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GRobPosQuality::SharedCtor() {
  _cached_size_ = 0;
  entropy_ = 0;
  confidence_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GRobPosQuality::~GRobPosQuality() {
  SharedDtor();
}

void GRobPosQuality::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GRobPosQuality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GRobPosQuality::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GRobPosQuality_descriptor_;
}

const GRobPosQuality& GRobPosQuality::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GRobPosFind_2eproto();  return *default_instance_;
}

GRobPosQuality* GRobPosQuality::default_instance_ = NULL;

GRobPosQuality* GRobPosQuality::New() const {
  return new GRobPosQuality;
}

void GRobPosQuality::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entropy_ = 0;
    confidence_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GRobPosQuality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double entropy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &entropy_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_confidence;
        break;
      }
      
      // required double confidence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_confidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GRobPosQuality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double entropy = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->entropy(), output);
  }
  
  // required double confidence = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->confidence(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GRobPosQuality::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double entropy = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->entropy(), target);
  }
  
  // required double confidence = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->confidence(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GRobPosQuality::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double entropy = 1;
    if (has_entropy()) {
      total_size += 1 + 8;
    }
    
    // required double confidence = 2;
    if (has_confidence()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GRobPosQuality::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GRobPosQuality* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GRobPosQuality*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GRobPosQuality::MergeFrom(const GRobPosQuality& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_entropy(from.entropy());
    }
    if (from._has_bit(1)) {
      set_confidence(from.confidence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GRobPosQuality::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GRobPosQuality::CopyFrom(const GRobPosQuality& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GRobPosQuality::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GRobPosQuality::Swap(GRobPosQuality* other) {
  if (other != this) {
    std::swap(entropy_, other->entropy_);
    std::swap(confidence_, other->confidence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GRobPosQuality::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GRobPosQuality_descriptor_;
  metadata.reflection = GRobPosQuality_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GFindRobPos::_default_file_;
#ifndef _MSC_VER
const int GFindRobPos::kFileFieldNumber;
const int GFindRobPos::kTimeoutFieldNumber;
#endif  // !_MSC_VER

GFindRobPos::GFindRobPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GFindRobPos::InitAsDefaultInstance() {
}

GFindRobPos::GFindRobPos(const GFindRobPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GFindRobPos::SharedCtor() {
  _cached_size_ = 0;
  file_ = const_cast< ::std::string*>(&_default_file_);
  timeout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GFindRobPos::~GFindRobPos() {
  SharedDtor();
}

void GFindRobPos::SharedDtor() {
  if (file_ != &_default_file_) {
    delete file_;
  }
  if (this != default_instance_) {
  }
}

void GFindRobPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GFindRobPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GFindRobPos_descriptor_;
}

const GFindRobPos& GFindRobPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GRobPosFind_2eproto();  return *default_instance_;
}

GFindRobPos* GFindRobPos::default_instance_ = NULL;

GFindRobPos* GFindRobPos::New() const {
  return new GFindRobPos;
}

void GFindRobPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (file_ != &_default_file_) {
        file_->clear();
      }
    }
    timeout_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GFindRobPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timeout;
        break;
      }
      
      // optional int32 timeout = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GFindRobPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file(), output);
  }
  
  // optional int32 timeout = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timeout(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GFindRobPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file(), target);
  }
  
  // optional int32 timeout = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timeout(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GFindRobPos::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file = 1;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }
    
    // optional int32 timeout = 2;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GFindRobPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GFindRobPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GFindRobPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GFindRobPos::MergeFrom(const GFindRobPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_file(from.file());
    }
    if (from._has_bit(1)) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GFindRobPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GFindRobPos::CopyFrom(const GFindRobPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GFindRobPos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GFindRobPos::Swap(GFindRobPos* other) {
  if (other != this) {
    std::swap(file_, other->file_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GFindRobPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GFindRobPos_descriptor_;
  metadata.reflection = GFindRobPos_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GFindRobPosStatus_FindPosStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GFindRobPosStatus_FindPosStatus_descriptor_;
}
bool GFindRobPosStatus_FindPosStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GFindRobPosStatus_FindPosStatus GFindRobPosStatus::FIND_POS_IDLE;
const GFindRobPosStatus_FindPosStatus GFindRobPosStatus::FIND_POS_LOADING;
const GFindRobPosStatus_FindPosStatus GFindRobPosStatus::FIND_POS_RUNNING;
const GFindRobPosStatus_FindPosStatus GFindRobPosStatus::FIND_POS_SUC;
const GFindRobPosStatus_FindPosStatus GFindRobPosStatus::FIND_POS_FAIL;
const GFindRobPosStatus_FindPosStatus GFindRobPosStatus::FindPosStatus_MIN;
const GFindRobPosStatus_FindPosStatus GFindRobPosStatus::FindPosStatus_MAX;
const int GFindRobPosStatus::FindPosStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string GFindRobPosStatus::_default_file_;
#ifndef _MSC_VER
const int GFindRobPosStatus::kFileFieldNumber;
const int GFindRobPosStatus::kStatusFieldNumber;
const int GFindRobPosStatus::kXFieldNumber;
const int GFindRobPosStatus::kYFieldNumber;
const int GFindRobPosStatus::kAngleFieldNumber;
#endif  // !_MSC_VER

GFindRobPosStatus::GFindRobPosStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GFindRobPosStatus::InitAsDefaultInstance() {
}

GFindRobPosStatus::GFindRobPosStatus(const GFindRobPosStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GFindRobPosStatus::SharedCtor() {
  _cached_size_ = 0;
  file_ = const_cast< ::std::string*>(&_default_file_);
  status_ = 1;
  x_ = 0;
  y_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GFindRobPosStatus::~GFindRobPosStatus() {
  SharedDtor();
}

void GFindRobPosStatus::SharedDtor() {
  if (file_ != &_default_file_) {
    delete file_;
  }
  if (this != default_instance_) {
  }
}

void GFindRobPosStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GFindRobPosStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GFindRobPosStatus_descriptor_;
}

const GFindRobPosStatus& GFindRobPosStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GRobPosFind_2eproto();  return *default_instance_;
}

GFindRobPosStatus* GFindRobPosStatus::default_instance_ = NULL;

GFindRobPosStatus* GFindRobPosStatus::New() const {
  return new GFindRobPosStatus;
}

void GFindRobPosStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (file_ != &_default_file_) {
        file_->clear();
      }
    }
    status_ = 1;
    x_ = 0;
    y_ = 0;
    angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GFindRobPosStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // required .GFindRobPosStatus.FindPosStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GFindRobPosStatus_FindPosStatus_IsValid(value)) {
            set_status(static_cast< ::GFindRobPosStatus_FindPosStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_x;
        break;
      }
      
      // optional double x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_y;
        break;
      }
      
      // optional double y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_angle;
        break;
      }
      
      // optional double angle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GFindRobPosStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file(), output);
  }
  
  // required .GFindRobPosStatus.FindPosStatus status = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }
  
  // optional double x = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }
  
  // optional double y = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }
  
  // optional double angle = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->angle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GFindRobPosStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file(), target);
  }
  
  // required .GFindRobPosStatus.FindPosStatus status = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }
  
  // optional double x = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }
  
  // optional double y = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }
  
  // optional double angle = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->angle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GFindRobPosStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file = 1;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }
    
    // required .GFindRobPosStatus.FindPosStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // optional double x = 3;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // optional double y = 4;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // optional double angle = 5;
    if (has_angle()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GFindRobPosStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GFindRobPosStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GFindRobPosStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GFindRobPosStatus::MergeFrom(const GFindRobPosStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_file(from.file());
    }
    if (from._has_bit(1)) {
      set_status(from.status());
    }
    if (from._has_bit(2)) {
      set_x(from.x());
    }
    if (from._has_bit(3)) {
      set_y(from.y());
    }
    if (from._has_bit(4)) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GFindRobPosStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GFindRobPosStatus::CopyFrom(const GFindRobPosStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GFindRobPosStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GFindRobPosStatus::Swap(GFindRobPosStatus* other) {
  if (other != this) {
    std::swap(file_, other->file_);
    std::swap(status_, other->status_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GFindRobPosStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GFindRobPosStatus_descriptor_;
  metadata.reflection = GFindRobPosStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GWandererCmd::kTimeoutFieldNumber;
const int GWandererCmd::kRadiusFieldNumber;
const int GWandererCmd::kHeadingFieldNumber;
#endif  // !_MSC_VER

GWandererCmd::GWandererCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GWandererCmd::InitAsDefaultInstance() {
}

GWandererCmd::GWandererCmd(const GWandererCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GWandererCmd::SharedCtor() {
  _cached_size_ = 0;
  timeout_ = 0;
  radius_ = 0;
  heading_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GWandererCmd::~GWandererCmd() {
  SharedDtor();
}

void GWandererCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GWandererCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GWandererCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GWandererCmd_descriptor_;
}

const GWandererCmd& GWandererCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GRobPosFind_2eproto();  return *default_instance_;
}

GWandererCmd* GWandererCmd::default_instance_ = NULL;

GWandererCmd* GWandererCmd::New() const {
  return new GWandererCmd;
}

void GWandererCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeout_ = 0;
    radius_ = 0;
    heading_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GWandererCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 timeout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_radius;
        break;
      }
      
      // optional double radius = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_heading;
        break;
      }
      
      // optional double heading = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GWandererCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 timeout = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timeout(), output);
  }
  
  // optional double radius = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->radius(), output);
  }
  
  // optional double heading = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->heading(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GWandererCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 timeout = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timeout(), target);
  }
  
  // optional double radius = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->radius(), target);
  }
  
  // optional double heading = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->heading(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GWandererCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 timeout = 1;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }
    
    // optional double radius = 2;
    if (has_radius()) {
      total_size += 1 + 8;
    }
    
    // optional double heading = 3;
    if (has_heading()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GWandererCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GWandererCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GWandererCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GWandererCmd::MergeFrom(const GWandererCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_timeout(from.timeout());
    }
    if (from._has_bit(1)) {
      set_radius(from.radius());
    }
    if (from._has_bit(2)) {
      set_heading(from.heading());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GWandererCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWandererCmd::CopyFrom(const GWandererCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWandererCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GWandererCmd::Swap(GWandererCmd* other) {
  if (other != this) {
    std::swap(timeout_, other->timeout_);
    std::swap(radius_, other->radius_);
    std::swap(heading_, other->heading_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GWandererCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GWandererCmd_descriptor_;
  metadata.reflection = GWandererCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

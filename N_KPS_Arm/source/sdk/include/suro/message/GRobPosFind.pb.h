// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GRobPosFind.proto

#ifndef PROTOBUF_GRobPosFind_2eproto__INCLUDED
#define PROTOBUF_GRobPosFind_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GRobPosFind_2eproto();
void protobuf_AssignDesc_GRobPosFind_2eproto();
void protobuf_ShutdownFile_GRobPosFind_2eproto();

class GRobPosQuality;
class GFindRobPos;
class GFindRobPosStatus;
class GWandererCmd;

enum GFindRobPosStatus_FindPosStatus {
  GFindRobPosStatus_FindPosStatus_FIND_POS_IDLE = 1,
  GFindRobPosStatus_FindPosStatus_FIND_POS_LOADING = 2,
  GFindRobPosStatus_FindPosStatus_FIND_POS_RUNNING = 3,
  GFindRobPosStatus_FindPosStatus_FIND_POS_SUC = 4,
  GFindRobPosStatus_FindPosStatus_FIND_POS_FAIL = 5
};
bool GFindRobPosStatus_FindPosStatus_IsValid(int value);
const GFindRobPosStatus_FindPosStatus GFindRobPosStatus_FindPosStatus_FindPosStatus_MIN = GFindRobPosStatus_FindPosStatus_FIND_POS_IDLE;
const GFindRobPosStatus_FindPosStatus GFindRobPosStatus_FindPosStatus_FindPosStatus_MAX = GFindRobPosStatus_FindPosStatus_FIND_POS_FAIL;
const int GFindRobPosStatus_FindPosStatus_FindPosStatus_ARRAYSIZE = GFindRobPosStatus_FindPosStatus_FindPosStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* GFindRobPosStatus_FindPosStatus_descriptor();
inline const ::std::string& GFindRobPosStatus_FindPosStatus_Name(GFindRobPosStatus_FindPosStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    GFindRobPosStatus_FindPosStatus_descriptor(), value);
}
inline bool GFindRobPosStatus_FindPosStatus_Parse(
    const ::std::string& name, GFindRobPosStatus_FindPosStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GFindRobPosStatus_FindPosStatus>(
    GFindRobPosStatus_FindPosStatus_descriptor(), name, value);
}
// ===================================================================

class GRobPosQuality : public ::google::protobuf::Message {
 public:
  GRobPosQuality();
  virtual ~GRobPosQuality();
  
  GRobPosQuality(const GRobPosQuality& from);
  
  inline GRobPosQuality& operator=(const GRobPosQuality& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GRobPosQuality& default_instance();
  
  void Swap(GRobPosQuality* other);
  
  // implements Message ----------------------------------------------
  
  GRobPosQuality* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GRobPosQuality& from);
  void MergeFrom(const GRobPosQuality& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double entropy = 1;
  inline bool has_entropy() const;
  inline void clear_entropy();
  static const int kEntropyFieldNumber = 1;
  inline double entropy() const;
  inline void set_entropy(double value);
  
  // required double confidence = 2;
  inline bool has_confidence() const;
  inline void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  inline double confidence() const;
  inline void set_confidence(double value);
  
  // @@protoc_insertion_point(class_scope:GRobPosQuality)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double entropy_;
  double confidence_;
  friend void  protobuf_AddDesc_GRobPosFind_2eproto();
  friend void protobuf_AssignDesc_GRobPosFind_2eproto();
  friend void protobuf_ShutdownFile_GRobPosFind_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GRobPosQuality* default_instance_;
};
// -------------------------------------------------------------------

class GFindRobPos : public ::google::protobuf::Message {
 public:
  GFindRobPos();
  virtual ~GFindRobPos();
  
  GFindRobPos(const GFindRobPos& from);
  
  inline GFindRobPos& operator=(const GFindRobPos& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GFindRobPos& default_instance();
  
  void Swap(GFindRobPos* other);
  
  // implements Message ----------------------------------------------
  
  GFindRobPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GFindRobPos& from);
  void MergeFrom(const GFindRobPos& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string file = 1;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 1;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  
  // optional int32 timeout = 2;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 2;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:GFindRobPos)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* file_;
  static const ::std::string _default_file_;
  ::google::protobuf::int32 timeout_;
  friend void  protobuf_AddDesc_GRobPosFind_2eproto();
  friend void protobuf_AssignDesc_GRobPosFind_2eproto();
  friend void protobuf_ShutdownFile_GRobPosFind_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GFindRobPos* default_instance_;
};
// -------------------------------------------------------------------

class GFindRobPosStatus : public ::google::protobuf::Message {
 public:
  GFindRobPosStatus();
  virtual ~GFindRobPosStatus();
  
  GFindRobPosStatus(const GFindRobPosStatus& from);
  
  inline GFindRobPosStatus& operator=(const GFindRobPosStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GFindRobPosStatus& default_instance();
  
  void Swap(GFindRobPosStatus* other);
  
  // implements Message ----------------------------------------------
  
  GFindRobPosStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GFindRobPosStatus& from);
  void MergeFrom(const GFindRobPosStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef GFindRobPosStatus_FindPosStatus FindPosStatus;
  static const FindPosStatus FIND_POS_IDLE = GFindRobPosStatus_FindPosStatus_FIND_POS_IDLE;
  static const FindPosStatus FIND_POS_LOADING = GFindRobPosStatus_FindPosStatus_FIND_POS_LOADING;
  static const FindPosStatus FIND_POS_RUNNING = GFindRobPosStatus_FindPosStatus_FIND_POS_RUNNING;
  static const FindPosStatus FIND_POS_SUC = GFindRobPosStatus_FindPosStatus_FIND_POS_SUC;
  static const FindPosStatus FIND_POS_FAIL = GFindRobPosStatus_FindPosStatus_FIND_POS_FAIL;
  static inline bool FindPosStatus_IsValid(int value) {
    return GFindRobPosStatus_FindPosStatus_IsValid(value);
  }
  static const FindPosStatus FindPosStatus_MIN =
    GFindRobPosStatus_FindPosStatus_FindPosStatus_MIN;
  static const FindPosStatus FindPosStatus_MAX =
    GFindRobPosStatus_FindPosStatus_FindPosStatus_MAX;
  static const int FindPosStatus_ARRAYSIZE =
    GFindRobPosStatus_FindPosStatus_FindPosStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FindPosStatus_descriptor() {
    return GFindRobPosStatus_FindPosStatus_descriptor();
  }
  static inline const ::std::string& FindPosStatus_Name(FindPosStatus value) {
    return GFindRobPosStatus_FindPosStatus_Name(value);
  }
  static inline bool FindPosStatus_Parse(const ::std::string& name,
      FindPosStatus* value) {
    return GFindRobPosStatus_FindPosStatus_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string file = 1;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 1;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  
  // required .GFindRobPosStatus.FindPosStatus status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::GFindRobPosStatus_FindPosStatus status() const;
  inline void set_status(::GFindRobPosStatus_FindPosStatus value);
  
  // optional double x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline double x() const;
  inline void set_x(double value);
  
  // optional double y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline double y() const;
  inline void set_y(double value);
  
  // optional double angle = 5;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 5;
  inline double angle() const;
  inline void set_angle(double value);
  
  // @@protoc_insertion_point(class_scope:GFindRobPosStatus)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* file_;
  static const ::std::string _default_file_;
  int status_;
  double x_;
  double y_;
  double angle_;
  friend void  protobuf_AddDesc_GRobPosFind_2eproto();
  friend void protobuf_AssignDesc_GRobPosFind_2eproto();
  friend void protobuf_ShutdownFile_GRobPosFind_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GFindRobPosStatus* default_instance_;
};
// -------------------------------------------------------------------

class GWandererCmd : public ::google::protobuf::Message {
 public:
  GWandererCmd();
  virtual ~GWandererCmd();
  
  GWandererCmd(const GWandererCmd& from);
  
  inline GWandererCmd& operator=(const GWandererCmd& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GWandererCmd& default_instance();
  
  void Swap(GWandererCmd* other);
  
  // implements Message ----------------------------------------------
  
  GWandererCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GWandererCmd& from);
  void MergeFrom(const GWandererCmd& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 timeout = 1;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 1;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);
  
  // optional double radius = 2;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 2;
  inline double radius() const;
  inline void set_radius(double value);
  
  // optional double heading = 3;
  inline bool has_heading() const;
  inline void clear_heading();
  static const int kHeadingFieldNumber = 3;
  inline double heading() const;
  inline void set_heading(double value);
  
  // @@protoc_insertion_point(class_scope:GWandererCmd)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 timeout_;
  double radius_;
  double heading_;
  friend void  protobuf_AddDesc_GRobPosFind_2eproto();
  friend void protobuf_AssignDesc_GRobPosFind_2eproto();
  friend void protobuf_ShutdownFile_GRobPosFind_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GWandererCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// GRobPosQuality

// required double entropy = 1;
inline bool GRobPosQuality::has_entropy() const {
  return _has_bit(0);
}
inline void GRobPosQuality::clear_entropy() {
  entropy_ = 0;
  _clear_bit(0);
}
inline double GRobPosQuality::entropy() const {
  return entropy_;
}
inline void GRobPosQuality::set_entropy(double value) {
  _set_bit(0);
  entropy_ = value;
}

// required double confidence = 2;
inline bool GRobPosQuality::has_confidence() const {
  return _has_bit(1);
}
inline void GRobPosQuality::clear_confidence() {
  confidence_ = 0;
  _clear_bit(1);
}
inline double GRobPosQuality::confidence() const {
  return confidence_;
}
inline void GRobPosQuality::set_confidence(double value) {
  _set_bit(1);
  confidence_ = value;
}

// -------------------------------------------------------------------

// GFindRobPos

// required string file = 1;
inline bool GFindRobPos::has_file() const {
  return _has_bit(0);
}
inline void GFindRobPos::clear_file() {
  if (file_ != &_default_file_) {
    file_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GFindRobPos::file() const {
  return *file_;
}
inline void GFindRobPos::set_file(const ::std::string& value) {
  _set_bit(0);
  if (file_ == &_default_file_) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void GFindRobPos::set_file(const char* value) {
  _set_bit(0);
  if (file_ == &_default_file_) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void GFindRobPos::set_file(const char* value, size_t size) {
  _set_bit(0);
  if (file_ == &_default_file_) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GFindRobPos::mutable_file() {
  _set_bit(0);
  if (file_ == &_default_file_) {
    file_ = new ::std::string;
  }
  return file_;
}

// optional int32 timeout = 2;
inline bool GFindRobPos::has_timeout() const {
  return _has_bit(1);
}
inline void GFindRobPos::clear_timeout() {
  timeout_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 GFindRobPos::timeout() const {
  return timeout_;
}
inline void GFindRobPos::set_timeout(::google::protobuf::int32 value) {
  _set_bit(1);
  timeout_ = value;
}

// -------------------------------------------------------------------

// GFindRobPosStatus

// required string file = 1;
inline bool GFindRobPosStatus::has_file() const {
  return _has_bit(0);
}
inline void GFindRobPosStatus::clear_file() {
  if (file_ != &_default_file_) {
    file_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GFindRobPosStatus::file() const {
  return *file_;
}
inline void GFindRobPosStatus::set_file(const ::std::string& value) {
  _set_bit(0);
  if (file_ == &_default_file_) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void GFindRobPosStatus::set_file(const char* value) {
  _set_bit(0);
  if (file_ == &_default_file_) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void GFindRobPosStatus::set_file(const char* value, size_t size) {
  _set_bit(0);
  if (file_ == &_default_file_) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GFindRobPosStatus::mutable_file() {
  _set_bit(0);
  if (file_ == &_default_file_) {
    file_ = new ::std::string;
  }
  return file_;
}

// required .GFindRobPosStatus.FindPosStatus status = 2;
inline bool GFindRobPosStatus::has_status() const {
  return _has_bit(1);
}
inline void GFindRobPosStatus::clear_status() {
  status_ = 1;
  _clear_bit(1);
}
inline ::GFindRobPosStatus_FindPosStatus GFindRobPosStatus::status() const {
  return static_cast< ::GFindRobPosStatus_FindPosStatus >(status_);
}
inline void GFindRobPosStatus::set_status(::GFindRobPosStatus_FindPosStatus value) {
  GOOGLE_DCHECK(::GFindRobPosStatus_FindPosStatus_IsValid(value));
  _set_bit(1);
  status_ = value;
}

// optional double x = 3;
inline bool GFindRobPosStatus::has_x() const {
  return _has_bit(2);
}
inline void GFindRobPosStatus::clear_x() {
  x_ = 0;
  _clear_bit(2);
}
inline double GFindRobPosStatus::x() const {
  return x_;
}
inline void GFindRobPosStatus::set_x(double value) {
  _set_bit(2);
  x_ = value;
}

// optional double y = 4;
inline bool GFindRobPosStatus::has_y() const {
  return _has_bit(3);
}
inline void GFindRobPosStatus::clear_y() {
  y_ = 0;
  _clear_bit(3);
}
inline double GFindRobPosStatus::y() const {
  return y_;
}
inline void GFindRobPosStatus::set_y(double value) {
  _set_bit(3);
  y_ = value;
}

// optional double angle = 5;
inline bool GFindRobPosStatus::has_angle() const {
  return _has_bit(4);
}
inline void GFindRobPosStatus::clear_angle() {
  angle_ = 0;
  _clear_bit(4);
}
inline double GFindRobPosStatus::angle() const {
  return angle_;
}
inline void GFindRobPosStatus::set_angle(double value) {
  _set_bit(4);
  angle_ = value;
}

// -------------------------------------------------------------------

// GWandererCmd

// required int32 timeout = 1;
inline bool GWandererCmd::has_timeout() const {
  return _has_bit(0);
}
inline void GWandererCmd::clear_timeout() {
  timeout_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 GWandererCmd::timeout() const {
  return timeout_;
}
inline void GWandererCmd::set_timeout(::google::protobuf::int32 value) {
  _set_bit(0);
  timeout_ = value;
}

// optional double radius = 2;
inline bool GWandererCmd::has_radius() const {
  return _has_bit(1);
}
inline void GWandererCmd::clear_radius() {
  radius_ = 0;
  _clear_bit(1);
}
inline double GWandererCmd::radius() const {
  return radius_;
}
inline void GWandererCmd::set_radius(double value) {
  _set_bit(1);
  radius_ = value;
}

// optional double heading = 3;
inline bool GWandererCmd::has_heading() const {
  return _has_bit(2);
}
inline void GWandererCmd::clear_heading() {
  heading_ = 0;
  _clear_bit(2);
}
inline double GWandererCmd::heading() const {
  return heading_;
}
inline void GWandererCmd::set_heading(double value) {
  _set_bit(2);
  heading_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GFindRobPosStatus_FindPosStatus>() {
  return ::GFindRobPosStatus_FindPosStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GRobPosFind_2eproto__INCLUDED

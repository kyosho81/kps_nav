// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cargo_type.proto

#ifndef PROTOBUF_cargo_5ftype_2eproto__INCLUDED
#define PROTOBUF_cargo_5ftype_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)

namespace KPS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cargo_5ftype_2eproto();
void protobuf_AssignDesc_cargo_5ftype_2eproto();
void protobuf_ShutdownFile_cargo_5ftype_2eproto();

class mp_cargo_type;

// ===================================================================

class mp_cargo_type : public ::google::protobuf::Message {
 public:
  mp_cargo_type();
  virtual ~mp_cargo_type();
  
  mp_cargo_type(const mp_cargo_type& from);
  
  inline mp_cargo_type& operator=(const mp_cargo_type& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mp_cargo_type& default_instance();
  
  void Swap(mp_cargo_type* other);
  
  // implements Message ----------------------------------------------
  
  mp_cargo_type* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mp_cargo_type& from);
  void MergeFrom(const mp_cargo_type& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .KPS.mp_item_base base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::KPS::mp_item_base& base() const;
  inline ::KPS::mp_item_base* mutable_base();
  
  // required string cargo_type_nm_ = 2;
  inline bool has_cargo_type_nm_() const;
  inline void clear_cargo_type_nm_();
  static const int kCargoTypeNmFieldNumber = 2;
  inline const ::std::string& cargo_type_nm_() const;
  inline void set_cargo_type_nm_(const ::std::string& value);
  inline void set_cargo_type_nm_(const char* value);
  inline void set_cargo_type_nm_(const char* value, size_t size);
  inline ::std::string* mutable_cargo_type_nm_();
  
  // required uint32 cargo_shape = 3;
  inline bool has_cargo_shape() const;
  inline void clear_cargo_shape();
  static const int kCargoShapeFieldNumber = 3;
  inline ::google::protobuf::uint32 cargo_shape() const;
  inline void set_cargo_shape(::google::protobuf::uint32 value);
  
  // required string pallet_type_uuid = 4;
  inline bool has_pallet_type_uuid() const;
  inline void clear_pallet_type_uuid();
  static const int kPalletTypeUuidFieldNumber = 4;
  inline const ::std::string& pallet_type_uuid() const;
  inline void set_pallet_type_uuid(const ::std::string& value);
  inline void set_pallet_type_uuid(const char* value);
  inline void set_pallet_type_uuid(const char* value, size_t size);
  inline ::std::string* mutable_pallet_type_uuid();
  
  // required string operation_list = 5;
  inline bool has_operation_list() const;
  inline void clear_operation_list();
  static const int kOperationListFieldNumber = 5;
  inline const ::std::string& operation_list() const;
  inline void set_operation_list(const ::std::string& value);
  inline void set_operation_list(const char* value);
  inline void set_operation_list(const char* value, size_t size);
  inline ::std::string* mutable_operation_list();
  
  // optional uint32 ms_produce_time = 6;
  inline bool has_ms_produce_time() const;
  inline void clear_ms_produce_time();
  static const int kMsProduceTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 ms_produce_time() const;
  inline void set_ms_produce_time(::google::protobuf::uint32 value);
  
  // optional uint32 ms_consume_time = 7;
  inline bool has_ms_consume_time() const;
  inline void clear_ms_consume_time();
  static const int kMsConsumeTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 ms_consume_time() const;
  inline void set_ms_consume_time(::google::protobuf::uint32 value);
  
  // optional string weight = 8;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 8;
  inline const ::std::string& weight() const;
  inline void set_weight(const ::std::string& value);
  inline void set_weight(const char* value);
  inline void set_weight(const char* value, size_t size);
  inline ::std::string* mutable_weight();
  
  // optional string volume = 9;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 9;
  inline const ::std::string& volume() const;
  inline void set_volume(const ::std::string& value);
  inline void set_volume(const char* value);
  inline void set_volume(const char* value, size_t size);
  inline ::std::string* mutable_volume();
  
  // @@protoc_insertion_point(class_scope:KPS.mp_cargo_type)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::KPS::mp_item_base* base_;
  ::std::string* cargo_type_nm__;
  static const ::std::string _default_cargo_type_nm__;
  ::google::protobuf::uint32 cargo_shape_;
  ::std::string* pallet_type_uuid_;
  static const ::std::string _default_pallet_type_uuid_;
  ::std::string* operation_list_;
  static const ::std::string _default_operation_list_;
  ::google::protobuf::uint32 ms_produce_time_;
  ::google::protobuf::uint32 ms_consume_time_;
  ::std::string* weight_;
  static const ::std::string _default_weight_;
  ::std::string* volume_;
  static const ::std::string _default_volume_;
  friend void  protobuf_AddDesc_cargo_5ftype_2eproto();
  friend void protobuf_AssignDesc_cargo_5ftype_2eproto();
  friend void protobuf_ShutdownFile_cargo_5ftype_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static mp_cargo_type* default_instance_;
};
// ===================================================================


// ===================================================================

// mp_cargo_type

// required .KPS.mp_item_base base = 1;
inline bool mp_cargo_type::has_base() const {
  return _has_bit(0);
}
inline void mp_cargo_type::clear_base() {
  if (base_ != NULL) base_->::KPS::mp_item_base::Clear();
  _clear_bit(0);
}
inline const ::KPS::mp_item_base& mp_cargo_type::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::KPS::mp_item_base* mp_cargo_type::mutable_base() {
  _set_bit(0);
  if (base_ == NULL) base_ = new ::KPS::mp_item_base;
  return base_;
}

// required string cargo_type_nm_ = 2;
inline bool mp_cargo_type::has_cargo_type_nm_() const {
  return _has_bit(1);
}
inline void mp_cargo_type::clear_cargo_type_nm_() {
  if (cargo_type_nm__ != &_default_cargo_type_nm__) {
    cargo_type_nm__->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& mp_cargo_type::cargo_type_nm_() const {
  return *cargo_type_nm__;
}
inline void mp_cargo_type::set_cargo_type_nm_(const ::std::string& value) {
  _set_bit(1);
  if (cargo_type_nm__ == &_default_cargo_type_nm__) {
    cargo_type_nm__ = new ::std::string;
  }
  cargo_type_nm__->assign(value);
}
inline void mp_cargo_type::set_cargo_type_nm_(const char* value) {
  _set_bit(1);
  if (cargo_type_nm__ == &_default_cargo_type_nm__) {
    cargo_type_nm__ = new ::std::string;
  }
  cargo_type_nm__->assign(value);
}
inline void mp_cargo_type::set_cargo_type_nm_(const char* value, size_t size) {
  _set_bit(1);
  if (cargo_type_nm__ == &_default_cargo_type_nm__) {
    cargo_type_nm__ = new ::std::string;
  }
  cargo_type_nm__->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mp_cargo_type::mutable_cargo_type_nm_() {
  _set_bit(1);
  if (cargo_type_nm__ == &_default_cargo_type_nm__) {
    cargo_type_nm__ = new ::std::string;
  }
  return cargo_type_nm__;
}

// required uint32 cargo_shape = 3;
inline bool mp_cargo_type::has_cargo_shape() const {
  return _has_bit(2);
}
inline void mp_cargo_type::clear_cargo_shape() {
  cargo_shape_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 mp_cargo_type::cargo_shape() const {
  return cargo_shape_;
}
inline void mp_cargo_type::set_cargo_shape(::google::protobuf::uint32 value) {
  _set_bit(2);
  cargo_shape_ = value;
}

// required string pallet_type_uuid = 4;
inline bool mp_cargo_type::has_pallet_type_uuid() const {
  return _has_bit(3);
}
inline void mp_cargo_type::clear_pallet_type_uuid() {
  if (pallet_type_uuid_ != &_default_pallet_type_uuid_) {
    pallet_type_uuid_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& mp_cargo_type::pallet_type_uuid() const {
  return *pallet_type_uuid_;
}
inline void mp_cargo_type::set_pallet_type_uuid(const ::std::string& value) {
  _set_bit(3);
  if (pallet_type_uuid_ == &_default_pallet_type_uuid_) {
    pallet_type_uuid_ = new ::std::string;
  }
  pallet_type_uuid_->assign(value);
}
inline void mp_cargo_type::set_pallet_type_uuid(const char* value) {
  _set_bit(3);
  if (pallet_type_uuid_ == &_default_pallet_type_uuid_) {
    pallet_type_uuid_ = new ::std::string;
  }
  pallet_type_uuid_->assign(value);
}
inline void mp_cargo_type::set_pallet_type_uuid(const char* value, size_t size) {
  _set_bit(3);
  if (pallet_type_uuid_ == &_default_pallet_type_uuid_) {
    pallet_type_uuid_ = new ::std::string;
  }
  pallet_type_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mp_cargo_type::mutable_pallet_type_uuid() {
  _set_bit(3);
  if (pallet_type_uuid_ == &_default_pallet_type_uuid_) {
    pallet_type_uuid_ = new ::std::string;
  }
  return pallet_type_uuid_;
}

// required string operation_list = 5;
inline bool mp_cargo_type::has_operation_list() const {
  return _has_bit(4);
}
inline void mp_cargo_type::clear_operation_list() {
  if (operation_list_ != &_default_operation_list_) {
    operation_list_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& mp_cargo_type::operation_list() const {
  return *operation_list_;
}
inline void mp_cargo_type::set_operation_list(const ::std::string& value) {
  _set_bit(4);
  if (operation_list_ == &_default_operation_list_) {
    operation_list_ = new ::std::string;
  }
  operation_list_->assign(value);
}
inline void mp_cargo_type::set_operation_list(const char* value) {
  _set_bit(4);
  if (operation_list_ == &_default_operation_list_) {
    operation_list_ = new ::std::string;
  }
  operation_list_->assign(value);
}
inline void mp_cargo_type::set_operation_list(const char* value, size_t size) {
  _set_bit(4);
  if (operation_list_ == &_default_operation_list_) {
    operation_list_ = new ::std::string;
  }
  operation_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mp_cargo_type::mutable_operation_list() {
  _set_bit(4);
  if (operation_list_ == &_default_operation_list_) {
    operation_list_ = new ::std::string;
  }
  return operation_list_;
}

// optional uint32 ms_produce_time = 6;
inline bool mp_cargo_type::has_ms_produce_time() const {
  return _has_bit(5);
}
inline void mp_cargo_type::clear_ms_produce_time() {
  ms_produce_time_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 mp_cargo_type::ms_produce_time() const {
  return ms_produce_time_;
}
inline void mp_cargo_type::set_ms_produce_time(::google::protobuf::uint32 value) {
  _set_bit(5);
  ms_produce_time_ = value;
}

// optional uint32 ms_consume_time = 7;
inline bool mp_cargo_type::has_ms_consume_time() const {
  return _has_bit(6);
}
inline void mp_cargo_type::clear_ms_consume_time() {
  ms_consume_time_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 mp_cargo_type::ms_consume_time() const {
  return ms_consume_time_;
}
inline void mp_cargo_type::set_ms_consume_time(::google::protobuf::uint32 value) {
  _set_bit(6);
  ms_consume_time_ = value;
}

// optional string weight = 8;
inline bool mp_cargo_type::has_weight() const {
  return _has_bit(7);
}
inline void mp_cargo_type::clear_weight() {
  if (weight_ != &_default_weight_) {
    weight_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& mp_cargo_type::weight() const {
  return *weight_;
}
inline void mp_cargo_type::set_weight(const ::std::string& value) {
  _set_bit(7);
  if (weight_ == &_default_weight_) {
    weight_ = new ::std::string;
  }
  weight_->assign(value);
}
inline void mp_cargo_type::set_weight(const char* value) {
  _set_bit(7);
  if (weight_ == &_default_weight_) {
    weight_ = new ::std::string;
  }
  weight_->assign(value);
}
inline void mp_cargo_type::set_weight(const char* value, size_t size) {
  _set_bit(7);
  if (weight_ == &_default_weight_) {
    weight_ = new ::std::string;
  }
  weight_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mp_cargo_type::mutable_weight() {
  _set_bit(7);
  if (weight_ == &_default_weight_) {
    weight_ = new ::std::string;
  }
  return weight_;
}

// optional string volume = 9;
inline bool mp_cargo_type::has_volume() const {
  return _has_bit(8);
}
inline void mp_cargo_type::clear_volume() {
  if (volume_ != &_default_volume_) {
    volume_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& mp_cargo_type::volume() const {
  return *volume_;
}
inline void mp_cargo_type::set_volume(const ::std::string& value) {
  _set_bit(8);
  if (volume_ == &_default_volume_) {
    volume_ = new ::std::string;
  }
  volume_->assign(value);
}
inline void mp_cargo_type::set_volume(const char* value) {
  _set_bit(8);
  if (volume_ == &_default_volume_) {
    volume_ = new ::std::string;
  }
  volume_->assign(value);
}
inline void mp_cargo_type::set_volume(const char* value, size_t size) {
  _set_bit(8);
  if (volume_ == &_default_volume_) {
    volume_ = new ::std::string;
  }
  volume_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mp_cargo_type::mutable_volume() {
  _set_bit(8);
  if (volume_ == &_default_volume_) {
    volume_ = new ::std::string;
  }
  return volume_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cargo_5ftype_2eproto__INCLUDED

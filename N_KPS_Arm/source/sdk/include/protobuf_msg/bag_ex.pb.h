// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bag_ex.proto

#ifndef PROTOBUF_bag_5fex_2eproto__INCLUDED
#define PROTOBUF_bag_5fex_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "base.pb.h"
#include "laser_ex.pb.h"
// @@protoc_insertion_point(includes)

namespace KPS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bag_5fex_2eproto();
void protobuf_AssignDesc_bag_5fex_2eproto();
void protobuf_ShutdownFile_bag_5fex_2eproto();

class mp_bag_ex;

// ===================================================================

class mp_bag_ex : public ::google::protobuf::Message {
 public:
  mp_bag_ex();
  virtual ~mp_bag_ex();
  
  mp_bag_ex(const mp_bag_ex& from);
  
  inline mp_bag_ex& operator=(const mp_bag_ex& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mp_bag_ex& default_instance();
  
  void Swap(mp_bag_ex* other);
  
  // implements Message ----------------------------------------------
  
  mp_bag_ex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mp_bag_ex& from);
  void MergeFrom(const mp_bag_ex& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string proto_type = 1;
  inline bool has_proto_type() const;
  inline void clear_proto_type();
  static const int kProtoTypeFieldNumber = 1;
  inline const ::std::string& proto_type() const;
  inline void set_proto_type(const ::std::string& value);
  inline void set_proto_type(const char* value);
  inline void set_proto_type(const char* value, size_t size);
  inline ::std::string* mutable_proto_type();
  
  // required string robot_shape = 2;
  inline bool has_robot_shape() const;
  inline void clear_robot_shape();
  static const int kRobotShapeFieldNumber = 2;
  inline const ::std::string& robot_shape() const;
  inline void set_robot_shape(const ::std::string& value);
  inline void set_robot_shape(const char* value);
  inline void set_robot_shape(const char* value, size_t size);
  inline ::std::string* mutable_robot_shape();
  
  // required .KPS.mp_laser_ex_para laser_para = 3;
  inline bool has_laser_para() const;
  inline void clear_laser_para();
  static const int kLaserParaFieldNumber = 3;
  inline const ::KPS::mp_laser_ex_para& laser_para() const;
  inline ::KPS::mp_laser_ex_para* mutable_laser_para();
  
  // required .KPS.mp_laser_ex_data laser_ex_data = 4;
  inline bool has_laser_ex_data() const;
  inline void clear_laser_ex_data();
  static const int kLaserExDataFieldNumber = 4;
  inline const ::KPS::mp_laser_ex_data& laser_ex_data() const;
  inline ::KPS::mp_laser_ex_data* mutable_laser_ex_data();
  
  // required .KPS.mp_laser_ref_data laser_ref_data = 5;
  inline bool has_laser_ref_data() const;
  inline void clear_laser_ref_data();
  static const int kLaserRefDataFieldNumber = 5;
  inline const ::KPS::mp_laser_ref_data& laser_ref_data() const;
  inline ::KPS::mp_laser_ref_data* mutable_laser_ref_data();
  
  // required .KPS.mp_odom_data odom = 6;
  inline bool has_odom() const;
  inline void clear_odom();
  static const int kOdomFieldNumber = 6;
  inline const ::KPS::mp_odom_data& odom() const;
  inline ::KPS::mp_odom_data* mutable_odom();
  
  // required .KPS.mp_pos_data amcl_pos = 7;
  inline bool has_amcl_pos() const;
  inline void clear_amcl_pos();
  static const int kAmclPosFieldNumber = 7;
  inline const ::KPS::mp_pos_data& amcl_pos() const;
  inline ::KPS::mp_pos_data* mutable_amcl_pos();
  
  // @@protoc_insertion_point(class_scope:KPS.mp_bag_ex)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* proto_type_;
  static const ::std::string _default_proto_type_;
  ::std::string* robot_shape_;
  static const ::std::string _default_robot_shape_;
  ::KPS::mp_laser_ex_para* laser_para_;
  ::KPS::mp_laser_ex_data* laser_ex_data_;
  ::KPS::mp_laser_ref_data* laser_ref_data_;
  ::KPS::mp_odom_data* odom_;
  ::KPS::mp_pos_data* amcl_pos_;
  friend void  protobuf_AddDesc_bag_5fex_2eproto();
  friend void protobuf_AssignDesc_bag_5fex_2eproto();
  friend void protobuf_ShutdownFile_bag_5fex_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static mp_bag_ex* default_instance_;
};
// ===================================================================


// ===================================================================

// mp_bag_ex

// optional string proto_type = 1;
inline bool mp_bag_ex::has_proto_type() const {
  return _has_bit(0);
}
inline void mp_bag_ex::clear_proto_type() {
  if (proto_type_ != &_default_proto_type_) {
    proto_type_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& mp_bag_ex::proto_type() const {
  return *proto_type_;
}
inline void mp_bag_ex::set_proto_type(const ::std::string& value) {
  _set_bit(0);
  if (proto_type_ == &_default_proto_type_) {
    proto_type_ = new ::std::string;
  }
  proto_type_->assign(value);
}
inline void mp_bag_ex::set_proto_type(const char* value) {
  _set_bit(0);
  if (proto_type_ == &_default_proto_type_) {
    proto_type_ = new ::std::string;
  }
  proto_type_->assign(value);
}
inline void mp_bag_ex::set_proto_type(const char* value, size_t size) {
  _set_bit(0);
  if (proto_type_ == &_default_proto_type_) {
    proto_type_ = new ::std::string;
  }
  proto_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mp_bag_ex::mutable_proto_type() {
  _set_bit(0);
  if (proto_type_ == &_default_proto_type_) {
    proto_type_ = new ::std::string;
  }
  return proto_type_;
}

// required string robot_shape = 2;
inline bool mp_bag_ex::has_robot_shape() const {
  return _has_bit(1);
}
inline void mp_bag_ex::clear_robot_shape() {
  if (robot_shape_ != &_default_robot_shape_) {
    robot_shape_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& mp_bag_ex::robot_shape() const {
  return *robot_shape_;
}
inline void mp_bag_ex::set_robot_shape(const ::std::string& value) {
  _set_bit(1);
  if (robot_shape_ == &_default_robot_shape_) {
    robot_shape_ = new ::std::string;
  }
  robot_shape_->assign(value);
}
inline void mp_bag_ex::set_robot_shape(const char* value) {
  _set_bit(1);
  if (robot_shape_ == &_default_robot_shape_) {
    robot_shape_ = new ::std::string;
  }
  robot_shape_->assign(value);
}
inline void mp_bag_ex::set_robot_shape(const char* value, size_t size) {
  _set_bit(1);
  if (robot_shape_ == &_default_robot_shape_) {
    robot_shape_ = new ::std::string;
  }
  robot_shape_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mp_bag_ex::mutable_robot_shape() {
  _set_bit(1);
  if (robot_shape_ == &_default_robot_shape_) {
    robot_shape_ = new ::std::string;
  }
  return robot_shape_;
}

// required .KPS.mp_laser_ex_para laser_para = 3;
inline bool mp_bag_ex::has_laser_para() const {
  return _has_bit(2);
}
inline void mp_bag_ex::clear_laser_para() {
  if (laser_para_ != NULL) laser_para_->::KPS::mp_laser_ex_para::Clear();
  _clear_bit(2);
}
inline const ::KPS::mp_laser_ex_para& mp_bag_ex::laser_para() const {
  return laser_para_ != NULL ? *laser_para_ : *default_instance_->laser_para_;
}
inline ::KPS::mp_laser_ex_para* mp_bag_ex::mutable_laser_para() {
  _set_bit(2);
  if (laser_para_ == NULL) laser_para_ = new ::KPS::mp_laser_ex_para;
  return laser_para_;
}

// required .KPS.mp_laser_ex_data laser_ex_data = 4;
inline bool mp_bag_ex::has_laser_ex_data() const {
  return _has_bit(3);
}
inline void mp_bag_ex::clear_laser_ex_data() {
  if (laser_ex_data_ != NULL) laser_ex_data_->::KPS::mp_laser_ex_data::Clear();
  _clear_bit(3);
}
inline const ::KPS::mp_laser_ex_data& mp_bag_ex::laser_ex_data() const {
  return laser_ex_data_ != NULL ? *laser_ex_data_ : *default_instance_->laser_ex_data_;
}
inline ::KPS::mp_laser_ex_data* mp_bag_ex::mutable_laser_ex_data() {
  _set_bit(3);
  if (laser_ex_data_ == NULL) laser_ex_data_ = new ::KPS::mp_laser_ex_data;
  return laser_ex_data_;
}

// required .KPS.mp_laser_ref_data laser_ref_data = 5;
inline bool mp_bag_ex::has_laser_ref_data() const {
  return _has_bit(4);
}
inline void mp_bag_ex::clear_laser_ref_data() {
  if (laser_ref_data_ != NULL) laser_ref_data_->::KPS::mp_laser_ref_data::Clear();
  _clear_bit(4);
}
inline const ::KPS::mp_laser_ref_data& mp_bag_ex::laser_ref_data() const {
  return laser_ref_data_ != NULL ? *laser_ref_data_ : *default_instance_->laser_ref_data_;
}
inline ::KPS::mp_laser_ref_data* mp_bag_ex::mutable_laser_ref_data() {
  _set_bit(4);
  if (laser_ref_data_ == NULL) laser_ref_data_ = new ::KPS::mp_laser_ref_data;
  return laser_ref_data_;
}

// required .KPS.mp_odom_data odom = 6;
inline bool mp_bag_ex::has_odom() const {
  return _has_bit(5);
}
inline void mp_bag_ex::clear_odom() {
  if (odom_ != NULL) odom_->::KPS::mp_odom_data::Clear();
  _clear_bit(5);
}
inline const ::KPS::mp_odom_data& mp_bag_ex::odom() const {
  return odom_ != NULL ? *odom_ : *default_instance_->odom_;
}
inline ::KPS::mp_odom_data* mp_bag_ex::mutable_odom() {
  _set_bit(5);
  if (odom_ == NULL) odom_ = new ::KPS::mp_odom_data;
  return odom_;
}

// required .KPS.mp_pos_data amcl_pos = 7;
inline bool mp_bag_ex::has_amcl_pos() const {
  return _has_bit(6);
}
inline void mp_bag_ex::clear_amcl_pos() {
  if (amcl_pos_ != NULL) amcl_pos_->::KPS::mp_pos_data::Clear();
  _clear_bit(6);
}
inline const ::KPS::mp_pos_data& mp_bag_ex::amcl_pos() const {
  return amcl_pos_ != NULL ? *amcl_pos_ : *default_instance_->amcl_pos_;
}
inline ::KPS::mp_pos_data* mp_bag_ex::mutable_amcl_pos() {
  _set_bit(6);
  if (amcl_pos_ == NULL) amcl_pos_ = new ::KPS::mp_pos_data;
  return amcl_pos_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bag_5fex_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef PROTOBUF_user_2eproto__INCLUDED
#define PROTOBUF_user_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Test {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_user_2eproto();
void protobuf_AssignDesc_user_2eproto();
void protobuf_ShutdownFile_user_2eproto();

class userninfo;

// ===================================================================

class userninfo : public ::google::protobuf::Message {
 public:
  userninfo();
  virtual ~userninfo();
  
  userninfo(const userninfo& from);
  
  inline userninfo& operator=(const userninfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const userninfo& default_instance();
  
  void Swap(userninfo* other);
  
  // implements Message ----------------------------------------------
  
  userninfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const userninfo& from);
  void MergeFrom(const userninfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required string mail = 2;
  inline bool has_mail() const;
  inline void clear_mail();
  static const int kMailFieldNumber = 2;
  inline const ::std::string& mail() const;
  inline void set_mail(const ::std::string& value);
  inline void set_mail(const char* value);
  inline void set_mail(const char* value, size_t size);
  inline ::std::string* mutable_mail();
  
  // required string time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  
  // optional string status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  
  // @@protoc_insertion_point(class_scope:Test.userninfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* mail_;
  static const ::std::string _default_mail_;
  ::std::string* time_;
  static const ::std::string _default_time_;
  ::std::string* status_;
  static const ::std::string _default_status_;
  friend void  protobuf_AddDesc_user_2eproto();
  friend void protobuf_AssignDesc_user_2eproto();
  friend void protobuf_ShutdownFile_user_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static userninfo* default_instance_;
};
// ===================================================================


// ===================================================================

// userninfo

// required string name = 1;
inline bool userninfo::has_name() const {
  return _has_bit(0);
}
inline void userninfo::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& userninfo::name() const {
  return *name_;
}
inline void userninfo::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void userninfo::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void userninfo::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* userninfo::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required string mail = 2;
inline bool userninfo::has_mail() const {
  return _has_bit(1);
}
inline void userninfo::clear_mail() {
  if (mail_ != &_default_mail_) {
    mail_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& userninfo::mail() const {
  return *mail_;
}
inline void userninfo::set_mail(const ::std::string& value) {
  _set_bit(1);
  if (mail_ == &_default_mail_) {
    mail_ = new ::std::string;
  }
  mail_->assign(value);
}
inline void userninfo::set_mail(const char* value) {
  _set_bit(1);
  if (mail_ == &_default_mail_) {
    mail_ = new ::std::string;
  }
  mail_->assign(value);
}
inline void userninfo::set_mail(const char* value, size_t size) {
  _set_bit(1);
  if (mail_ == &_default_mail_) {
    mail_ = new ::std::string;
  }
  mail_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* userninfo::mutable_mail() {
  _set_bit(1);
  if (mail_ == &_default_mail_) {
    mail_ = new ::std::string;
  }
  return mail_;
}

// required string time = 3;
inline bool userninfo::has_time() const {
  return _has_bit(2);
}
inline void userninfo::clear_time() {
  if (time_ != &_default_time_) {
    time_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& userninfo::time() const {
  return *time_;
}
inline void userninfo::set_time(const ::std::string& value) {
  _set_bit(2);
  if (time_ == &_default_time_) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void userninfo::set_time(const char* value) {
  _set_bit(2);
  if (time_ == &_default_time_) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void userninfo::set_time(const char* value, size_t size) {
  _set_bit(2);
  if (time_ == &_default_time_) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* userninfo::mutable_time() {
  _set_bit(2);
  if (time_ == &_default_time_) {
    time_ = new ::std::string;
  }
  return time_;
}

// optional string status = 4;
inline bool userninfo::has_status() const {
  return _has_bit(3);
}
inline void userninfo::clear_status() {
  if (status_ != &_default_status_) {
    status_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& userninfo::status() const {
  return *status_;
}
inline void userninfo::set_status(const ::std::string& value) {
  _set_bit(3);
  if (status_ == &_default_status_) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void userninfo::set_status(const char* value) {
  _set_bit(3);
  if (status_ == &_default_status_) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void userninfo::set_status(const char* value, size_t size) {
  _set_bit(3);
  if (status_ == &_default_status_) {
    status_ = new ::std::string;
  }
  status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* userninfo::mutable_status() {
  _set_bit(3);
  if (status_ == &_default_status_) {
    status_ = new ::std::string;
  }
  return status_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Test

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_user_2eproto__INCLUDED

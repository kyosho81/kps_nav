// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: laser_ex.proto

#ifndef PROTOBUF_laser_5fex_2eproto__INCLUDED
#define PROTOBUF_laser_5fex_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace KPS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_laser_5fex_2eproto();
void protobuf_AssignDesc_laser_5fex_2eproto();
void protobuf_ShutdownFile_laser_5fex_2eproto();

class mp_laser_ex_para;
class mp_laser_ex_data;
class mp_laser_ref_data;

// ===================================================================

class mp_laser_ex_para : public ::google::protobuf::Message {
 public:
  mp_laser_ex_para();
  virtual ~mp_laser_ex_para();
  
  mp_laser_ex_para(const mp_laser_ex_para& from);
  
  inline mp_laser_ex_para& operator=(const mp_laser_ex_para& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mp_laser_ex_para& default_instance();
  
  void Swap(mp_laser_ex_para* other);
  
  // implements Message ----------------------------------------------
  
  mp_laser_ex_para* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mp_laser_ex_para& from);
  void MergeFrom(const mp_laser_ex_para& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string laser_ip = 1;
  inline bool has_laser_ip() const;
  inline void clear_laser_ip();
  static const int kLaserIpFieldNumber = 1;
  inline const ::std::string& laser_ip() const;
  inline void set_laser_ip(const ::std::string& value);
  inline void set_laser_ip(const char* value);
  inline void set_laser_ip(const char* value, size_t size);
  inline ::std::string* mutable_laser_ip();
  
  // required bool laser_reverse = 2;
  inline bool has_laser_reverse() const;
  inline void clear_laser_reverse();
  static const int kLaserReverseFieldNumber = 2;
  inline bool laser_reverse() const;
  inline void set_laser_reverse(bool value);
  
  // required float laser_start_angle = 3;
  inline bool has_laser_start_angle() const;
  inline void clear_laser_start_angle();
  static const int kLaserStartAngleFieldNumber = 3;
  inline float laser_start_angle() const;
  inline void set_laser_start_angle(float value);
  
  // required float laser_range_max = 4;
  inline bool has_laser_range_max() const;
  inline void clear_laser_range_max();
  static const int kLaserRangeMaxFieldNumber = 4;
  inline float laser_range_max() const;
  inline void set_laser_range_max(float value);
  
  // required float laser_range_min = 5;
  inline bool has_laser_range_min() const;
  inline void clear_laser_range_min();
  static const int kLaserRangeMinFieldNumber = 5;
  inline float laser_range_min() const;
  inline void set_laser_range_min(float value);
  
  // required float laser_dx = 6;
  inline bool has_laser_dx() const;
  inline void clear_laser_dx();
  static const int kLaserDxFieldNumber = 6;
  inline float laser_dx() const;
  inline void set_laser_dx(float value);
  
  // required float laser_dy = 7;
  inline bool has_laser_dy() const;
  inline void clear_laser_dy();
  static const int kLaserDyFieldNumber = 7;
  inline float laser_dy() const;
  inline void set_laser_dy(float value);
  
  // required float laser_resolution = 8;
  inline bool has_laser_resolution() const;
  inline void clear_laser_resolution();
  static const int kLaserResolutionFieldNumber = 8;
  inline float laser_resolution() const;
  inline void set_laser_resolution(float value);
  
  // required float laser_max_ray = 9;
  inline bool has_laser_max_ray() const;
  inline void clear_laser_max_ray();
  static const int kLaserMaxRayFieldNumber = 9;
  inline float laser_max_ray() const;
  inline void set_laser_max_ray(float value);
  
  // @@protoc_insertion_point(class_scope:KPS.mp_laser_ex_para)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* laser_ip_;
  static const ::std::string _default_laser_ip_;
  bool laser_reverse_;
  float laser_start_angle_;
  float laser_range_max_;
  float laser_range_min_;
  float laser_dx_;
  float laser_dy_;
  float laser_resolution_;
  float laser_max_ray_;
  friend void  protobuf_AddDesc_laser_5fex_2eproto();
  friend void protobuf_AssignDesc_laser_5fex_2eproto();
  friend void protobuf_ShutdownFile_laser_5fex_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static mp_laser_ex_para* default_instance_;
};
// -------------------------------------------------------------------

class mp_laser_ex_data : public ::google::protobuf::Message {
 public:
  mp_laser_ex_data();
  virtual ~mp_laser_ex_data();
  
  mp_laser_ex_data(const mp_laser_ex_data& from);
  
  inline mp_laser_ex_data& operator=(const mp_laser_ex_data& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mp_laser_ex_data& default_instance();
  
  void Swap(mp_laser_ex_data* other);
  
  // implements Message ----------------------------------------------
  
  mp_laser_ex_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mp_laser_ex_data& from);
  void MergeFrom(const mp_laser_ex_data& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 stamp = 1;
  inline bool has_stamp() const;
  inline void clear_stamp();
  static const int kStampFieldNumber = 1;
  inline ::google::protobuf::uint64 stamp() const;
  inline void set_stamp(::google::protobuf::uint64 value);
  
  // required double time_stamp = 2;
  inline bool has_time_stamp() const;
  inline void clear_time_stamp();
  static const int kTimeStampFieldNumber = 2;
  inline double time_stamp() const;
  inline void set_time_stamp(double value);
  
  // required float bean_dt = 3;
  inline bool has_bean_dt() const;
  inline void clear_bean_dt();
  static const int kBeanDtFieldNumber = 3;
  inline float bean_dt() const;
  inline void set_bean_dt(float value);
  
  // required int32 used_ray = 4;
  inline bool has_used_ray() const;
  inline void clear_used_ray();
  static const int kUsedRayFieldNumber = 4;
  inline ::google::protobuf::int32 used_ray() const;
  inline void set_used_ray(::google::protobuf::int32 value);
  
  // repeated float data = 5;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline float data(int index) const;
  inline void set_data(int index, float value);
  inline void add_data(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      data() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_data();
  
  // repeated int32 intensities = 6;
  inline int intensities_size() const;
  inline void clear_intensities();
  static const int kIntensitiesFieldNumber = 6;
  inline ::google::protobuf::int32 intensities(int index) const;
  inline void set_intensities(int index, ::google::protobuf::int32 value);
  inline void add_intensities(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      intensities() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_intensities();
  
  // repeated int32 seg = 7;
  inline int seg_size() const;
  inline void clear_seg();
  static const int kSegFieldNumber = 7;
  inline ::google::protobuf::int32 seg(int index) const;
  inline void set_seg(int index, ::google::protobuf::int32 value);
  inline void add_seg(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      seg() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_seg();
  
  // @@protoc_insertion_point(class_scope:KPS.mp_laser_ex_data)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 stamp_;
  double time_stamp_;
  float bean_dt_;
  ::google::protobuf::int32 used_ray_;
  ::google::protobuf::RepeatedField< float > data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > intensities_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > seg_;
  friend void  protobuf_AddDesc_laser_5fex_2eproto();
  friend void protobuf_AssignDesc_laser_5fex_2eproto();
  friend void protobuf_ShutdownFile_laser_5fex_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static mp_laser_ex_data* default_instance_;
};
// -------------------------------------------------------------------

class mp_laser_ref_data : public ::google::protobuf::Message {
 public:
  mp_laser_ref_data();
  virtual ~mp_laser_ref_data();
  
  mp_laser_ref_data(const mp_laser_ref_data& from);
  
  inline mp_laser_ref_data& operator=(const mp_laser_ref_data& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mp_laser_ref_data& default_instance();
  
  void Swap(mp_laser_ref_data* other);
  
  // implements Message ----------------------------------------------
  
  mp_laser_ref_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mp_laser_ref_data& from);
  void MergeFrom(const mp_laser_ref_data& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 used_ray = 1;
  inline bool has_used_ray() const;
  inline void clear_used_ray();
  static const int kUsedRayFieldNumber = 1;
  inline ::google::protobuf::int32 used_ray() const;
  inline void set_used_ray(::google::protobuf::int32 value);
  
  // repeated int32 id = 2;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::int32 value);
  inline void add_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id();
  
  // repeated float x = 3;
  inline int x_size() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline float x(int index) const;
  inline void set_x(int index, float value);
  inline void add_x(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      x() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_x();
  
  // repeated float y = 4;
  inline int y_size() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline float y(int index) const;
  inline void set_y(int index, float value);
  inline void add_y(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      y() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_y();
  
  // @@protoc_insertion_point(class_scope:KPS.mp_laser_ref_data)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 used_ray_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_;
  ::google::protobuf::RepeatedField< float > x_;
  ::google::protobuf::RepeatedField< float > y_;
  friend void  protobuf_AddDesc_laser_5fex_2eproto();
  friend void protobuf_AssignDesc_laser_5fex_2eproto();
  friend void protobuf_ShutdownFile_laser_5fex_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static mp_laser_ref_data* default_instance_;
};
// ===================================================================


// ===================================================================

// mp_laser_ex_para

// required string laser_ip = 1;
inline bool mp_laser_ex_para::has_laser_ip() const {
  return _has_bit(0);
}
inline void mp_laser_ex_para::clear_laser_ip() {
  if (laser_ip_ != &_default_laser_ip_) {
    laser_ip_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& mp_laser_ex_para::laser_ip() const {
  return *laser_ip_;
}
inline void mp_laser_ex_para::set_laser_ip(const ::std::string& value) {
  _set_bit(0);
  if (laser_ip_ == &_default_laser_ip_) {
    laser_ip_ = new ::std::string;
  }
  laser_ip_->assign(value);
}
inline void mp_laser_ex_para::set_laser_ip(const char* value) {
  _set_bit(0);
  if (laser_ip_ == &_default_laser_ip_) {
    laser_ip_ = new ::std::string;
  }
  laser_ip_->assign(value);
}
inline void mp_laser_ex_para::set_laser_ip(const char* value, size_t size) {
  _set_bit(0);
  if (laser_ip_ == &_default_laser_ip_) {
    laser_ip_ = new ::std::string;
  }
  laser_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mp_laser_ex_para::mutable_laser_ip() {
  _set_bit(0);
  if (laser_ip_ == &_default_laser_ip_) {
    laser_ip_ = new ::std::string;
  }
  return laser_ip_;
}

// required bool laser_reverse = 2;
inline bool mp_laser_ex_para::has_laser_reverse() const {
  return _has_bit(1);
}
inline void mp_laser_ex_para::clear_laser_reverse() {
  laser_reverse_ = false;
  _clear_bit(1);
}
inline bool mp_laser_ex_para::laser_reverse() const {
  return laser_reverse_;
}
inline void mp_laser_ex_para::set_laser_reverse(bool value) {
  _set_bit(1);
  laser_reverse_ = value;
}

// required float laser_start_angle = 3;
inline bool mp_laser_ex_para::has_laser_start_angle() const {
  return _has_bit(2);
}
inline void mp_laser_ex_para::clear_laser_start_angle() {
  laser_start_angle_ = 0;
  _clear_bit(2);
}
inline float mp_laser_ex_para::laser_start_angle() const {
  return laser_start_angle_;
}
inline void mp_laser_ex_para::set_laser_start_angle(float value) {
  _set_bit(2);
  laser_start_angle_ = value;
}

// required float laser_range_max = 4;
inline bool mp_laser_ex_para::has_laser_range_max() const {
  return _has_bit(3);
}
inline void mp_laser_ex_para::clear_laser_range_max() {
  laser_range_max_ = 0;
  _clear_bit(3);
}
inline float mp_laser_ex_para::laser_range_max() const {
  return laser_range_max_;
}
inline void mp_laser_ex_para::set_laser_range_max(float value) {
  _set_bit(3);
  laser_range_max_ = value;
}

// required float laser_range_min = 5;
inline bool mp_laser_ex_para::has_laser_range_min() const {
  return _has_bit(4);
}
inline void mp_laser_ex_para::clear_laser_range_min() {
  laser_range_min_ = 0;
  _clear_bit(4);
}
inline float mp_laser_ex_para::laser_range_min() const {
  return laser_range_min_;
}
inline void mp_laser_ex_para::set_laser_range_min(float value) {
  _set_bit(4);
  laser_range_min_ = value;
}

// required float laser_dx = 6;
inline bool mp_laser_ex_para::has_laser_dx() const {
  return _has_bit(5);
}
inline void mp_laser_ex_para::clear_laser_dx() {
  laser_dx_ = 0;
  _clear_bit(5);
}
inline float mp_laser_ex_para::laser_dx() const {
  return laser_dx_;
}
inline void mp_laser_ex_para::set_laser_dx(float value) {
  _set_bit(5);
  laser_dx_ = value;
}

// required float laser_dy = 7;
inline bool mp_laser_ex_para::has_laser_dy() const {
  return _has_bit(6);
}
inline void mp_laser_ex_para::clear_laser_dy() {
  laser_dy_ = 0;
  _clear_bit(6);
}
inline float mp_laser_ex_para::laser_dy() const {
  return laser_dy_;
}
inline void mp_laser_ex_para::set_laser_dy(float value) {
  _set_bit(6);
  laser_dy_ = value;
}

// required float laser_resolution = 8;
inline bool mp_laser_ex_para::has_laser_resolution() const {
  return _has_bit(7);
}
inline void mp_laser_ex_para::clear_laser_resolution() {
  laser_resolution_ = 0;
  _clear_bit(7);
}
inline float mp_laser_ex_para::laser_resolution() const {
  return laser_resolution_;
}
inline void mp_laser_ex_para::set_laser_resolution(float value) {
  _set_bit(7);
  laser_resolution_ = value;
}

// required float laser_max_ray = 9;
inline bool mp_laser_ex_para::has_laser_max_ray() const {
  return _has_bit(8);
}
inline void mp_laser_ex_para::clear_laser_max_ray() {
  laser_max_ray_ = 0;
  _clear_bit(8);
}
inline float mp_laser_ex_para::laser_max_ray() const {
  return laser_max_ray_;
}
inline void mp_laser_ex_para::set_laser_max_ray(float value) {
  _set_bit(8);
  laser_max_ray_ = value;
}

// -------------------------------------------------------------------

// mp_laser_ex_data

// required uint64 stamp = 1;
inline bool mp_laser_ex_data::has_stamp() const {
  return _has_bit(0);
}
inline void mp_laser_ex_data::clear_stamp() {
  stamp_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 mp_laser_ex_data::stamp() const {
  return stamp_;
}
inline void mp_laser_ex_data::set_stamp(::google::protobuf::uint64 value) {
  _set_bit(0);
  stamp_ = value;
}

// required double time_stamp = 2;
inline bool mp_laser_ex_data::has_time_stamp() const {
  return _has_bit(1);
}
inline void mp_laser_ex_data::clear_time_stamp() {
  time_stamp_ = 0;
  _clear_bit(1);
}
inline double mp_laser_ex_data::time_stamp() const {
  return time_stamp_;
}
inline void mp_laser_ex_data::set_time_stamp(double value) {
  _set_bit(1);
  time_stamp_ = value;
}

// required float bean_dt = 3;
inline bool mp_laser_ex_data::has_bean_dt() const {
  return _has_bit(2);
}
inline void mp_laser_ex_data::clear_bean_dt() {
  bean_dt_ = 0;
  _clear_bit(2);
}
inline float mp_laser_ex_data::bean_dt() const {
  return bean_dt_;
}
inline void mp_laser_ex_data::set_bean_dt(float value) {
  _set_bit(2);
  bean_dt_ = value;
}

// required int32 used_ray = 4;
inline bool mp_laser_ex_data::has_used_ray() const {
  return _has_bit(3);
}
inline void mp_laser_ex_data::clear_used_ray() {
  used_ray_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 mp_laser_ex_data::used_ray() const {
  return used_ray_;
}
inline void mp_laser_ex_data::set_used_ray(::google::protobuf::int32 value) {
  _set_bit(3);
  used_ray_ = value;
}

// repeated float data = 5;
inline int mp_laser_ex_data::data_size() const {
  return data_.size();
}
inline void mp_laser_ex_data::clear_data() {
  data_.Clear();
}
inline float mp_laser_ex_data::data(int index) const {
  return data_.Get(index);
}
inline void mp_laser_ex_data::set_data(int index, float value) {
  data_.Set(index, value);
}
inline void mp_laser_ex_data::add_data(float value) {
  data_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
mp_laser_ex_data::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
mp_laser_ex_data::mutable_data() {
  return &data_;
}

// repeated int32 intensities = 6;
inline int mp_laser_ex_data::intensities_size() const {
  return intensities_.size();
}
inline void mp_laser_ex_data::clear_intensities() {
  intensities_.Clear();
}
inline ::google::protobuf::int32 mp_laser_ex_data::intensities(int index) const {
  return intensities_.Get(index);
}
inline void mp_laser_ex_data::set_intensities(int index, ::google::protobuf::int32 value) {
  intensities_.Set(index, value);
}
inline void mp_laser_ex_data::add_intensities(::google::protobuf::int32 value) {
  intensities_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
mp_laser_ex_data::intensities() const {
  return intensities_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
mp_laser_ex_data::mutable_intensities() {
  return &intensities_;
}

// repeated int32 seg = 7;
inline int mp_laser_ex_data::seg_size() const {
  return seg_.size();
}
inline void mp_laser_ex_data::clear_seg() {
  seg_.Clear();
}
inline ::google::protobuf::int32 mp_laser_ex_data::seg(int index) const {
  return seg_.Get(index);
}
inline void mp_laser_ex_data::set_seg(int index, ::google::protobuf::int32 value) {
  seg_.Set(index, value);
}
inline void mp_laser_ex_data::add_seg(::google::protobuf::int32 value) {
  seg_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
mp_laser_ex_data::seg() const {
  return seg_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
mp_laser_ex_data::mutable_seg() {
  return &seg_;
}

// -------------------------------------------------------------------

// mp_laser_ref_data

// required int32 used_ray = 1;
inline bool mp_laser_ref_data::has_used_ray() const {
  return _has_bit(0);
}
inline void mp_laser_ref_data::clear_used_ray() {
  used_ray_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 mp_laser_ref_data::used_ray() const {
  return used_ray_;
}
inline void mp_laser_ref_data::set_used_ray(::google::protobuf::int32 value) {
  _set_bit(0);
  used_ray_ = value;
}

// repeated int32 id = 2;
inline int mp_laser_ref_data::id_size() const {
  return id_.size();
}
inline void mp_laser_ref_data::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int32 mp_laser_ref_data::id(int index) const {
  return id_.Get(index);
}
inline void mp_laser_ref_data::set_id(int index, ::google::protobuf::int32 value) {
  id_.Set(index, value);
}
inline void mp_laser_ref_data::add_id(::google::protobuf::int32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
mp_laser_ref_data::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
mp_laser_ref_data::mutable_id() {
  return &id_;
}

// repeated float x = 3;
inline int mp_laser_ref_data::x_size() const {
  return x_.size();
}
inline void mp_laser_ref_data::clear_x() {
  x_.Clear();
}
inline float mp_laser_ref_data::x(int index) const {
  return x_.Get(index);
}
inline void mp_laser_ref_data::set_x(int index, float value) {
  x_.Set(index, value);
}
inline void mp_laser_ref_data::add_x(float value) {
  x_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
mp_laser_ref_data::x() const {
  return x_;
}
inline ::google::protobuf::RepeatedField< float >*
mp_laser_ref_data::mutable_x() {
  return &x_;
}

// repeated float y = 4;
inline int mp_laser_ref_data::y_size() const {
  return y_.size();
}
inline void mp_laser_ref_data::clear_y() {
  y_.Clear();
}
inline float mp_laser_ref_data::y(int index) const {
  return y_.Get(index);
}
inline void mp_laser_ref_data::set_y(int index, float value) {
  y_.Set(index, value);
}
inline void mp_laser_ref_data::add_y(float value) {
  y_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
mp_laser_ref_data::y() const {
  return y_;
}
inline ::google::protobuf::RepeatedField< float >*
mp_laser_ref_data::mutable_y() {
  return &y_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_laser_5fex_2eproto__INCLUDED

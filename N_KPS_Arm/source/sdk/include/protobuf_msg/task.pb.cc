// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "task.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KPS {

namespace {

const ::google::protobuf::Descriptor* mp_task_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_task_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* mp_task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_task_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_task_2eproto() {
  protobuf_AddDesc_task_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "task.proto");
  GOOGLE_CHECK(file != NULL);
  mp_task_data_descriptor_ = file->message_type(0);
  static const int mp_task_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_task_data, task_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_task_data, project_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_task_data, path_name_),
  };
  mp_task_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_task_data_descriptor_,
      mp_task_data::default_instance_,
      mp_task_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_task_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_task_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_task_data));
  mp_task_descriptor_ = file->message_type(1);
  static const int mp_task_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_task, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_task, task_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_task, ontime_do_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_task, data_),
  };
  mp_task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_task_descriptor_,
      mp_task::default_instance_,
      mp_task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_task));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_task_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_task_data_descriptor_, &mp_task_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_task_descriptor_, &mp_task::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_task_2eproto() {
  delete mp_task_data::default_instance_;
  delete mp_task_data_reflection_;
  delete mp_task::default_instance_;
  delete mp_task_reflection_;
}

void protobuf_AddDesc_task_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntask.proto\022\003KPS\"K\n\014mp_task_data\022\022\n\ntas"
    "k_index\030\001 \002(\r\022\024\n\014project_name\030\002 \002(\t\022\021\n\tp"
    "ath_name\030\003 \002(\t\"a\n\007mp_task\022\017\n\007task_id\030\001 \002"
    "(\r\022\021\n\ttask_name\030\002 \002(\t\022\021\n\tontime_do\030\003 \002(\t"
    "\022\037\n\004data\030\004 \003(\0132\021.KPS.mp_task_data", 193);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "task.proto", &protobuf_RegisterTypes);
  mp_task_data::default_instance_ = new mp_task_data();
  mp_task::default_instance_ = new mp_task();
  mp_task_data::default_instance_->InitAsDefaultInstance();
  mp_task::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_task_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_task_2eproto {
  StaticDescriptorInitializer_task_2eproto() {
    protobuf_AddDesc_task_2eproto();
  }
} static_descriptor_initializer_task_2eproto_;


// ===================================================================

const ::std::string mp_task_data::_default_project_name_;
const ::std::string mp_task_data::_default_path_name_;
#ifndef _MSC_VER
const int mp_task_data::kTaskIndexFieldNumber;
const int mp_task_data::kProjectNameFieldNumber;
const int mp_task_data::kPathNameFieldNumber;
#endif  // !_MSC_VER

mp_task_data::mp_task_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_task_data::InitAsDefaultInstance() {
}

mp_task_data::mp_task_data(const mp_task_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_task_data::SharedCtor() {
  _cached_size_ = 0;
  task_index_ = 0u;
  project_name_ = const_cast< ::std::string*>(&_default_project_name_);
  path_name_ = const_cast< ::std::string*>(&_default_path_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_task_data::~mp_task_data() {
  SharedDtor();
}

void mp_task_data::SharedDtor() {
  if (project_name_ != &_default_project_name_) {
    delete project_name_;
  }
  if (path_name_ != &_default_path_name_) {
    delete path_name_;
  }
  if (this != default_instance_) {
  }
}

void mp_task_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_task_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_task_data_descriptor_;
}

const mp_task_data& mp_task_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();  return *default_instance_;
}

mp_task_data* mp_task_data::default_instance_ = NULL;

mp_task_data* mp_task_data::New() const {
  return new mp_task_data;
}

void mp_task_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_index_ = 0u;
    if (_has_bit(1)) {
      if (project_name_ != &_default_project_name_) {
        project_name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (path_name_ != &_default_path_name_) {
        path_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_task_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_index_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_project_name;
        break;
      }
      
      // required string project_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_project_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->project_name().data(), this->project_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path_name;
        break;
      }
      
      // required string path_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path_name().data(), this->path_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_task_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_index = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_index(), output);
  }
  
  // required string project_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->project_name().data(), this->project_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->project_name(), output);
  }
  
  // required string path_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path_name().data(), this->path_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->path_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_task_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_index = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_index(), target);
  }
  
  // required string project_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->project_name().data(), this->project_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->project_name(), target);
  }
  
  // required string path_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path_name().data(), this->path_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_task_data::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_index = 1;
    if (has_task_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_index());
    }
    
    // required string project_name = 2;
    if (has_project_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->project_name());
    }
    
    // required string path_name = 3;
    if (has_path_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_task_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_task_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_task_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_task_data::MergeFrom(const mp_task_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_index(from.task_index());
    }
    if (from._has_bit(1)) {
      set_project_name(from.project_name());
    }
    if (from._has_bit(2)) {
      set_path_name(from.path_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_task_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_task_data::CopyFrom(const mp_task_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_task_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void mp_task_data::Swap(mp_task_data* other) {
  if (other != this) {
    std::swap(task_index_, other->task_index_);
    std::swap(project_name_, other->project_name_);
    std::swap(path_name_, other->path_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_task_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_task_data_descriptor_;
  metadata.reflection = mp_task_data_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string mp_task::_default_task_name_;
const ::std::string mp_task::_default_ontime_do_;
#ifndef _MSC_VER
const int mp_task::kTaskIdFieldNumber;
const int mp_task::kTaskNameFieldNumber;
const int mp_task::kOntimeDoFieldNumber;
const int mp_task::kDataFieldNumber;
#endif  // !_MSC_VER

mp_task::mp_task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_task::InitAsDefaultInstance() {
}

mp_task::mp_task(const mp_task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_task::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  task_name_ = const_cast< ::std::string*>(&_default_task_name_);
  ontime_do_ = const_cast< ::std::string*>(&_default_ontime_do_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_task::~mp_task() {
  SharedDtor();
}

void mp_task::SharedDtor() {
  if (task_name_ != &_default_task_name_) {
    delete task_name_;
  }
  if (ontime_do_ != &_default_ontime_do_) {
    delete ontime_do_;
  }
  if (this != default_instance_) {
  }
}

void mp_task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_task_descriptor_;
}

const mp_task& mp_task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();  return *default_instance_;
}

mp_task* mp_task::default_instance_ = NULL;

mp_task* mp_task::New() const {
  return new mp_task;
}

void mp_task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    if (_has_bit(1)) {
      if (task_name_ != &_default_task_name_) {
        task_name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (ontime_do_ != &_default_ontime_do_) {
        ontime_do_->clear();
      }
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_name;
        break;
      }
      
      // required string task_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_name().data(), this->task_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ontime_do;
        break;
      }
      
      // required string ontime_do = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ontime_do:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ontime_do()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ontime_do().data(), this->ontime_do().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }
      
      // repeated .KPS.mp_task_data data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 task_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }
  
  // required string task_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_name().data(), this->task_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->task_name(), output);
  }
  
  // required string ontime_do = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ontime_do().data(), this->ontime_do().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ontime_do(), output);
  }
  
  // repeated .KPS.mp_task_data data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 task_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }
  
  // required string task_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_name().data(), this->task_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->task_name(), target);
  }
  
  // required string ontime_do = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ontime_do().data(), this->ontime_do().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ontime_do(), target);
  }
  
  // repeated .KPS.mp_task_data data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_task::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }
    
    // required string task_name = 2;
    if (has_task_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_name());
    }
    
    // required string ontime_do = 3;
    if (has_ontime_do()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ontime_do());
    }
    
  }
  // repeated .KPS.mp_task_data data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_task::MergeFrom(const mp_task& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_id(from.task_id());
    }
    if (from._has_bit(1)) {
      set_task_name(from.task_name());
    }
    if (from._has_bit(2)) {
      set_ontime_do(from.ontime_do());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_task::CopyFrom(const mp_task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_task::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void mp_task::Swap(mp_task* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(task_name_, other->task_name_);
    std::swap(ontime_do_, other->ontime_do_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_task_descriptor_;
  metadata.reflection = mp_task_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

// @@protoc_insertion_point(global_scope)

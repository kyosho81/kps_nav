// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reflector.proto

#ifndef PROTOBUF_reflector_2eproto__INCLUDED
#define PROTOBUF_reflector_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace KPS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_reflector_2eproto();
void protobuf_AssignDesc_reflector_2eproto();
void protobuf_ShutdownFile_reflector_2eproto();

class mp_refector_ref;
class mp_refector;
class mp_refs;

// ===================================================================

class mp_refector_ref : public ::google::protobuf::Message {
 public:
  mp_refector_ref();
  virtual ~mp_refector_ref();
  
  mp_refector_ref(const mp_refector_ref& from);
  
  inline mp_refector_ref& operator=(const mp_refector_ref& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mp_refector_ref& default_instance();
  
  void Swap(mp_refector_ref* other);
  
  // implements Message ----------------------------------------------
  
  mp_refector_ref* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mp_refector_ref& from);
  void MergeFrom(const mp_refector_ref& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 ref_id_ = 1;
  inline bool has_ref_id_() const;
  inline void clear_ref_id_();
  static const int kRefIdFieldNumber = 1;
  inline ::google::protobuf::uint32 ref_id_() const;
  inline void set_ref_id_(::google::protobuf::uint32 value);
  
  // required float ref_dis_ = 2;
  inline bool has_ref_dis_() const;
  inline void clear_ref_dis_();
  static const int kRefDisFieldNumber = 2;
  inline float ref_dis_() const;
  inline void set_ref_dis_(float value);
  
  // @@protoc_insertion_point(class_scope:KPS.mp_refector_ref)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 ref_id__;
  float ref_dis__;
  friend void  protobuf_AddDesc_reflector_2eproto();
  friend void protobuf_AssignDesc_reflector_2eproto();
  friend void protobuf_ShutdownFile_reflector_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static mp_refector_ref* default_instance_;
};
// -------------------------------------------------------------------

class mp_refector : public ::google::protobuf::Message {
 public:
  mp_refector();
  virtual ~mp_refector();
  
  mp_refector(const mp_refector& from);
  
  inline mp_refector& operator=(const mp_refector& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mp_refector& default_instance();
  
  void Swap(mp_refector* other);
  
  // implements Message ----------------------------------------------
  
  mp_refector* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mp_refector& from);
  void MergeFrom(const mp_refector& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required float x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline float y() const;
  inline void set_y(float value);
  
  // repeated .KPS.mp_refector_ref ref_ = 4;
  inline int ref__size() const;
  inline void clear_ref_();
  static const int kRefFieldNumber = 4;
  inline const ::KPS::mp_refector_ref& ref_(int index) const;
  inline ::KPS::mp_refector_ref* mutable_ref_(int index);
  inline ::KPS::mp_refector_ref* add_ref_();
  inline const ::google::protobuf::RepeatedPtrField< ::KPS::mp_refector_ref >&
      ref_() const;
  inline ::google::protobuf::RepeatedPtrField< ::KPS::mp_refector_ref >*
      mutable_ref_();
  
  // optional uint32 lab_id = 5;
  inline bool has_lab_id() const;
  inline void clear_lab_id();
  static const int kLabIdFieldNumber = 5;
  inline ::google::protobuf::uint32 lab_id() const;
  inline void set_lab_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:KPS.mp_refector)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 id_;
  float x_;
  float y_;
  ::google::protobuf::RepeatedPtrField< ::KPS::mp_refector_ref > ref__;
  ::google::protobuf::uint32 lab_id_;
  friend void  protobuf_AddDesc_reflector_2eproto();
  friend void protobuf_AssignDesc_reflector_2eproto();
  friend void protobuf_ShutdownFile_reflector_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static mp_refector* default_instance_;
};
// -------------------------------------------------------------------

class mp_refs : public ::google::protobuf::Message {
 public:
  mp_refs();
  virtual ~mp_refs();
  
  mp_refs(const mp_refs& from);
  
  inline mp_refs& operator=(const mp_refs& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mp_refs& default_instance();
  
  void Swap(mp_refs* other);
  
  // implements Message ----------------------------------------------
  
  mp_refs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mp_refs& from);
  void MergeFrom(const mp_refs& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 id = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();
  
  // repeated float x = 2;
  inline int x_size() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline float x(int index) const;
  inline void set_x(int index, float value);
  inline void add_x(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      x() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_x();
  
  // repeated float y = 3;
  inline int y_size() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline float y(int index) const;
  inline void set_y(int index, float value);
  inline void add_y(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      y() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_y();
  
  // @@protoc_insertion_point(class_scope:KPS.mp_refs)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;
  ::google::protobuf::RepeatedField< float > x_;
  ::google::protobuf::RepeatedField< float > y_;
  friend void  protobuf_AddDesc_reflector_2eproto();
  friend void protobuf_AssignDesc_reflector_2eproto();
  friend void protobuf_ShutdownFile_reflector_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static mp_refs* default_instance_;
};
// ===================================================================


// ===================================================================

// mp_refector_ref

// required uint32 ref_id_ = 1;
inline bool mp_refector_ref::has_ref_id_() const {
  return _has_bit(0);
}
inline void mp_refector_ref::clear_ref_id_() {
  ref_id__ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 mp_refector_ref::ref_id_() const {
  return ref_id__;
}
inline void mp_refector_ref::set_ref_id_(::google::protobuf::uint32 value) {
  _set_bit(0);
  ref_id__ = value;
}

// required float ref_dis_ = 2;
inline bool mp_refector_ref::has_ref_dis_() const {
  return _has_bit(1);
}
inline void mp_refector_ref::clear_ref_dis_() {
  ref_dis__ = 0;
  _clear_bit(1);
}
inline float mp_refector_ref::ref_dis_() const {
  return ref_dis__;
}
inline void mp_refector_ref::set_ref_dis_(float value) {
  _set_bit(1);
  ref_dis__ = value;
}

// -------------------------------------------------------------------

// mp_refector

// required uint32 id = 1;
inline bool mp_refector::has_id() const {
  return _has_bit(0);
}
inline void mp_refector::clear_id() {
  id_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 mp_refector::id() const {
  return id_;
}
inline void mp_refector::set_id(::google::protobuf::uint32 value) {
  _set_bit(0);
  id_ = value;
}

// required float x = 2;
inline bool mp_refector::has_x() const {
  return _has_bit(1);
}
inline void mp_refector::clear_x() {
  x_ = 0;
  _clear_bit(1);
}
inline float mp_refector::x() const {
  return x_;
}
inline void mp_refector::set_x(float value) {
  _set_bit(1);
  x_ = value;
}

// required float y = 3;
inline bool mp_refector::has_y() const {
  return _has_bit(2);
}
inline void mp_refector::clear_y() {
  y_ = 0;
  _clear_bit(2);
}
inline float mp_refector::y() const {
  return y_;
}
inline void mp_refector::set_y(float value) {
  _set_bit(2);
  y_ = value;
}

// repeated .KPS.mp_refector_ref ref_ = 4;
inline int mp_refector::ref__size() const {
  return ref__.size();
}
inline void mp_refector::clear_ref_() {
  ref__.Clear();
}
inline const ::KPS::mp_refector_ref& mp_refector::ref_(int index) const {
  return ref__.Get(index);
}
inline ::KPS::mp_refector_ref* mp_refector::mutable_ref_(int index) {
  return ref__.Mutable(index);
}
inline ::KPS::mp_refector_ref* mp_refector::add_ref_() {
  return ref__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KPS::mp_refector_ref >&
mp_refector::ref_() const {
  return ref__;
}
inline ::google::protobuf::RepeatedPtrField< ::KPS::mp_refector_ref >*
mp_refector::mutable_ref_() {
  return &ref__;
}

// optional uint32 lab_id = 5;
inline bool mp_refector::has_lab_id() const {
  return _has_bit(4);
}
inline void mp_refector::clear_lab_id() {
  lab_id_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 mp_refector::lab_id() const {
  return lab_id_;
}
inline void mp_refector::set_lab_id(::google::protobuf::uint32 value) {
  _set_bit(4);
  lab_id_ = value;
}

// -------------------------------------------------------------------

// mp_refs

// repeated uint32 id = 1;
inline int mp_refs::id_size() const {
  return id_.size();
}
inline void mp_refs::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 mp_refs::id(int index) const {
  return id_.Get(index);
}
inline void mp_refs::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
}
inline void mp_refs::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
mp_refs::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
mp_refs::mutable_id() {
  return &id_;
}

// repeated float x = 2;
inline int mp_refs::x_size() const {
  return x_.size();
}
inline void mp_refs::clear_x() {
  x_.Clear();
}
inline float mp_refs::x(int index) const {
  return x_.Get(index);
}
inline void mp_refs::set_x(int index, float value) {
  x_.Set(index, value);
}
inline void mp_refs::add_x(float value) {
  x_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
mp_refs::x() const {
  return x_;
}
inline ::google::protobuf::RepeatedField< float >*
mp_refs::mutable_x() {
  return &x_;
}

// repeated float y = 3;
inline int mp_refs::y_size() const {
  return y_.size();
}
inline void mp_refs::clear_y() {
  y_.Clear();
}
inline float mp_refs::y(int index) const {
  return y_.Get(index);
}
inline void mp_refs::set_y(int index, float value) {
  y_.Set(index, value);
}
inline void mp_refs::add_y(float value) {
  y_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
mp_refs::y() const {
  return y_;
}
inline ::google::protobuf::RepeatedField< float >*
mp_refs::mutable_y() {
  return &y_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_reflector_2eproto__INCLUDED

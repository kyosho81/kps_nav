// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bag.proto

#ifndef PROTOBUF_bag_2eproto__INCLUDED
#define PROTOBUF_bag_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "laser.pb.h"
// @@protoc_insertion_point(includes)

namespace KPS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bag_2eproto();
void protobuf_AssignDesc_bag_2eproto();
void protobuf_ShutdownFile_bag_2eproto();

class mp_odom;
class mp_pos;
class mp_bag;

// ===================================================================

class mp_odom : public ::google::protobuf::Message {
 public:
  mp_odom();
  virtual ~mp_odom();
  
  mp_odom(const mp_odom& from);
  
  inline mp_odom& operator=(const mp_odom& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mp_odom& default_instance();
  
  void Swap(mp_odom* other);
  
  // implements Message ----------------------------------------------
  
  mp_odom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mp_odom& from);
  void MergeFrom(const mp_odom& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float th = 3;
  inline bool has_th() const;
  inline void clear_th();
  static const int kThFieldNumber = 3;
  inline float th() const;
  inline void set_th(float value);
  
  // required float vx = 4;
  inline bool has_vx() const;
  inline void clear_vx();
  static const int kVxFieldNumber = 4;
  inline float vx() const;
  inline void set_vx(float value);
  
  // required float vy = 5;
  inline bool has_vy() const;
  inline void clear_vy();
  static const int kVyFieldNumber = 5;
  inline float vy() const;
  inline void set_vy(float value);
  
  // required float vw = 6;
  inline bool has_vw() const;
  inline void clear_vw();
  static const int kVwFieldNumber = 6;
  inline float vw() const;
  inline void set_vw(float value);
  
  // @@protoc_insertion_point(class_scope:KPS.mp_odom)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  float x_;
  float y_;
  float th_;
  float vx_;
  float vy_;
  float vw_;
  friend void  protobuf_AddDesc_bag_2eproto();
  friend void protobuf_AssignDesc_bag_2eproto();
  friend void protobuf_ShutdownFile_bag_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static mp_odom* default_instance_;
};
// -------------------------------------------------------------------

class mp_pos : public ::google::protobuf::Message {
 public:
  mp_pos();
  virtual ~mp_pos();
  
  mp_pos(const mp_pos& from);
  
  inline mp_pos& operator=(const mp_pos& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mp_pos& default_instance();
  
  void Swap(mp_pos* other);
  
  // implements Message ----------------------------------------------
  
  mp_pos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mp_pos& from);
  void MergeFrom(const mp_pos& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float th = 3;
  inline bool has_th() const;
  inline void clear_th();
  static const int kThFieldNumber = 3;
  inline float th() const;
  inline void set_th(float value);
  
  // @@protoc_insertion_point(class_scope:KPS.mp_pos)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  float x_;
  float y_;
  float th_;
  friend void  protobuf_AddDesc_bag_2eproto();
  friend void protobuf_AssignDesc_bag_2eproto();
  friend void protobuf_ShutdownFile_bag_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static mp_pos* default_instance_;
};
// -------------------------------------------------------------------

class mp_bag : public ::google::protobuf::Message {
 public:
  mp_bag();
  virtual ~mp_bag();
  
  mp_bag(const mp_bag& from);
  
  inline mp_bag& operator=(const mp_bag& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mp_bag& default_instance();
  
  void Swap(mp_bag* other);
  
  // implements Message ----------------------------------------------
  
  mp_bag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mp_bag& from);
  void MergeFrom(const mp_bag& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string robot_shape = 1;
  inline bool has_robot_shape() const;
  inline void clear_robot_shape();
  static const int kRobotShapeFieldNumber = 1;
  inline const ::std::string& robot_shape() const;
  inline void set_robot_shape(const ::std::string& value);
  inline void set_robot_shape(const char* value);
  inline void set_robot_shape(const char* value, size_t size);
  inline ::std::string* mutable_robot_shape();
  
  // required .KPS.mp_laser_para laser_para = 2;
  inline bool has_laser_para() const;
  inline void clear_laser_para();
  static const int kLaserParaFieldNumber = 2;
  inline const ::KPS::mp_laser_para& laser_para() const;
  inline ::KPS::mp_laser_para* mutable_laser_para();
  
  // required .KPS.mp_laser_data laser_data = 3;
  inline bool has_laser_data() const;
  inline void clear_laser_data();
  static const int kLaserDataFieldNumber = 3;
  inline const ::KPS::mp_laser_data& laser_data() const;
  inline ::KPS::mp_laser_data* mutable_laser_data();
  
  // required .KPS.mp_odom odom = 4;
  inline bool has_odom() const;
  inline void clear_odom();
  static const int kOdomFieldNumber = 4;
  inline const ::KPS::mp_odom& odom() const;
  inline ::KPS::mp_odom* mutable_odom();
  
  // required .KPS.mp_pos amcl_pos = 5;
  inline bool has_amcl_pos() const;
  inline void clear_amcl_pos();
  static const int kAmclPosFieldNumber = 5;
  inline const ::KPS::mp_pos& amcl_pos() const;
  inline ::KPS::mp_pos* mutable_amcl_pos();
  
  // @@protoc_insertion_point(class_scope:KPS.mp_bag)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* robot_shape_;
  static const ::std::string _default_robot_shape_;
  ::KPS::mp_laser_para* laser_para_;
  ::KPS::mp_laser_data* laser_data_;
  ::KPS::mp_odom* odom_;
  ::KPS::mp_pos* amcl_pos_;
  friend void  protobuf_AddDesc_bag_2eproto();
  friend void protobuf_AssignDesc_bag_2eproto();
  friend void protobuf_ShutdownFile_bag_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static mp_bag* default_instance_;
};
// ===================================================================


// ===================================================================

// mp_odom

// required float x = 1;
inline bool mp_odom::has_x() const {
  return _has_bit(0);
}
inline void mp_odom::clear_x() {
  x_ = 0;
  _clear_bit(0);
}
inline float mp_odom::x() const {
  return x_;
}
inline void mp_odom::set_x(float value) {
  _set_bit(0);
  x_ = value;
}

// required float y = 2;
inline bool mp_odom::has_y() const {
  return _has_bit(1);
}
inline void mp_odom::clear_y() {
  y_ = 0;
  _clear_bit(1);
}
inline float mp_odom::y() const {
  return y_;
}
inline void mp_odom::set_y(float value) {
  _set_bit(1);
  y_ = value;
}

// required float th = 3;
inline bool mp_odom::has_th() const {
  return _has_bit(2);
}
inline void mp_odom::clear_th() {
  th_ = 0;
  _clear_bit(2);
}
inline float mp_odom::th() const {
  return th_;
}
inline void mp_odom::set_th(float value) {
  _set_bit(2);
  th_ = value;
}

// required float vx = 4;
inline bool mp_odom::has_vx() const {
  return _has_bit(3);
}
inline void mp_odom::clear_vx() {
  vx_ = 0;
  _clear_bit(3);
}
inline float mp_odom::vx() const {
  return vx_;
}
inline void mp_odom::set_vx(float value) {
  _set_bit(3);
  vx_ = value;
}

// required float vy = 5;
inline bool mp_odom::has_vy() const {
  return _has_bit(4);
}
inline void mp_odom::clear_vy() {
  vy_ = 0;
  _clear_bit(4);
}
inline float mp_odom::vy() const {
  return vy_;
}
inline void mp_odom::set_vy(float value) {
  _set_bit(4);
  vy_ = value;
}

// required float vw = 6;
inline bool mp_odom::has_vw() const {
  return _has_bit(5);
}
inline void mp_odom::clear_vw() {
  vw_ = 0;
  _clear_bit(5);
}
inline float mp_odom::vw() const {
  return vw_;
}
inline void mp_odom::set_vw(float value) {
  _set_bit(5);
  vw_ = value;
}

// -------------------------------------------------------------------

// mp_pos

// required float x = 1;
inline bool mp_pos::has_x() const {
  return _has_bit(0);
}
inline void mp_pos::clear_x() {
  x_ = 0;
  _clear_bit(0);
}
inline float mp_pos::x() const {
  return x_;
}
inline void mp_pos::set_x(float value) {
  _set_bit(0);
  x_ = value;
}

// required float y = 2;
inline bool mp_pos::has_y() const {
  return _has_bit(1);
}
inline void mp_pos::clear_y() {
  y_ = 0;
  _clear_bit(1);
}
inline float mp_pos::y() const {
  return y_;
}
inline void mp_pos::set_y(float value) {
  _set_bit(1);
  y_ = value;
}

// required float th = 3;
inline bool mp_pos::has_th() const {
  return _has_bit(2);
}
inline void mp_pos::clear_th() {
  th_ = 0;
  _clear_bit(2);
}
inline float mp_pos::th() const {
  return th_;
}
inline void mp_pos::set_th(float value) {
  _set_bit(2);
  th_ = value;
}

// -------------------------------------------------------------------

// mp_bag

// required string robot_shape = 1;
inline bool mp_bag::has_robot_shape() const {
  return _has_bit(0);
}
inline void mp_bag::clear_robot_shape() {
  if (robot_shape_ != &_default_robot_shape_) {
    robot_shape_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& mp_bag::robot_shape() const {
  return *robot_shape_;
}
inline void mp_bag::set_robot_shape(const ::std::string& value) {
  _set_bit(0);
  if (robot_shape_ == &_default_robot_shape_) {
    robot_shape_ = new ::std::string;
  }
  robot_shape_->assign(value);
}
inline void mp_bag::set_robot_shape(const char* value) {
  _set_bit(0);
  if (robot_shape_ == &_default_robot_shape_) {
    robot_shape_ = new ::std::string;
  }
  robot_shape_->assign(value);
}
inline void mp_bag::set_robot_shape(const char* value, size_t size) {
  _set_bit(0);
  if (robot_shape_ == &_default_robot_shape_) {
    robot_shape_ = new ::std::string;
  }
  robot_shape_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mp_bag::mutable_robot_shape() {
  _set_bit(0);
  if (robot_shape_ == &_default_robot_shape_) {
    robot_shape_ = new ::std::string;
  }
  return robot_shape_;
}

// required .KPS.mp_laser_para laser_para = 2;
inline bool mp_bag::has_laser_para() const {
  return _has_bit(1);
}
inline void mp_bag::clear_laser_para() {
  if (laser_para_ != NULL) laser_para_->::KPS::mp_laser_para::Clear();
  _clear_bit(1);
}
inline const ::KPS::mp_laser_para& mp_bag::laser_para() const {
  return laser_para_ != NULL ? *laser_para_ : *default_instance_->laser_para_;
}
inline ::KPS::mp_laser_para* mp_bag::mutable_laser_para() {
  _set_bit(1);
  if (laser_para_ == NULL) laser_para_ = new ::KPS::mp_laser_para;
  return laser_para_;
}

// required .KPS.mp_laser_data laser_data = 3;
inline bool mp_bag::has_laser_data() const {
  return _has_bit(2);
}
inline void mp_bag::clear_laser_data() {
  if (laser_data_ != NULL) laser_data_->::KPS::mp_laser_data::Clear();
  _clear_bit(2);
}
inline const ::KPS::mp_laser_data& mp_bag::laser_data() const {
  return laser_data_ != NULL ? *laser_data_ : *default_instance_->laser_data_;
}
inline ::KPS::mp_laser_data* mp_bag::mutable_laser_data() {
  _set_bit(2);
  if (laser_data_ == NULL) laser_data_ = new ::KPS::mp_laser_data;
  return laser_data_;
}

// required .KPS.mp_odom odom = 4;
inline bool mp_bag::has_odom() const {
  return _has_bit(3);
}
inline void mp_bag::clear_odom() {
  if (odom_ != NULL) odom_->::KPS::mp_odom::Clear();
  _clear_bit(3);
}
inline const ::KPS::mp_odom& mp_bag::odom() const {
  return odom_ != NULL ? *odom_ : *default_instance_->odom_;
}
inline ::KPS::mp_odom* mp_bag::mutable_odom() {
  _set_bit(3);
  if (odom_ == NULL) odom_ = new ::KPS::mp_odom;
  return odom_;
}

// required .KPS.mp_pos amcl_pos = 5;
inline bool mp_bag::has_amcl_pos() const {
  return _has_bit(4);
}
inline void mp_bag::clear_amcl_pos() {
  if (amcl_pos_ != NULL) amcl_pos_->::KPS::mp_pos::Clear();
  _clear_bit(4);
}
inline const ::KPS::mp_pos& mp_bag::amcl_pos() const {
  return amcl_pos_ != NULL ? *amcl_pos_ : *default_instance_->amcl_pos_;
}
inline ::KPS::mp_pos* mp_bag::mutable_amcl_pos() {
  _set_bit(4);
  if (amcl_pos_ == NULL) amcl_pos_ = new ::KPS::mp_pos;
  return amcl_pos_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bag_2eproto__INCLUDED

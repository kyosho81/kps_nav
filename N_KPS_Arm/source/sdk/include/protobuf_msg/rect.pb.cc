// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rect.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KPS {

namespace {

const ::google::protobuf::Descriptor* mp_rect_region_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_rect_region_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rect_2eproto() {
  protobuf_AddDesc_rect_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rect.proto");
  GOOGLE_CHECK(file != NULL);
  mp_rect_region_descriptor_ = file->message_type(0);
  static const int mp_rect_region_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_rect_region, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_rect_region, rect_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_rect_region, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_rect_region, rect_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_rect_region, rect_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_rect_region, rect_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_rect_region, pallet_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_rect_region, pallet_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_rect_region, pallet_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_rect_region, pallet_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_rect_region, row_spacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_rect_region, col_spacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_rect_region, pallet_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_rect_region, para_),
  };
  mp_rect_region_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_rect_region_descriptor_,
      mp_rect_region::default_instance_,
      mp_rect_region_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_rect_region, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_rect_region, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_rect_region));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rect_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_rect_region_descriptor_, &mp_rect_region::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rect_2eproto() {
  delete mp_rect_region::default_instance_;
  delete mp_rect_region_reflection_;
}

void protobuf_AddDesc_rect_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::KPS::protobuf_AddDesc_base_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nrect.proto\022\003KPS\032\nbase.proto\"\303\002\n\016mp_rec"
    "t_region\022\n\n\002id\030\001 \002(\r\022\021\n\trect_name\030\002 \002(\t\022"
    "\035\n\003pos\030\003 \002(\0132\020.KPS.mp_pos_data\022\023\n\013rect_l"
    "ength\030\004 \002(\002\022\022\n\nrect_width\030\005 \002(\002\022\023\n\013rect_"
    "height\030\006 \001(\002\022\023\n\013pallet_type\030\007 \001(\t\022\025\n\rpal"
    "let_length\030\010 \002(\002\022\024\n\014pallet_width\030\t \002(\002\022\025"
    "\n\rpallet_height\030\n \001(\002\022\023\n\013row_spacing\030\013 \002"
    "(\002\022\023\n\013col_spacing\030\014 \002(\002\022$\n\npallet_pos\030\r "
    "\003(\0132\020.KPS.mp_pos_data\022\014\n\004para\030\016 \001(\t", 355);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rect.proto", &protobuf_RegisterTypes);
  mp_rect_region::default_instance_ = new mp_rect_region();
  mp_rect_region::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rect_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rect_2eproto {
  StaticDescriptorInitializer_rect_2eproto() {
    protobuf_AddDesc_rect_2eproto();
  }
} static_descriptor_initializer_rect_2eproto_;


// ===================================================================

const ::std::string mp_rect_region::_default_rect_name_;
const ::std::string mp_rect_region::_default_pallet_type_;
const ::std::string mp_rect_region::_default_para_;
#ifndef _MSC_VER
const int mp_rect_region::kIdFieldNumber;
const int mp_rect_region::kRectNameFieldNumber;
const int mp_rect_region::kPosFieldNumber;
const int mp_rect_region::kRectLengthFieldNumber;
const int mp_rect_region::kRectWidthFieldNumber;
const int mp_rect_region::kRectHeightFieldNumber;
const int mp_rect_region::kPalletTypeFieldNumber;
const int mp_rect_region::kPalletLengthFieldNumber;
const int mp_rect_region::kPalletWidthFieldNumber;
const int mp_rect_region::kPalletHeightFieldNumber;
const int mp_rect_region::kRowSpacingFieldNumber;
const int mp_rect_region::kColSpacingFieldNumber;
const int mp_rect_region::kPalletPosFieldNumber;
const int mp_rect_region::kParaFieldNumber;
#endif  // !_MSC_VER

mp_rect_region::mp_rect_region()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_rect_region::InitAsDefaultInstance() {
  pos_ = const_cast< ::KPS::mp_pos_data*>(&::KPS::mp_pos_data::default_instance());
}

mp_rect_region::mp_rect_region(const mp_rect_region& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_rect_region::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  rect_name_ = const_cast< ::std::string*>(&_default_rect_name_);
  pos_ = NULL;
  rect_length_ = 0;
  rect_width_ = 0;
  rect_height_ = 0;
  pallet_type_ = const_cast< ::std::string*>(&_default_pallet_type_);
  pallet_length_ = 0;
  pallet_width_ = 0;
  pallet_height_ = 0;
  row_spacing_ = 0;
  col_spacing_ = 0;
  para_ = const_cast< ::std::string*>(&_default_para_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_rect_region::~mp_rect_region() {
  SharedDtor();
}

void mp_rect_region::SharedDtor() {
  if (rect_name_ != &_default_rect_name_) {
    delete rect_name_;
  }
  if (pallet_type_ != &_default_pallet_type_) {
    delete pallet_type_;
  }
  if (para_ != &_default_para_) {
    delete para_;
  }
  if (this != default_instance_) {
    delete pos_;
  }
}

void mp_rect_region::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_rect_region::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_rect_region_descriptor_;
}

const mp_rect_region& mp_rect_region::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rect_2eproto();  return *default_instance_;
}

mp_rect_region* mp_rect_region::default_instance_ = NULL;

mp_rect_region* mp_rect_region::New() const {
  return new mp_rect_region;
}

void mp_rect_region::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (_has_bit(1)) {
      if (rect_name_ != &_default_rect_name_) {
        rect_name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pos_ != NULL) pos_->::KPS::mp_pos_data::Clear();
    }
    rect_length_ = 0;
    rect_width_ = 0;
    rect_height_ = 0;
    if (_has_bit(6)) {
      if (pallet_type_ != &_default_pallet_type_) {
        pallet_type_->clear();
      }
    }
    pallet_length_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pallet_width_ = 0;
    pallet_height_ = 0;
    row_spacing_ = 0;
    col_spacing_ = 0;
    if (_has_bit(13)) {
      if (para_ != &_default_para_) {
        para_->clear();
      }
    }
  }
  pallet_pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_rect_region::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rect_name;
        break;
      }
      
      // required string rect_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rect_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rect_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rect_name().data(), this->rect_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }
      
      // required .KPS.mp_pos_data pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_rect_length;
        break;
      }
      
      // required float rect_length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rect_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rect_length_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rect_width;
        break;
      }
      
      // required float rect_width = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rect_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rect_width_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_rect_height;
        break;
      }
      
      // optional float rect_height = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rect_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rect_height_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pallet_type;
        break;
      }
      
      // optional string pallet_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pallet_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pallet_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pallet_type().data(), this->pallet_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_pallet_length;
        break;
      }
      
      // required float pallet_length = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pallet_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pallet_length_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_pallet_width;
        break;
      }
      
      // required float pallet_width = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pallet_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pallet_width_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_pallet_height;
        break;
      }
      
      // optional float pallet_height = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pallet_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pallet_height_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_row_spacing;
        break;
      }
      
      // required float row_spacing = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_row_spacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &row_spacing_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_col_spacing;
        break;
      }
      
      // required float col_spacing = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_col_spacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &col_spacing_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_pallet_pos;
        break;
      }
      
      // repeated .KPS.mp_pos_data pallet_pos = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pallet_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pallet_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_pallet_pos;
        if (input->ExpectTag(114)) goto parse_para;
        break;
      }
      
      // optional string para = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_para:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_para()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->para().data(), this->para().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_rect_region::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required string rect_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rect_name().data(), this->rect_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rect_name(), output);
  }
  
  // required .KPS.mp_pos_data pos = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }
  
  // required float rect_length = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->rect_length(), output);
  }
  
  // required float rect_width = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rect_width(), output);
  }
  
  // optional float rect_height = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->rect_height(), output);
  }
  
  // optional string pallet_type = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pallet_type().data(), this->pallet_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->pallet_type(), output);
  }
  
  // required float pallet_length = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->pallet_length(), output);
  }
  
  // required float pallet_width = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->pallet_width(), output);
  }
  
  // optional float pallet_height = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->pallet_height(), output);
  }
  
  // required float row_spacing = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->row_spacing(), output);
  }
  
  // required float col_spacing = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->col_spacing(), output);
  }
  
  // repeated .KPS.mp_pos_data pallet_pos = 13;
  for (int i = 0; i < this->pallet_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->pallet_pos(i), output);
  }
  
  // optional string para = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->para().data(), this->para().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->para(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_rect_region::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required string rect_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rect_name().data(), this->rect_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rect_name(), target);
  }
  
  // required .KPS.mp_pos_data pos = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }
  
  // required float rect_length = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->rect_length(), target);
  }
  
  // required float rect_width = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rect_width(), target);
  }
  
  // optional float rect_height = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->rect_height(), target);
  }
  
  // optional string pallet_type = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pallet_type().data(), this->pallet_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pallet_type(), target);
  }
  
  // required float pallet_length = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->pallet_length(), target);
  }
  
  // required float pallet_width = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->pallet_width(), target);
  }
  
  // optional float pallet_height = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->pallet_height(), target);
  }
  
  // required float row_spacing = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->row_spacing(), target);
  }
  
  // required float col_spacing = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->col_spacing(), target);
  }
  
  // repeated .KPS.mp_pos_data pallet_pos = 13;
  for (int i = 0; i < this->pallet_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->pallet_pos(i), target);
  }
  
  // optional string para = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->para().data(), this->para().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->para(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_rect_region::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required string rect_name = 2;
    if (has_rect_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rect_name());
    }
    
    // required .KPS.mp_pos_data pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
    // required float rect_length = 4;
    if (has_rect_length()) {
      total_size += 1 + 4;
    }
    
    // required float rect_width = 5;
    if (has_rect_width()) {
      total_size += 1 + 4;
    }
    
    // optional float rect_height = 6;
    if (has_rect_height()) {
      total_size += 1 + 4;
    }
    
    // optional string pallet_type = 7;
    if (has_pallet_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pallet_type());
    }
    
    // required float pallet_length = 8;
    if (has_pallet_length()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float pallet_width = 9;
    if (has_pallet_width()) {
      total_size += 1 + 4;
    }
    
    // optional float pallet_height = 10;
    if (has_pallet_height()) {
      total_size += 1 + 4;
    }
    
    // required float row_spacing = 11;
    if (has_row_spacing()) {
      total_size += 1 + 4;
    }
    
    // required float col_spacing = 12;
    if (has_col_spacing()) {
      total_size += 1 + 4;
    }
    
    // optional string para = 14;
    if (has_para()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->para());
    }
    
  }
  // repeated .KPS.mp_pos_data pallet_pos = 13;
  total_size += 1 * this->pallet_pos_size();
  for (int i = 0; i < this->pallet_pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pallet_pos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_rect_region::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_rect_region* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_rect_region*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_rect_region::MergeFrom(const mp_rect_region& from) {
  GOOGLE_CHECK_NE(&from, this);
  pallet_pos_.MergeFrom(from.pallet_pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_rect_name(from.rect_name());
    }
    if (from._has_bit(2)) {
      mutable_pos()->::KPS::mp_pos_data::MergeFrom(from.pos());
    }
    if (from._has_bit(3)) {
      set_rect_length(from.rect_length());
    }
    if (from._has_bit(4)) {
      set_rect_width(from.rect_width());
    }
    if (from._has_bit(5)) {
      set_rect_height(from.rect_height());
    }
    if (from._has_bit(6)) {
      set_pallet_type(from.pallet_type());
    }
    if (from._has_bit(7)) {
      set_pallet_length(from.pallet_length());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_pallet_width(from.pallet_width());
    }
    if (from._has_bit(9)) {
      set_pallet_height(from.pallet_height());
    }
    if (from._has_bit(10)) {
      set_row_spacing(from.row_spacing());
    }
    if (from._has_bit(11)) {
      set_col_spacing(from.col_spacing());
    }
    if (from._has_bit(13)) {
      set_para(from.para());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_rect_region::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_rect_region::CopyFrom(const mp_rect_region& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_rect_region::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000d9f) != 0x00000d9f) return false;
  
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  for (int i = 0; i < pallet_pos_size(); i++) {
    if (!this->pallet_pos(i).IsInitialized()) return false;
  }
  return true;
}

void mp_rect_region::Swap(mp_rect_region* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rect_name_, other->rect_name_);
    std::swap(pos_, other->pos_);
    std::swap(rect_length_, other->rect_length_);
    std::swap(rect_width_, other->rect_width_);
    std::swap(rect_height_, other->rect_height_);
    std::swap(pallet_type_, other->pallet_type_);
    std::swap(pallet_length_, other->pallet_length_);
    std::swap(pallet_width_, other->pallet_width_);
    std::swap(pallet_height_, other->pallet_height_);
    std::swap(row_spacing_, other->row_spacing_);
    std::swap(col_spacing_, other->col_spacing_);
    pallet_pos_.Swap(&other->pallet_pos_);
    std::swap(para_, other->para_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_rect_region::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_rect_region_descriptor_;
  metadata.reflection = mp_rect_region_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: edge.proto

#ifndef PROTOBUF_edge_2eproto__INCLUDED
#define PROTOBUF_edge_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)

namespace KPS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_edge_2eproto();
void protobuf_AssignDesc_edge_2eproto();
void protobuf_ShutdownFile_edge_2eproto();

class mp_edge;

enum mp_edge_Edge_Dir_Type {
  mp_edge_Edge_Dir_Type_NONE = 0,
  mp_edge_Edge_Dir_Type_ONE2TWO = 1,
  mp_edge_Edge_Dir_Type_TWO2ONE = 2,
  mp_edge_Edge_Dir_Type_BOTH_DIR = 3
};
bool mp_edge_Edge_Dir_Type_IsValid(int value);
const mp_edge_Edge_Dir_Type mp_edge_Edge_Dir_Type_Edge_Dir_Type_MIN = mp_edge_Edge_Dir_Type_NONE;
const mp_edge_Edge_Dir_Type mp_edge_Edge_Dir_Type_Edge_Dir_Type_MAX = mp_edge_Edge_Dir_Type_BOTH_DIR;
const int mp_edge_Edge_Dir_Type_Edge_Dir_Type_ARRAYSIZE = mp_edge_Edge_Dir_Type_Edge_Dir_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* mp_edge_Edge_Dir_Type_descriptor();
inline const ::std::string& mp_edge_Edge_Dir_Type_Name(mp_edge_Edge_Dir_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    mp_edge_Edge_Dir_Type_descriptor(), value);
}
inline bool mp_edge_Edge_Dir_Type_Parse(
    const ::std::string& name, mp_edge_Edge_Dir_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<mp_edge_Edge_Dir_Type>(
    mp_edge_Edge_Dir_Type_descriptor(), name, value);
}
// ===================================================================

class mp_edge : public ::google::protobuf::Message {
 public:
  mp_edge();
  virtual ~mp_edge();
  
  mp_edge(const mp_edge& from);
  
  inline mp_edge& operator=(const mp_edge& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mp_edge& default_instance();
  
  void Swap(mp_edge* other);
  
  // implements Message ----------------------------------------------
  
  mp_edge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mp_edge& from);
  void MergeFrom(const mp_edge& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef mp_edge_Edge_Dir_Type Edge_Dir_Type;
  static const Edge_Dir_Type NONE = mp_edge_Edge_Dir_Type_NONE;
  static const Edge_Dir_Type ONE2TWO = mp_edge_Edge_Dir_Type_ONE2TWO;
  static const Edge_Dir_Type TWO2ONE = mp_edge_Edge_Dir_Type_TWO2ONE;
  static const Edge_Dir_Type BOTH_DIR = mp_edge_Edge_Dir_Type_BOTH_DIR;
  static inline bool Edge_Dir_Type_IsValid(int value) {
    return mp_edge_Edge_Dir_Type_IsValid(value);
  }
  static const Edge_Dir_Type Edge_Dir_Type_MIN =
    mp_edge_Edge_Dir_Type_Edge_Dir_Type_MIN;
  static const Edge_Dir_Type Edge_Dir_Type_MAX =
    mp_edge_Edge_Dir_Type_Edge_Dir_Type_MAX;
  static const int Edge_Dir_Type_ARRAYSIZE =
    mp_edge_Edge_Dir_Type_Edge_Dir_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Edge_Dir_Type_descriptor() {
    return mp_edge_Edge_Dir_Type_descriptor();
  }
  static inline const ::std::string& Edge_Dir_Type_Name(Edge_Dir_Type value) {
    return mp_edge_Edge_Dir_Type_Name(value);
  }
  static inline bool Edge_Dir_Type_Parse(const ::std::string& name,
      Edge_Dir_Type* value) {
    return mp_edge_Edge_Dir_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .KPS.mp_item_base base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::KPS::mp_item_base& base() const;
  inline ::KPS::mp_item_base* mutable_base();
  
  // required uint32 ref_node_one = 2;
  inline bool has_ref_node_one() const;
  inline void clear_ref_node_one();
  static const int kRefNodeOneFieldNumber = 2;
  inline ::google::protobuf::uint32 ref_node_one() const;
  inline void set_ref_node_one(::google::protobuf::uint32 value);
  
  // required uint32 ref_node_two = 3;
  inline bool has_ref_node_two() const;
  inline void clear_ref_node_two();
  static const int kRefNodeTwoFieldNumber = 3;
  inline ::google::protobuf::uint32 ref_node_two() const;
  inline void set_ref_node_two(::google::protobuf::uint32 value);
  
  // required .KPS.mp_edge.Edge_Dir_Type forward = 4;
  inline bool has_forward() const;
  inline void clear_forward();
  static const int kForwardFieldNumber = 4;
  inline ::KPS::mp_edge_Edge_Dir_Type forward() const;
  inline void set_forward(::KPS::mp_edge_Edge_Dir_Type value);
  
  // required .KPS.mp_edge.Edge_Dir_Type backward = 5;
  inline bool has_backward() const;
  inline void clear_backward();
  static const int kBackwardFieldNumber = 5;
  inline ::KPS::mp_edge_Edge_Dir_Type backward() const;
  inline void set_backward(::KPS::mp_edge_Edge_Dir_Type value);
  
  // optional .KPS.mp_edge.Edge_Dir_Type leftshift = 6;
  inline bool has_leftshift() const;
  inline void clear_leftshift();
  static const int kLeftshiftFieldNumber = 6;
  inline ::KPS::mp_edge_Edge_Dir_Type leftshift() const;
  inline void set_leftshift(::KPS::mp_edge_Edge_Dir_Type value);
  
  // optional .KPS.mp_edge.Edge_Dir_Type rightshift = 7;
  inline bool has_rightshift() const;
  inline void clear_rightshift();
  static const int kRightshiftFieldNumber = 7;
  inline ::KPS::mp_edge_Edge_Dir_Type rightshift() const;
  inline void set_rightshift(::KPS::mp_edge_Edge_Dir_Type value);
  
  // required float speed_forward = 8;
  inline bool has_speed_forward() const;
  inline void clear_speed_forward();
  static const int kSpeedForwardFieldNumber = 8;
  inline float speed_forward() const;
  inline void set_speed_forward(float value);
  
  // required float speed_backward = 9;
  inline bool has_speed_backward() const;
  inline void clear_speed_backward();
  static const int kSpeedBackwardFieldNumber = 9;
  inline float speed_backward() const;
  inline void set_speed_backward(float value);
  
  // optional float speed_leftshift = 10;
  inline bool has_speed_leftshift() const;
  inline void clear_speed_leftshift();
  static const int kSpeedLeftshiftFieldNumber = 10;
  inline float speed_leftshift() const;
  inline void set_speed_leftshift(float value);
  
  // optional float speed_rightshift = 11;
  inline bool has_speed_rightshift() const;
  inline void clear_speed_rightshift();
  static const int kSpeedRightshiftFieldNumber = 11;
  inline float speed_rightshift() const;
  inline void set_speed_rightshift(float value);
  
  // optional string lab = 12;
  inline bool has_lab() const;
  inline void clear_lab();
  static const int kLabFieldNumber = 12;
  inline const ::std::string& lab() const;
  inline void set_lab(const ::std::string& value);
  inline void set_lab(const char* value);
  inline void set_lab(const char* value, size_t size);
  inline ::std::string* mutable_lab();
  
  // @@protoc_insertion_point(class_scope:KPS.mp_edge)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::KPS::mp_item_base* base_;
  ::google::protobuf::uint32 ref_node_one_;
  ::google::protobuf::uint32 ref_node_two_;
  int forward_;
  int backward_;
  int leftshift_;
  int rightshift_;
  float speed_forward_;
  float speed_backward_;
  float speed_leftshift_;
  float speed_rightshift_;
  ::std::string* lab_;
  static const ::std::string _default_lab_;
  friend void  protobuf_AddDesc_edge_2eproto();
  friend void protobuf_AssignDesc_edge_2eproto();
  friend void protobuf_ShutdownFile_edge_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static mp_edge* default_instance_;
};
// ===================================================================


// ===================================================================

// mp_edge

// required .KPS.mp_item_base base = 1;
inline bool mp_edge::has_base() const {
  return _has_bit(0);
}
inline void mp_edge::clear_base() {
  if (base_ != NULL) base_->::KPS::mp_item_base::Clear();
  _clear_bit(0);
}
inline const ::KPS::mp_item_base& mp_edge::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::KPS::mp_item_base* mp_edge::mutable_base() {
  _set_bit(0);
  if (base_ == NULL) base_ = new ::KPS::mp_item_base;
  return base_;
}

// required uint32 ref_node_one = 2;
inline bool mp_edge::has_ref_node_one() const {
  return _has_bit(1);
}
inline void mp_edge::clear_ref_node_one() {
  ref_node_one_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 mp_edge::ref_node_one() const {
  return ref_node_one_;
}
inline void mp_edge::set_ref_node_one(::google::protobuf::uint32 value) {
  _set_bit(1);
  ref_node_one_ = value;
}

// required uint32 ref_node_two = 3;
inline bool mp_edge::has_ref_node_two() const {
  return _has_bit(2);
}
inline void mp_edge::clear_ref_node_two() {
  ref_node_two_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 mp_edge::ref_node_two() const {
  return ref_node_two_;
}
inline void mp_edge::set_ref_node_two(::google::protobuf::uint32 value) {
  _set_bit(2);
  ref_node_two_ = value;
}

// required .KPS.mp_edge.Edge_Dir_Type forward = 4;
inline bool mp_edge::has_forward() const {
  return _has_bit(3);
}
inline void mp_edge::clear_forward() {
  forward_ = 0;
  _clear_bit(3);
}
inline ::KPS::mp_edge_Edge_Dir_Type mp_edge::forward() const {
  return static_cast< ::KPS::mp_edge_Edge_Dir_Type >(forward_);
}
inline void mp_edge::set_forward(::KPS::mp_edge_Edge_Dir_Type value) {
  GOOGLE_DCHECK(::KPS::mp_edge_Edge_Dir_Type_IsValid(value));
  _set_bit(3);
  forward_ = value;
}

// required .KPS.mp_edge.Edge_Dir_Type backward = 5;
inline bool mp_edge::has_backward() const {
  return _has_bit(4);
}
inline void mp_edge::clear_backward() {
  backward_ = 0;
  _clear_bit(4);
}
inline ::KPS::mp_edge_Edge_Dir_Type mp_edge::backward() const {
  return static_cast< ::KPS::mp_edge_Edge_Dir_Type >(backward_);
}
inline void mp_edge::set_backward(::KPS::mp_edge_Edge_Dir_Type value) {
  GOOGLE_DCHECK(::KPS::mp_edge_Edge_Dir_Type_IsValid(value));
  _set_bit(4);
  backward_ = value;
}

// optional .KPS.mp_edge.Edge_Dir_Type leftshift = 6;
inline bool mp_edge::has_leftshift() const {
  return _has_bit(5);
}
inline void mp_edge::clear_leftshift() {
  leftshift_ = 0;
  _clear_bit(5);
}
inline ::KPS::mp_edge_Edge_Dir_Type mp_edge::leftshift() const {
  return static_cast< ::KPS::mp_edge_Edge_Dir_Type >(leftshift_);
}
inline void mp_edge::set_leftshift(::KPS::mp_edge_Edge_Dir_Type value) {
  GOOGLE_DCHECK(::KPS::mp_edge_Edge_Dir_Type_IsValid(value));
  _set_bit(5);
  leftshift_ = value;
}

// optional .KPS.mp_edge.Edge_Dir_Type rightshift = 7;
inline bool mp_edge::has_rightshift() const {
  return _has_bit(6);
}
inline void mp_edge::clear_rightshift() {
  rightshift_ = 0;
  _clear_bit(6);
}
inline ::KPS::mp_edge_Edge_Dir_Type mp_edge::rightshift() const {
  return static_cast< ::KPS::mp_edge_Edge_Dir_Type >(rightshift_);
}
inline void mp_edge::set_rightshift(::KPS::mp_edge_Edge_Dir_Type value) {
  GOOGLE_DCHECK(::KPS::mp_edge_Edge_Dir_Type_IsValid(value));
  _set_bit(6);
  rightshift_ = value;
}

// required float speed_forward = 8;
inline bool mp_edge::has_speed_forward() const {
  return _has_bit(7);
}
inline void mp_edge::clear_speed_forward() {
  speed_forward_ = 0;
  _clear_bit(7);
}
inline float mp_edge::speed_forward() const {
  return speed_forward_;
}
inline void mp_edge::set_speed_forward(float value) {
  _set_bit(7);
  speed_forward_ = value;
}

// required float speed_backward = 9;
inline bool mp_edge::has_speed_backward() const {
  return _has_bit(8);
}
inline void mp_edge::clear_speed_backward() {
  speed_backward_ = 0;
  _clear_bit(8);
}
inline float mp_edge::speed_backward() const {
  return speed_backward_;
}
inline void mp_edge::set_speed_backward(float value) {
  _set_bit(8);
  speed_backward_ = value;
}

// optional float speed_leftshift = 10;
inline bool mp_edge::has_speed_leftshift() const {
  return _has_bit(9);
}
inline void mp_edge::clear_speed_leftshift() {
  speed_leftshift_ = 0;
  _clear_bit(9);
}
inline float mp_edge::speed_leftshift() const {
  return speed_leftshift_;
}
inline void mp_edge::set_speed_leftshift(float value) {
  _set_bit(9);
  speed_leftshift_ = value;
}

// optional float speed_rightshift = 11;
inline bool mp_edge::has_speed_rightshift() const {
  return _has_bit(10);
}
inline void mp_edge::clear_speed_rightshift() {
  speed_rightshift_ = 0;
  _clear_bit(10);
}
inline float mp_edge::speed_rightshift() const {
  return speed_rightshift_;
}
inline void mp_edge::set_speed_rightshift(float value) {
  _set_bit(10);
  speed_rightshift_ = value;
}

// optional string lab = 12;
inline bool mp_edge::has_lab() const {
  return _has_bit(11);
}
inline void mp_edge::clear_lab() {
  if (lab_ != &_default_lab_) {
    lab_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& mp_edge::lab() const {
  return *lab_;
}
inline void mp_edge::set_lab(const ::std::string& value) {
  _set_bit(11);
  if (lab_ == &_default_lab_) {
    lab_ = new ::std::string;
  }
  lab_->assign(value);
}
inline void mp_edge::set_lab(const char* value) {
  _set_bit(11);
  if (lab_ == &_default_lab_) {
    lab_ = new ::std::string;
  }
  lab_->assign(value);
}
inline void mp_edge::set_lab(const char* value, size_t size) {
  _set_bit(11);
  if (lab_ == &_default_lab_) {
    lab_ = new ::std::string;
  }
  lab_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mp_edge::mutable_lab() {
  _set_bit(11);
  if (lab_ == &_default_lab_) {
    lab_ = new ::std::string;
  }
  return lab_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KPS::mp_edge_Edge_Dir_Type>() {
  return ::KPS::mp_edge_Edge_Dir_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_edge_2eproto__INCLUDED

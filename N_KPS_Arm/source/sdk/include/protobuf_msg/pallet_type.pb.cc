// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pallet_type.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KPS {

namespace {

const ::google::protobuf::Descriptor* mp_pallet_type_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mp_pallet_type_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pallet_5ftype_2eproto() {
  protobuf_AddDesc_pallet_5ftype_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pallet_type.proto");
  GOOGLE_CHECK(file != NULL);
  mp_pallet_type_descriptor_ = file->message_type(0);
  static const int mp_pallet_type_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_type, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_type, pallet_type_nm__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_type, pallet_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_type, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_type, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_type, load_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_type, load_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_type, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_type, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_type, height_),
  };
  mp_pallet_type_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mp_pallet_type_descriptor_,
      mp_pallet_type::default_instance_,
      mp_pallet_type_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_type, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mp_pallet_type, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mp_pallet_type));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pallet_5ftype_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mp_pallet_type_descriptor_, &mp_pallet_type::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pallet_5ftype_2eproto() {
  delete mp_pallet_type::default_instance_;
  delete mp_pallet_type_reflection_;
}

void protobuf_AddDesc_pallet_5ftype_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::KPS::protobuf_AddDesc_base_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021pallet_type.proto\022\003KPS\032\nbase.proto\"\334\001\n"
    "\016mp_pallet_type\022\037\n\004base\030\001 \002(\0132\021.KPS.mp_i"
    "tem_base\022\027\n\017pallet_type_nm_\030\002 \002(\t\022\027\n\017pal"
    "let_category\030\003 \001(\r\022\016\n\006weight\030\004 \001(\t\022\016\n\006vo"
    "lume\030\005 \001(\t\022\023\n\013load_weight\030\006 \001(\t\022\023\n\013load_"
    "volume\030\007 \001(\t\022\016\n\006length\030\010 \001(\002\022\r\n\005width\030\t "
    "\001(\002\022\016\n\006height\030\n \001(\002", 259);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pallet_type.proto", &protobuf_RegisterTypes);
  mp_pallet_type::default_instance_ = new mp_pallet_type();
  mp_pallet_type::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pallet_5ftype_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pallet_5ftype_2eproto {
  StaticDescriptorInitializer_pallet_5ftype_2eproto() {
    protobuf_AddDesc_pallet_5ftype_2eproto();
  }
} static_descriptor_initializer_pallet_5ftype_2eproto_;


// ===================================================================

const ::std::string mp_pallet_type::_default_pallet_type_nm__;
const ::std::string mp_pallet_type::_default_weight_;
const ::std::string mp_pallet_type::_default_volume_;
const ::std::string mp_pallet_type::_default_load_weight_;
const ::std::string mp_pallet_type::_default_load_volume_;
#ifndef _MSC_VER
const int mp_pallet_type::kBaseFieldNumber;
const int mp_pallet_type::kPalletTypeNmFieldNumber;
const int mp_pallet_type::kPalletCategoryFieldNumber;
const int mp_pallet_type::kWeightFieldNumber;
const int mp_pallet_type::kVolumeFieldNumber;
const int mp_pallet_type::kLoadWeightFieldNumber;
const int mp_pallet_type::kLoadVolumeFieldNumber;
const int mp_pallet_type::kLengthFieldNumber;
const int mp_pallet_type::kWidthFieldNumber;
const int mp_pallet_type::kHeightFieldNumber;
#endif  // !_MSC_VER

mp_pallet_type::mp_pallet_type()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mp_pallet_type::InitAsDefaultInstance() {
  base_ = const_cast< ::KPS::mp_item_base*>(&::KPS::mp_item_base::default_instance());
}

mp_pallet_type::mp_pallet_type(const mp_pallet_type& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mp_pallet_type::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  pallet_type_nm__ = const_cast< ::std::string*>(&_default_pallet_type_nm__);
  pallet_category_ = 0u;
  weight_ = const_cast< ::std::string*>(&_default_weight_);
  volume_ = const_cast< ::std::string*>(&_default_volume_);
  load_weight_ = const_cast< ::std::string*>(&_default_load_weight_);
  load_volume_ = const_cast< ::std::string*>(&_default_load_volume_);
  length_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mp_pallet_type::~mp_pallet_type() {
  SharedDtor();
}

void mp_pallet_type::SharedDtor() {
  if (pallet_type_nm__ != &_default_pallet_type_nm__) {
    delete pallet_type_nm__;
  }
  if (weight_ != &_default_weight_) {
    delete weight_;
  }
  if (volume_ != &_default_volume_) {
    delete volume_;
  }
  if (load_weight_ != &_default_load_weight_) {
    delete load_weight_;
  }
  if (load_volume_ != &_default_load_volume_) {
    delete load_volume_;
  }
  if (this != default_instance_) {
    delete base_;
  }
}

void mp_pallet_type::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mp_pallet_type::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mp_pallet_type_descriptor_;
}

const mp_pallet_type& mp_pallet_type::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pallet_5ftype_2eproto();  return *default_instance_;
}

mp_pallet_type* mp_pallet_type::default_instance_ = NULL;

mp_pallet_type* mp_pallet_type::New() const {
  return new mp_pallet_type;
}

void mp_pallet_type::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (base_ != NULL) base_->::KPS::mp_item_base::Clear();
    }
    if (_has_bit(1)) {
      if (pallet_type_nm__ != &_default_pallet_type_nm__) {
        pallet_type_nm__->clear();
      }
    }
    pallet_category_ = 0u;
    if (_has_bit(3)) {
      if (weight_ != &_default_weight_) {
        weight_->clear();
      }
    }
    if (_has_bit(4)) {
      if (volume_ != &_default_volume_) {
        volume_->clear();
      }
    }
    if (_has_bit(5)) {
      if (load_weight_ != &_default_load_weight_) {
        load_weight_->clear();
      }
    }
    if (_has_bit(6)) {
      if (load_volume_ != &_default_load_volume_) {
        load_volume_->clear();
      }
    }
    length_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    width_ = 0;
    height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mp_pallet_type::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KPS.mp_item_base base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pallet_type_nm_;
        break;
      }
      
      // required string pallet_type_nm_ = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pallet_type_nm_:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pallet_type_nm_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pallet_type_nm_().data(), this->pallet_type_nm_().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pallet_category;
        break;
      }
      
      // optional uint32 pallet_category = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pallet_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pallet_category_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_weight;
        break;
      }
      
      // optional string weight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weight()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weight().data(), this->weight().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_volume;
        break;
      }
      
      // optional string volume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_volume()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->volume().data(), this->volume().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_load_weight;
        break;
      }
      
      // optional string load_weight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_load_weight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_load_weight()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->load_weight().data(), this->load_weight().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_load_volume;
        break;
      }
      
      // optional string load_volume = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_load_volume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_load_volume()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->load_volume().data(), this->load_volume().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_length;
        break;
      }
      
      // optional float length = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_width;
        break;
      }
      
      // optional float width = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_height;
        break;
      }
      
      // optional float height = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mp_pallet_type::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KPS.mp_item_base base = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // required string pallet_type_nm_ = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pallet_type_nm_().data(), this->pallet_type_nm_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pallet_type_nm_(), output);
  }
  
  // optional uint32 pallet_category = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pallet_category(), output);
  }
  
  // optional string weight = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weight().data(), this->weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->weight(), output);
  }
  
  // optional string volume = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume().data(), this->volume().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->volume(), output);
  }
  
  // optional string load_weight = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->load_weight().data(), this->load_weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->load_weight(), output);
  }
  
  // optional string load_volume = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->load_volume().data(), this->load_volume().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->load_volume(), output);
  }
  
  // optional float length = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->length(), output);
  }
  
  // optional float width = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->width(), output);
  }
  
  // optional float height = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->height(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mp_pallet_type::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KPS.mp_item_base base = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // required string pallet_type_nm_ = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pallet_type_nm_().data(), this->pallet_type_nm_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pallet_type_nm_(), target);
  }
  
  // optional uint32 pallet_category = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pallet_category(), target);
  }
  
  // optional string weight = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weight().data(), this->weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->weight(), target);
  }
  
  // optional string volume = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->volume().data(), this->volume().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->volume(), target);
  }
  
  // optional string load_weight = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->load_weight().data(), this->load_weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->load_weight(), target);
  }
  
  // optional string load_volume = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->load_volume().data(), this->load_volume().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->load_volume(), target);
  }
  
  // optional float length = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->length(), target);
  }
  
  // optional float width = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->width(), target);
  }
  
  // optional float height = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->height(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mp_pallet_type::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KPS.mp_item_base base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // required string pallet_type_nm_ = 2;
    if (has_pallet_type_nm_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pallet_type_nm_());
    }
    
    // optional uint32 pallet_category = 3;
    if (has_pallet_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pallet_category());
    }
    
    // optional string weight = 4;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weight());
    }
    
    // optional string volume = 5;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->volume());
    }
    
    // optional string load_weight = 6;
    if (has_load_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->load_weight());
    }
    
    // optional string load_volume = 7;
    if (has_load_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->load_volume());
    }
    
    // optional float length = 8;
    if (has_length()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float width = 9;
    if (has_width()) {
      total_size += 1 + 4;
    }
    
    // optional float height = 10;
    if (has_height()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mp_pallet_type::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mp_pallet_type* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mp_pallet_type*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mp_pallet_type::MergeFrom(const mp_pallet_type& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_base()->::KPS::mp_item_base::MergeFrom(from.base());
    }
    if (from._has_bit(1)) {
      set_pallet_type_nm_(from.pallet_type_nm_());
    }
    if (from._has_bit(2)) {
      set_pallet_category(from.pallet_category());
    }
    if (from._has_bit(3)) {
      set_weight(from.weight());
    }
    if (from._has_bit(4)) {
      set_volume(from.volume());
    }
    if (from._has_bit(5)) {
      set_load_weight(from.load_weight());
    }
    if (from._has_bit(6)) {
      set_load_volume(from.load_volume());
    }
    if (from._has_bit(7)) {
      set_length(from.length());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_width(from.width());
    }
    if (from._has_bit(9)) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mp_pallet_type::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mp_pallet_type::CopyFrom(const mp_pallet_type& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mp_pallet_type::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void mp_pallet_type::Swap(mp_pallet_type* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(pallet_type_nm__, other->pallet_type_nm__);
    std::swap(pallet_category_, other->pallet_category_);
    std::swap(weight_, other->weight_);
    std::swap(volume_, other->volume_);
    std::swap(load_weight_, other->load_weight_);
    std::swap(load_volume_, other->load_volume_);
    std::swap(length_, other->length_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mp_pallet_type::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mp_pallet_type_descriptor_;
  metadata.reflection = mp_pallet_type_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "storage.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KPS {

namespace {

const ::google::protobuf::Descriptor* s_storage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  s_storage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_storage_2eproto() {
  protobuf_AddDesc_storage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "storage.proto");
  GOOGLE_CHECK(file != NULL);
  s_storage_descriptor_ = file->message_type(0);
  static const int s_storage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_storage, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_storage, schedule_),
  };
  s_storage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      s_storage_descriptor_,
      s_storage::default_instance_,
      s_storage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_storage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(s_storage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(s_storage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_storage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    s_storage_descriptor_, &s_storage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_storage_2eproto() {
  delete s_storage::default_instance_;
  delete s_storage_reflection_;
}

void protobuf_AddDesc_storage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::KPS::protobuf_AddDesc_base_2eproto();
  ::KPS::protobuf_AddDesc_cargo_2eproto();
  ::KPS::protobuf_AddDesc_pallet_2eproto();
  ::KPS::protobuf_AddDesc_cargo_5ftype_2eproto();
  ::KPS::protobuf_AddDesc_pallet_5ftype_2eproto();
  ::KPS::protobuf_AddDesc_lab_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rstorage.proto\022\003KPS\032\nbase.proto\032\013cargo."
    "proto\032\014pallet.proto\032\020cargo_type.proto\032\021p"
    "allet_type.proto\032\tlab.proto\"P\n\ts_storage"
    "\022\037\n\004base\030\001 \002(\0132\021.KPS.mp_item_base\022\"\n\010sch"
    "edule\030\002 \003(\0132\020.KPS.mp_schedule", 189);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "storage.proto", &protobuf_RegisterTypes);
  s_storage::default_instance_ = new s_storage();
  s_storage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_storage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_storage_2eproto {
  StaticDescriptorInitializer_storage_2eproto() {
    protobuf_AddDesc_storage_2eproto();
  }
} static_descriptor_initializer_storage_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int s_storage::kBaseFieldNumber;
const int s_storage::kScheduleFieldNumber;
#endif  // !_MSC_VER

s_storage::s_storage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void s_storage::InitAsDefaultInstance() {
  base_ = const_cast< ::KPS::mp_item_base*>(&::KPS::mp_item_base::default_instance());
}

s_storage::s_storage(const s_storage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void s_storage::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

s_storage::~s_storage() {
  SharedDtor();
}

void s_storage::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void s_storage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* s_storage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return s_storage_descriptor_;
}

const s_storage& s_storage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storage_2eproto();  return *default_instance_;
}

s_storage* s_storage::default_instance_ = NULL;

s_storage* s_storage::New() const {
  return new s_storage;
}

void s_storage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (base_ != NULL) base_->::KPS::mp_item_base::Clear();
    }
  }
  schedule_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool s_storage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KPS.mp_item_base base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_schedule;
        break;
      }
      
      // repeated .KPS.mp_schedule schedule = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_schedule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_schedule()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_schedule;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void s_storage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KPS.mp_item_base base = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // repeated .KPS.mp_schedule schedule = 2;
  for (int i = 0; i < this->schedule_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->schedule(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* s_storage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KPS.mp_item_base base = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // repeated .KPS.mp_schedule schedule = 2;
  for (int i = 0; i < this->schedule_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->schedule(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int s_storage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KPS.mp_item_base base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
  }
  // repeated .KPS.mp_schedule schedule = 2;
  total_size += 1 * this->schedule_size();
  for (int i = 0; i < this->schedule_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->schedule(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void s_storage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const s_storage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const s_storage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void s_storage::MergeFrom(const s_storage& from) {
  GOOGLE_CHECK_NE(&from, this);
  schedule_.MergeFrom(from.schedule_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_base()->::KPS::mp_item_base::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void s_storage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void s_storage::CopyFrom(const s_storage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s_storage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  for (int i = 0; i < schedule_size(); i++) {
    if (!this->schedule(i).IsInitialized()) return false;
  }
  return true;
}

void s_storage::Swap(s_storage* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    schedule_.Swap(&other->schedule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata s_storage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = s_storage_descriptor_;
  metadata.reflection = s_storage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KPS

// @@protoc_insertion_point(global_scope)
